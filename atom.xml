<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bing&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dbing.github.io/"/>
  <updated>2020-02-17T15:40:28.322Z</updated>
  <id>https://dbing.github.io/</id>
  
  <author>
    <name>bing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020年的第一天赴公司上班</title>
    <link href="https://dbing.github.io/2020/02/17/2020%E5%B9%B4%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9%E8%B5%B4%E5%85%AC%E5%8F%B8%E4%B8%8A%E7%8F%AD/"/>
    <id>https://dbing.github.io/2020/02/17/2020年的第一天赴公司上班/</id>
    <published>2020-02-17T15:14:46.000Z</published>
    <updated>2020-02-17T15:40:28.322Z</updated>
    
    <content type="html"><![CDATA[<p>自从疫情以来，已在远程办公两周，在这两周期间，本身就让有良好的自控力我，深深习惯了在家里办公，那叫一个爽呼呼尽管稍微有点（晚睡晚起-_-||），But 我会准时出席<code>9:30</code>的例会，按时吃早饭、中饭、偶尔稍微一点吃晚餐。今天是2020年首次进公司上班，以下是一些途中记录的照片。</p><h2 id="途中"><a href="#途中" class="headerlink" title="途中"></a>途中</h2><a id="more"></a><img src="/2020/02/17/2020年的第一天赴公司上班/1.jpeg"><img src="/2020/02/17/2020年的第一天赴公司上班/2.jpeg"><img src="/2020/02/17/2020年的第一天赴公司上班/3.jpeg"><img src="/2020/02/17/2020年的第一天赴公司上班/4.jpeg"><img src="/2020/02/17/2020年的第一天赴公司上班/5.jpeg"><img src="/2020/02/17/2020年的第一天赴公司上班/6.jpeg"><h2 id="公司"><a href="#公司" class="headerlink" title="公司"></a>公司</h2><img src="/2020/02/17/2020年的第一天赴公司上班/7.jpeg"><img src="/2020/02/17/2020年的第一天赴公司上班/8.jpeg"><h2 id="日本"><a href="#日本" class="headerlink" title="日本"></a>日本</h2><p>此时日本东京的地铁（日本已确诊400+例），位居国外首榜🤦‍♀️</p><img src="/2020/02/17/2020年的第一天赴公司上班/9.jpeg">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从疫情以来，已在远程办公两周，在这两周期间，本身就让有良好的自控力我，深深习惯了在家里办公，那叫一个爽呼呼尽管稍微有点（晚睡晚起-_-||），But 我会准时出席&lt;code&gt;9:30&lt;/code&gt;的例会，按时吃早饭、中饭、偶尔稍微一点吃晚餐。今天是2020年首次进公司上班，以下是一些途中记录的照片。&lt;/p&gt;
&lt;h2 id=&quot;途中&quot;&gt;&lt;a href=&quot;#途中&quot; class=&quot;headerlink&quot; title=&quot;途中&quot;&gt;&lt;/a&gt;途中&lt;/h2&gt;
    
    </summary>
    
      <category term="记事" scheme="https://dbing.github.io/categories/%E8%AE%B0%E4%BA%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac与Linux 使用 scp 文件互相传输</title>
    <link href="https://dbing.github.io/2020/02/14/Mac%E4%B8%8ELinux-%E4%BD%BF%E7%94%A8-scp-%E6%96%87%E4%BB%B6%E4%BA%92%E7%9B%B8%E4%BC%A0%E8%BE%93/"/>
    <id>https://dbing.github.io/2020/02/14/Mac与Linux-使用-scp-文件互相传输/</id>
    <published>2020-02-14T10:22:08.000Z</published>
    <updated>2020-02-14T12:34:29.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="由远端-Linux-传输到本机-Mac"><a href="#由远端-Linux-传输到本机-Mac" class="headerlink" title="由远端 Linux 传输到本机 Mac"></a>由远端 Linux 传输到本机 Mac</h2><p>命令格式 <code>scp username@remote_ip:remote_folder local_folder</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -i ~/.ssh/company/neox/demo-key.pem root@ip:/usr/share/demo.csv ./</span><br></pre></td></tr></table></figure><h2 id="由到本机-Mac-传输到远端-Linux"><a href="#由到本机-Mac-传输到远端-Linux" class="headerlink" title="由到本机 Mac 传输到远端 Linux"></a>由到本机 Mac 传输到远端 Linux</h2><p>命令格式 <code>scp local_file remote_username@remote_ip:remote_folder</code></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>Q1: permissions are too open</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added <span class="string">'host'</span> (ECDSA) to the list of known hosts.</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">Permissions 0644 <span class="keyword">for</span> <span class="string">'/Users/bing/.ssh/company/neox/prod-neox-aliyun-key.pem'</span> are too open.</span><br><span class="line">It is required that your private key files are NOT accessible by others.</span><br><span class="line">This private key will be ignored.</span><br><span class="line">Load key <span class="string">"/Users/bing/.ssh/company/neox/prod-neox-aliyun-key.pem"</span>: bad permissions</span><br></pre></td></tr></table></figure><p>解决办法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 ~/.ssh/company/neox/prod-neox-aliyun-key.pem</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">chmod 600 ~/.ssh/company/neox/prod-neox-aliyun-key.pem</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;由远端-Linux-传输到本机-Mac&quot;&gt;&lt;a href=&quot;#由远端-Linux-传输到本机-Mac&quot; class=&quot;headerlink&quot; title=&quot;由远端 Linux 传输到本机 Mac&quot;&gt;&lt;/a&gt;由远端 Linux 传输到本机 Mac&lt;/h2&gt;&lt;p&gt;命令
      
    
    </summary>
    
    
      <category term="scp" scheme="https://dbing.github.io/tags/scp/"/>
    
  </entry>
  
  <entry>
    <title>李超致兄弟连全体学员、员工、股东的一封信</title>
    <link href="https://dbing.github.io/2020/02/10/%E6%9D%8E%E8%B6%85%E8%87%B4%E5%85%84%E5%BC%9F%E8%BF%9E%E5%85%A8%E4%BD%93%E5%AD%A6%E5%91%98%E3%80%81%E5%91%98%E5%B7%A5%E3%80%81%E8%82%A1%E4%B8%9C%E7%9A%84%E4%B8%80%E5%B0%81%E4%BF%A1/"/>
    <id>https://dbing.github.io/2020/02/10/李超致兄弟连全体学员、员工、股东的一封信/</id>
    <published>2020-02-10T15:07:38.000Z</published>
    <updated>2020-02-10T15:57:50.243Z</updated>
    
    <content type="html"><![CDATA[<p>平日里我是一个不刷「抖音」、不刷「微博」、不刷「头条」、偶尔刷刷「人民日报」、微信公众号技术文章，每天沉浸于自个的工作和所关注的那个点的领域，感觉自个不像个活在当下21世纪的。</p><p>今天朋友分享过来一篇文章<a href="https://mp.weixin.qq.com/s/Tcew-SDseA7fzW_e4LivMA" target="_blank" rel="noopener">致兄弟连全体学员、员工、股东的一封信</a>，这是这次「新型冠状病毒疫情」期间更有感触的消息了，身边一位北京老朋友从里面学出来的，自己「北京八维研修学院」、「上海弘烨」干了3年教育，也晓得兄弟连在同行中的体量，他没能挺过这冬天还真是出乎意料。</p><p>从这封信中我读出来了两种味道，一味是：因为疫情问题，如他所说恢复时间根据疫情防控工作情况另行通知，让一直亏损的兄弟连无疑是雪上加霜，导致最终没能挺过来。教育行业的利润怎样是行业中有目共睹的，生源决定命脉「入口」，结果系着生源「出口」。我的孙院长曾这么给我说过，把握住这两口也就把握住了学校。想想不无道理。他从零做到了1000多学员的规模用2年的时间。可谓速度之快。<code>PHP</code>的大环境在18、19年就开始出现下滑趋势，19年尤其不怎么好的情况。同样不好的处境还有我一个上海创业开培训的老同事，机构就先不说，说了你也不晓得。</p><p>二味是：有这么一位义无反馈支持自己的妻子，我想这也应该是他成功的原因吧。</p><p>最后道别兄弟连、保重李超。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平日里我是一个不刷「抖音」、不刷「微博」、不刷「头条」、偶尔刷刷「人民日报」、微信公众号技术文章，每天沉浸于自个的工作和所关注的那个点的领域，感觉自个不像个活在当下21世纪的。&lt;/p&gt;
&lt;p&gt;今天朋友分享过来一篇文章&lt;a href=&quot;https://mp.weixin.qq
      
    
    </summary>
    
      <category term="记事" scheme="https://dbing.github.io/categories/%E8%AE%B0%E4%BA%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo docsify 添加 Gitalk</title>
    <link href="https://dbing.github.io/2020/02/09/Hexo-docsify-%E6%B7%BB%E5%8A%A0-Gitalk/"/>
    <id>https://dbing.github.io/2020/02/09/Hexo-docsify-添加-Gitalk/</id>
    <published>2020-02-09T11:48:07.000Z</published>
    <updated>2020-02-09T13:29:52.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h2><p><a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md" target="_blank" rel="noopener">官方地址</a></p><p><a href="https://gitalk.github.io/" target="_blank" rel="noopener">体验地址</a></p><blockquote><p>为 Hexo 的 <code>even</code>主题添加<code>gitalk</code>评论系统</p></blockquote><h2 id="创建-gitalk-文件"><a href="#创建-gitalk-文件" class="headerlink" title="创建 gitalk 文件"></a>创建 gitalk 文件</h2><p>在<code>themes/even/layout/_script/_comments</code>目录下新增<code>gitalk.swig</code>文件，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.comments &amp;&amp; theme.gitalk.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for('js/src') &#125;&#125;/md5.min.js?v=&#123;&#123; theme.version &#125;&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        var gitalk = new Gitalk(&#123;</span></span><br><span class="line"><span class="undefined">          clientID: '&#123;&#123; theme.gitalk.clientID &#125;&#125;',</span></span><br><span class="line"><span class="undefined">          clientSecret: '&#123;&#123; theme.gitalk.clientSecret &#125;&#125;',</span></span><br><span class="line"><span class="undefined">          repo: '&#123;&#123; theme.gitalk.repo &#125;&#125;',</span></span><br><span class="line"><span class="undefined">          owner: '&#123;&#123; theme.gitalk.owner &#125;&#125;',</span></span><br><span class="line"><span class="undefined">          admin: ['&#123;&#123; theme.gitalk.admin &#125;&#125;'],</span></span><br><span class="line"><span class="undefined">          id: md5(location.pathname),</span></span><br><span class="line"><span class="undefined">          distractionFreeMode: '&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;'</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">        gitalk.render('gitalk-container')</span></span><br><span class="line"><span class="undefined">       </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>为了解决「常见问题」中1，这里引用<code>md5.min.js</code>文件，然后将<code>id</code>，通过<code>md5</code>函数加密后再请求<code>github issue</code>API，<code>md5.min.js</code>文件我放在<code>themes/even/source/js/src/md5.min.js</code>目录，当然你也可以引入远程地址，<a href="https://github.com/blueimp/JavaScript-MD5/blob/master/js/md5.min.js" target="_blank" rel="noopener">md5库地址</a></p><h2 id="添加-gitalk-判断逻辑"><a href="#添加-gitalk-判断逻辑" class="headerlink" title="添加 gitalk 判断逻辑"></a>添加 gitalk 判断逻辑</h2><p><code>themes/even/layout/_partial/comments.swig</code>添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% elseif theme.gitalk.enable %&#125;</span><br><span class="line">    &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;  </span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>if elseif endif</code> 语法。</p></blockquote><h2 id="引入-gitalk"><a href="#引入-gitalk" class="headerlink" title="引入 gitalk"></a>引入 gitalk</h2><p>在<code>themes/even/layout/_script/comments.swig</code>文件中引入<code>gitalk.swig</code>文件，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.gitalk.enable %&#125;</span><br><span class="line">  &#123;% include &apos;_comments/gitalk.swig&apos; %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="配置-gitalk"><a href="#配置-gitalk" class="headerlink" title="配置 gitalk"></a>配置 gitalk</h2><p>配置<code>themes/even/_config.yml</code>中关于<code>gitalk</code>的配置，新增代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Gitalk</span><br><span class="line"># more info please open https://github.com/gitalk/gitalk</span><br><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  clientID: xxxxxxx</span><br><span class="line">  clientSecret: yyyyyyyyyyy</span><br><span class="line">  repo: &apos;dbing.github.io&apos;</span><br><span class="line">  owner: &apos;dbing&apos;</span><br><span class="line">  admin: &apos;dbing&apos;</span><br><span class="line">  distractionFreeMode: true</span><br></pre></td></tr></table></figure><p>没有<code>clientID</code>和<code>clientSecret</code>，<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击申请</a>，配置完以上恭喜你，重新生产部署一下你的博客文章命令：<code>hexo g -d</code>，打开文章详情页看看是否多出了评论框 :)</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>Q1.Error: Validation Failed.</p><p>解决方法：<a href="https://github.com/gitalk/gitalk/issues/115#issuecomment-375954482" target="_blank" rel="noopener">https://github.com/gitalk/gitalk/issues/115#issuecomment-375954482</a></p><p>打开<code>Network</code>看请求，多半是因为<code>github issues</code>接口错误，以上方案给出的很详细。</p><p>Q2.Error: Issues are disabled for this repo</p><p>解决方法：<a href="https://github.com/imsun/gitment/issues/125" target="_blank" rel="noopener">https://github.com/imsun/gitment/issues/125</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Gitalk&quot;&gt;&lt;a href=&quot;#Gitalk&quot; class=&quot;headerlink&quot; title=&quot;Gitalk&quot;&gt;&lt;/a&gt;Gitalk&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/gitalk/gitalk/blob/master/
      
    
    </summary>
    
    
      <category term="gittalk" scheme="https://dbing.github.io/tags/gittalk/"/>
    
  </entry>
  
  <entry>
    <title>因PHP内存超出限制导致首页500</title>
    <link href="https://dbing.github.io/2020/02/06/%E5%9B%A0PHP%E5%86%85%E5%AD%98%E8%B6%85%E5%87%BA%E9%99%90%E5%88%B6%E5%AF%BC%E8%87%B4%E9%A6%96%E9%A1%B5500/"/>
    <id>https://dbing.github.io/2020/02/06/因PHP内存超出限制导致首页500/</id>
    <published>2020-02-06T13:32:41.000Z</published>
    <updated>2020-02-09T11:39:31.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现场"><a href="#现场" class="headerlink" title="现场"></a>现场</h2><p>事发后的某一段<code>log</code>日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[2020-02-06 14:09:20] production.ERROR: Symfony\Component\Debug\Exception\FatalErrorException: Allowed memory size of 134217728 bytes exhausted (tried to allocate 1191936 bytes) in /project-path/vendor/jenssegers/mongodb/src/Jenssegers/Mongodb/Query/Builder.php:373</span><br><span class="line">Stack trace:</span><br><span class="line">#0 &#123;main&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/06/因PHP内存超出限制导致首页500/500.png" width="500"><h2 id="临时解决办法"><a href="#临时解决办法" class="headerlink" title="临时解决办法"></a>临时解决办法</h2><p>放开PHP内存限制，修改<code>php.ini</code>，中<code>memory_limit=-1</code>，然后重启，<code>php-fpm</code> 服务，<code>sudo service php7.1-fpm restart</code></p><p>网站恢复访问后，排查首页代码，定位手改一处过大查询代码（前人遗留）。</p><h2 id="问题代码"><a href="#问题代码" class="headerlink" title="问题代码"></a>问题代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据发布时间倒序获取新闻 首页用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int $limit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewsAtIndexPage</span><span class="params">($limit = <span class="number">5</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $newsList = [];</span><br><span class="line">    $rawNews = (<span class="keyword">new</span> Filter())-&gt;getEnableDisplay()-&gt;sortByPublishAt()-&gt;getNews();</span><br><span class="line">    <span class="keyword">foreach</span> ($rawNews <span class="keyword">as</span> $news) &#123;</span><br><span class="line">        $newsList[] = [</span><br><span class="line">            <span class="string">'url'</span>   =&gt; <span class="keyword">$this</span>-&gt;getNewsPublishURL($news[<span class="string">'type'</span>], $news[<span class="string">'_id'</span>],<span class="keyword">false</span>),</span><br><span class="line">            <span class="string">'title'</span> =&gt; $news[<span class="string">'title'</span>],</span><br><span class="line">            <span class="string">'cover'</span> =&gt; $news[<span class="string">'cover'</span>],</span><br><span class="line">            <span class="string">'publish_at'</span>=&gt; $news[<span class="string">'publish_at'</span>]</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">if</span>(count($newsList) == $limit) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $newsList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNews</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;model-&gt;get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化前后结果"><a href="#优化前后结果" class="headerlink" title="优化前后结果"></a>优化前后结果</h2><img src="/2020/02/06/因PHP内存超出限制导致首页500/1.png"><img src="/2020/02/06/因PHP内存超出限制导致首页500/2.png"><img src="/2020/02/06/因PHP内存超出限制导致首页500/code.png" title="code"><h2 id="好文推荐"><a href="#好文推荐" class="headerlink" title="好文推荐"></a>好文推荐</h2><ul><li><a href="https://juejin.im/post/5aa7c5575188255589497de2" target="_blank" rel="noopener">PHP 内存泄漏分析定位</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;现场&quot;&gt;&lt;a href=&quot;#现场&quot; class=&quot;headerlink&quot; title=&quot;现场&quot;&gt;&lt;/a&gt;现场&lt;/h2&gt;&lt;p&gt;事发后的某一段&lt;code&gt;log&lt;/code&gt;日志&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>因更换SSL证书安卓APP和CDN停止服务</title>
    <link href="https://dbing.github.io/2020/02/06/%E5%9B%A0%E6%9B%B4%E6%8D%A2SSL%E8%AF%81%E4%B9%A6%E5%AE%89%E5%8D%93APP%E5%92%8CCDN%E5%81%9C%E6%AD%A2%E6%9C%8D%E5%8A%A1/"/>
    <id>https://dbing.github.io/2020/02/06/因更换SSL证书安卓APP和CDN停止服务/</id>
    <published>2020-02-06T13:30:13.000Z</published>
    <updated>2020-02-06T14:35:22.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现场"><a href="#现场" class="headerlink" title="现场"></a>现场</h2><ol><li>网站样式图片全丢，通过<code>network</code>看到所有<code>css</code>、<code>js</code>、<code>image</code>，都指向到<code>static.shenjumiaosuan.com</code>，响应状态<code>502</code>，我们的静态资源使用的是七牛<code>CDN</code>服务，当日因我们的<code>ssl</code>年证书到期，已经更换为新证书。</li></ol><img src="/2020/02/06/因更换SSL证书安卓APP和CDN停止服务/cdn.png" title="七牛CDN"><img src="/2020/02/06/因更换SSL证书安卓APP和CDN停止服务/502.png" width="502"><ol start="2"><li>安卓开发者反馈，安卓客户端无法打开，所有<code>api</code>均无法正常请求，同时<code>ios</code>确是好的（是不是很惊喜、很意外）。后了解到安卓是需要中间证书。</li></ol><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol><li>静态CDN域<code>static.shenjumiaosuan.com</code>，通过项目<code>.env</code>配置切换到本站<code>www.shenjumiaosuan.com</code></li><li>SSL证书紧急切换为之前旧证书</li><li>重新下载新证书，并拼接上中间证书，重新上传</li></ol><h2 id="证书续期"><a href="#证书续期" class="headerlink" title="证书续期"></a>证书续期</h2><p>因我们的域名是在爱名网，故以下有在爱名网操作步骤：</p><p>1、 缴费续期后通过openssl生成新的CSR。参考文档<a href="https://ssl.22.cn/Helper/Details/347（也可使用相关在线工具https://myssl.com/csr_create.html）。" target="_blank" rel="noopener">https://ssl.22.cn/Helper/Details/347（也可使用相关在线工具https://myssl.com/csr_create.html）。</a></p><p>2、得到private.key和csr.pem后，将csr提交到爱名网，并将文件存档。</p><p>3、域名续期进入审核状态，需要联系客服进行认证。认证流程中需要将对方给到的字符串解进行dns解析（@ TXT记录），等待审核通过后可以通过爱名网下载域名的crt签名。</p><h2 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h2><p>将中间人证书补充到签发的证书中</p><img src="/2020/02/06/因更换SSL证书安卓APP和CDN停止服务/ssl.png"><p>因涉及公司隐私，暂不提供参考图。</p><p>1、查找邮箱链接找到链接，进入后填写邮件标题中的订单号和邮箱进入后，点击request access</p><p>2、通过邮件链接下载证书颁发机构的附加证书</p><p>私钥部分：private.key<br>公钥部分：<br>拼装爱名网下载的crt+中间人crt，格式如下（检查空格回车）：</p><img src="/2020/02/06/因更换SSL证书安卓APP和CDN停止服务/crt.png"><h2 id="上传证书"><a href="#上传证书" class="headerlink" title="上传证书"></a>上传证书</h2><p>阿里云lbs：<br>证书管理 &gt;&gt; 创建证书（上传非阿里云签发证书） &gt;&gt; 替换证书</p><p>七牛云：<br>证书服务 &gt;&gt; 上传自有证书<br>CDN &gt;&gt; 域名管理 &gt;&gt; 配置 &gt;&gt; 更换证书</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>内部 wiki</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;现场&quot;&gt;&lt;a href=&quot;#现场&quot; class=&quot;headerlink&quot; title=&quot;现场&quot;&gt;&lt;/a&gt;现场&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;网站样式图片全丢，通过&lt;code&gt;network&lt;/code&gt;看到所有&lt;code&gt;css&lt;/code&gt;、&lt;code&gt;js&lt;/co
      
    
    </summary>
    
    
      <category term="ssl证书" scheme="https://dbing.github.io/tags/ssl%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Python 入门指南</title>
    <link href="https://dbing.github.io/2020/02/06/Python-%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://dbing.github.io/2020/02/06/Python-入门指南/</id>
    <published>2020-02-06T07:05:20.000Z</published>
    <updated>2020-02-06T07:06:07.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>快速搞定<code>Python</code>语法</p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><p><a href="http://ddrv.cn/docs/pythontutorial3/" target="_blank" rel="noopener">http://ddrv.cn/docs/pythontutorial3/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;快速搞定&lt;code&gt;Python&lt;/code&gt;语法&lt;/p&gt;
&lt;h2 id=&quot;学习资料&quot;&gt;&lt;a href=&quot;#学习资料&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="python" scheme="https://dbing.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>anaconda 和 zsh 不兼容问题</title>
    <link href="https://dbing.github.io/2020/02/06/anaconda-%E5%92%8C-zsh-%E4%B8%8D%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/"/>
    <id>https://dbing.github.io/2020/02/06/anaconda-和-zsh-不兼容问题/</id>
    <published>2020-02-06T04:56:59.000Z</published>
    <updated>2020-02-06T14:09:27.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>错误场景：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ /Users/bing/.anaconda/navigator/a.tool ; <span class="built_in">exit</span>;</span><br><span class="line">/Users/bing/.anaconda/navigator/a.tool: line 1: syntax error near unexpected token `(<span class="string">'</span></span><br><span class="line"><span class="string">/Users/bing/.anaconda/navigator/a.tool: line 1: `bash --init-file &lt;(echo "source activate /Users/bing/opt/anaconda3/envs/my-opencv;")'</span></span><br></pre></td></tr></table></figure><img src="/2020/02/06/anaconda-和-zsh-不兼容问题/error.png"><h2 id="临时解决方法"><a href="#临时解决方法" class="headerlink" title="临时解决方法"></a>临时解决方法</h2><p>切换到<code>bash</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/bash</span><br></pre></td></tr></table></figure><p>通过<code>conda</code>GUI，打开命令行后，再切换到<code>zsh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://iaside.com/archives/455" target="_blank" rel="noopener">https://iaside.com/archives/455</a></li><li><a href="https://github.com/ContinuumIO/anaconda-issues/issues/1831" target="_blank" rel="noopener">github issue</a></li><li><a href="https://stackoverflow.com/questions/54502718/cant-run-anaconda-in-macos-terminal" target="_blank" rel="noopener">stackoverflow</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;错误场景：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
    
      <category term="anaconda" scheme="https://dbing.github.io/tags/anaconda/"/>
    
  </entry>
  
  <entry>
    <title>opencv 对比度亮度调整</title>
    <link href="https://dbing.github.io/2020/02/06/opencv-%E5%AF%B9%E6%AF%94%E5%BA%A6%E4%BA%AE%E5%BA%A6%E8%B0%83%E6%95%B4/"/>
    <id>https://dbing.github.io/2020/02/06/opencv-对比度亮度调整/</id>
    <published>2020-02-05T16:34:07.000Z</published>
    <updated>2020-02-05T16:43:07.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>来源需要对一张图片，弱化背景效果的需求。与其说弱化不如说是把暗度调亮。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>图片对比度和亮度的调整一般通过下面公式计算：g(x,y)=a∗f(x,y)+b</p><p>f(x,y) 代表源图像 x行，y列的像素点的c通道的数值<br>g(x,y) 代表目标图像x行，y列的像素点的c通道的数值<br>a 参数（a&gt;0）表示放大的倍数（一般在0.0~3.0之间）<br>b 参数一般称为偏置，用来调节亮度</p><p>方案一代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  cv2</span><br><span class="line"></span><br><span class="line">img=cv2.imread(<span class="string">'test.jpg'</span>)</span><br><span class="line">cv2.imshow(<span class="string">'original_img'</span>,img)</span><br><span class="line">rows,cols,channels=img.shape</span><br><span class="line">dst=img.copy()</span><br><span class="line"></span><br><span class="line">a=<span class="number">0.5</span></span><br><span class="line">b=<span class="number">80</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(rows):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(cols):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            color=img[i,j][c]*a+b</span><br><span class="line">            <span class="keyword">if</span> color&gt;<span class="number">255</span>:           <span class="comment"># 防止像素值越界（0~255）</span></span><br><span class="line">                dst[i,j][c]=<span class="number">255</span></span><br><span class="line">            <span class="keyword">elif</span> color&lt;<span class="number">0</span>:           <span class="comment"># 防止像素值越界（0~255）</span></span><br><span class="line">                dst[i,j][c]=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">'dst'</span>,dst)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>方案二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contrast_img</span><span class="params">(img1, c, b)</span>:</span>  <span class="comment"># 亮度就是每个像素所有通道都加上b</span></span><br><span class="line">    rows, cols, channels = img1.shape</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新建全零(黑色)图片数组:np.zeros(img1.shape, dtype=uint8)</span></span><br><span class="line">    blank = np.zeros([rows, cols, channels], img1.dtype)</span><br><span class="line">    dst = cv2.addWeighted(img1, c, blank, <span class="number">1</span>-c, b)</span><br><span class="line">    cv2.imshow(<span class="string">'original_img'</span>, img)</span><br><span class="line">    cv2.imshow(<span class="string">"contrast_img"</span>, dst)</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">"./test.png"</span>, cv2.IMREAD_COLOR)</span><br><span class="line">contrast_img(img, <span class="number">1.3</span>, <span class="number">3</span>)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>原文来自 <a href="https://blog.csdn.net/wsp_1138886114/article/details/82624534" target="_blank" rel="noopener">csdn</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;p&gt;来源需要对一张图片，弱化背景效果的需求。与其说弱化不如说是把暗度调亮。&lt;/p&gt;
&lt;h2 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; clas
      
    
    </summary>
    
    
      <category term="opencv" scheme="https://dbing.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>opencv 研究</title>
    <link href="https://dbing.github.io/2020/02/04/opencv-%E7%A0%94%E7%A9%B6/"/>
    <id>https://dbing.github.io/2020/02/04/opencv-研究/</id>
    <published>2020-02-04T14:34:32.000Z</published>
    <updated>2020-02-15T12:18:12.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>来自于公司<code>OCR</code>业务对图片中金额识别不精准（因分割金额的每个小格子存在竖虚线有时会被利用有道Api有时会误识别成金额1），现调研<code>OpenCV</code>如何处理此问题。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><blockquote><p>OpenCV是一个基于BSD许可（开源）发行的跨平台计算机视觉库，可以运行在Linux、Windows、Android和Mac OS操作系统上。它轻量级而且高效——由一系列 C 函数和少量 C++ 类构成，同时提供了Python、Ruby、MATLAB等语言的接口，实现了图像处理和计算机视觉方面的很多通用算法。</p></blockquote><p>以上是百度百科对<code>OpenCV</code>介绍，用<code>C++</code>去调用很显然不够现实，同时我查到了有开源作者贡献了<code>PHP</code>扩展，<a href="https://phpopencv.org/zh-cn/docs/install.html" target="_blank" rel="noopener">phpopencv</a>，只因这个扩展着实难编译出来（半个下午时间都采到这坑里了），没结果，最后无奈放弃（最后在<code>github</code>仓库看到可以<code>docker</code>安装，-_-||，只能说文档太旧没更新了）。</p><p>方案二：<a href="http://www.1zlab.com/wiki/python-opencv-tutorial/image-statistic-draw-curves/" target="_blank" rel="noopener">python-opencv</a> <code>docker</code>启动一个<code>ubuntu</code>容器，然后容器内安装<code>Anaconda</code>，<a href="https://www.digitalocean.com/community/tutorials/how-to-install-anaconda-on-ubuntu-18-04-quickstart" target="_blank" rel="noopener">参考自</a>，通过<code>conda</code>快速安装<code>opencv</code>，在利用文档说提供的现成<code>python</code>代码，马上<code>run</code>起<code>Demo</code>，爽的一批批，</p><p>用到的<code>conda</code>几个命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda search opencv</span><br><span class="line">conda install opencv=3.3.1</span><br><span class="line">conda env</span><br><span class="line">conda info --envs</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>虽然还没解决自个的问题，用下午1个多小时，已经快速完成数学形态学中（腐蚀、膨胀、开运算、闭运算）<code>Demo</code>实例。</p><p>补充 <code>opencv</code> 学习参考资料：<a href="https://github.com/MachineLP/OpenCV-" target="_blank" rel="noopener">github MachineLP</a></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://pypi.org/project/opencv-python/" target="_blank" rel="noopener">https://pypi.org/project/opencv-python/</a></li><li><a href="https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_tutorials.html#" target="_blank" rel="noopener">https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_tutorials.html#</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;来自于公司&lt;code&gt;OCR&lt;/code&gt;业务对图片中金额识别不精准（因分割金额的每个小格子存在竖虚线有时会被利用有道Api有时会误识别成金
      
    
    </summary>
    
    
      <category term="opencv" scheme="https://dbing.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>史记</title>
    <link href="https://dbing.github.io/2020/02/01/%E5%8F%B2%E8%AE%B0/"/>
    <id>https://dbing.github.io/2020/02/01/史记/</id>
    <published>2020-02-01T03:01:16.000Z</published>
    <updated>2020-02-01T03:32:25.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本纪"><a href="#本纪" class="headerlink" title="本纪"></a>本纪</h2><h3 id="五帝本纪"><a href="#五帝本纪" class="headerlink" title="五帝本纪"></a>五帝本纪</h3><p>汉代文学家司马迁创作的第一篇文章，位于《史记》首篇，记载远古传说中被后人尊称为五个部落联盟首领–黄帝、颛顼(zhuān xū)、帝喾（kù）、尧、舜的事迹。</p><h3 id="夏本纪"><a href="#夏本纪" class="headerlink" title="夏本纪"></a>夏本纪</h3><p>《夏本纪》创作于西汉，出自《史记卷二·夏本纪第二》。作品中主要记述了夏朝的历史。夏代年代久远，《夏本纪》中记载的内容是现代人研究夏代历史的重要参考资料。夏本是一个古老的部落，相传是由包括夏在内的十多个部落联合发展而来的，与古代其他部落交错分布于中国境内。到唐尧、虞舜时期，夏族的首领禹因治水有功，取得了帝位，并传给其子启，从而建立了我国历史上第一个奴隶制王朝。</p><h3 id="殷本纪"><a href="#殷本纪" class="headerlink" title="殷本纪"></a>殷本纪</h3><p>《殷本纪》是西汉史学家司马迁创作的一篇文言文，出自《史记卷三·殷本纪第三》。商朝是中国历史上的第二个朝代，从公元前1600年——公元前1046年，前后相传17世31王，延续约600年时间。相传商的始祖契曾帮助禹治水有功而受封于商（今河南商丘），以后就以“商”来称其部落（或部族）。汤灭夏后，就以“商”作为国号。其后裔盘庚迁殷（今河南安阳西北）后，首都没有再变化过，故又以称“殷朝”或“殷商”。</p><h3 id="周本纪"><a href="#周本纪" class="headerlink" title="周本纪"></a>周本纪</h3><p>《周本纪》是西汉史学家司马迁创作的一篇文言文，出自司马迁《史记》卷四、本纪第四。该作品概括地描述了周王朝兴衰的历史，勾画出一个天下朝宗、幅员辽阔的强大奴隶制王国的概貌，以及其间不同阶段不同君王厚民爱民或伤民虐民的不同政治作风，君臣之间协力相助共图大业或相互倾轧各执已见的不同政治气氛。</p><h3 id="秦本纪"><a href="#秦本纪" class="headerlink" title="秦本纪"></a>秦本纪</h3><p>《秦本纪》是西汉史学家司马迁创作的一篇文言文，出自《史记卷五·秦本纪第五》。主要讲述了春秋和战国时期的诸侯国秦国从兴起、发展到称霸天下、秦王嬴政统一全国之前的历史。</p><h3 id="秦始皇本纪"><a href="#秦始皇本纪" class="headerlink" title="秦始皇本纪"></a>秦始皇本纪</h3><p>《秦始皇本纪》出自《史记卷六·秦始皇本纪第六》，作者是司马迁。这篇本纪以编年记事的形式，记载了秦始皇赵政(嬴政)及秦二世赵胡亥一生的主要活动和所发生的重大事件，条理清晰，内容丰富，真实地反映了秦朝建立前后四十年间风云变幻的历史场面。<br>这篇本纪以秦始皇赵政(嬴政)和秦二世赵胡亥的活动为中心，逐年叙写，简中有繁，概括与重笔相间，通篇读来，不仅给人以历史的原貌，还可以使人感到一切都是历史的必然，两代帝王的形象活脱脱地呈现在眼前。</p><h3 id="项羽本纪"><a href="#项羽本纪" class="headerlink" title="项羽本纪"></a>项羽本纪</h3><p>《项羽本纪》是西汉史学家司马迁创作的一篇文言文，收录于《史记》中第七卷，是关于楚霸王项羽的本纪，它记录了秦末项羽光辉壮烈的一生。<br>《项羽本纪》通过叙述秦末农民大起义和楚汉之争的宏阔历史场面，生动而又深刻地描述了项羽一生。项羽既是一个力拔山、气盖世、“近古以来未尝有”的英雄，又是一个性情暴戾、优柔寡断、只知用武不谙机谋的匹夫。司马迁巧妙地把项羽性格中矛盾的各个侧面，有机地统一于这一鸿篇巨著之中，虽然不乏深刻的挞伐，但更多的却是由衷的惋惜和同情。<br>而在《史记》中，“本纪”所记录的大都是皇帝，其中项羽并没有成为皇帝，司马迁把他归入“本纪”则表现了对项羽的尊重。</p><h3 id="高祖本纪"><a href="#高祖本纪" class="headerlink" title="高祖本纪"></a>高祖本纪</h3><p>《高祖本纪》是西汉史学家司马迁创作的一篇文言文，收录于《史记》中。该文记述了汉高祖刘邦从布衣到皇帝的传奇一生。刘邦是汉朝的开国皇帝，庙号为太祖，谥号为高皇帝，所以史称太祖高皇帝、汉高祖或汉高帝。他对汉民族的统一、中国的强大和汉文化的保护和发扬有着决定性的贡献。</p><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><h2 id="书"><a href="#书" class="headerlink" title="书"></a>书</h2><h2 id="世家"><a href="#世家" class="headerlink" title="世家"></a>世家</h2><h2 id="列传"><a href="#列传" class="headerlink" title="列传"></a>列传</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://baike.baidu.com/item/%E5%8F%B2%E8%AE%B0/254522?fr=aladdin" target="_blank" rel="noopener">史记百科</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;本纪&quot;&gt;&lt;a href=&quot;#本纪&quot; class=&quot;headerlink&quot; title=&quot;本纪&quot;&gt;&lt;/a&gt;本纪&lt;/h2&gt;&lt;h3 id=&quot;五帝本纪&quot;&gt;&lt;a href=&quot;#五帝本纪&quot; class=&quot;headerlink&quot; title=&quot;五帝本纪&quot;&gt;&lt;/a&gt;五帝本纪&lt;/h
      
    
    </summary>
    
      <category term="文学" scheme="https://dbing.github.io/categories/%E6%96%87%E5%AD%A6/"/>
    
    
      <category term="史记" scheme="https://dbing.github.io/tags/%E5%8F%B2%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Docker 基础命令</title>
    <link href="https://dbing.github.io/2020/01/29/Docker-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>https://dbing.github.io/2020/01/29/Docker-基础命令/</id>
    <published>2020-01-29T08:26:09.000Z</published>
    <updated>2020-01-30T13:16:11.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录挂载"><a href="#目录挂载" class="headerlink" title="目录挂载"></a>目录挂载</h2><p>应用场景：启动容器，挂载宿主机的目录到容器目录，从而利用容器环境执行宿主机目录中代码。</p><p>可以通过<code>-v</code>参数指定要挂载宿主机的哪个目录，对应到容器内的目录，参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v /Users/bing/website/php-opencv:/work  morozovsk/php-opencv bash</span><br></pre></td></tr></table></figure><p>注意事项：</p><ol><li>容器目录不能是相对路径，否则会报错<code>invalid mount path:.....</code></li><li>宿主机目录如果不存在，会自动生成</li><li>修改容器内文件拥有者，会根据容器内文件用户id，对应修改宿主机上目录的拥有者为同一个UID</li></ol><p>如果宿主机为相对目录，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -v aaa:/work  morozovsk/php-opencv bash</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -v aaa:/work  morozovsk/php-opencv bash</span><br></pre></td></tr></table></figure></p><p>通过<code>inspect</code>查看，默认<code>Mounts</code>挂载位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect CONTAINER ID</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;aaa&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/aaa/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;/work&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;z&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure></p><h2 id="退出容器自动销毁"><a href="#退出容器自动销毁" class="headerlink" title="退出容器自动销毁"></a>退出容器自动销毁</h2><p>通过<code>--rm</code>参数完成</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录挂载&quot;&gt;&lt;a href=&quot;#目录挂载&quot; class=&quot;headerlink&quot; title=&quot;目录挂载&quot;&gt;&lt;/a&gt;目录挂载&lt;/h2&gt;&lt;p&gt;应用场景：启动容器，挂载宿主机的目录到容器目录，从而利用容器环境执行宿主机目录中代码。&lt;/p&gt;
&lt;p&gt;可以通过&lt;code&gt;-
      
    
    </summary>
    
    
      <category term="docker" scheme="https://dbing.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Google cloud 搭建VPN</title>
    <link href="https://dbing.github.io/2020/01/29/Google-cloud-%E6%90%AD%E5%BB%BAVPN/"/>
    <id>https://dbing.github.io/2020/01/29/Google-cloud-搭建VPN/</id>
    <published>2020-01-29T06:08:27.000Z</published>
    <updated>2020-01-29T06:58:58.046Z</updated>
    
    <content type="html"><![CDATA[<p>安装步骤来源网络文章，这里仅用来做Mark记录，具体步骤见参考地址。</p><h2 id="开通Google-Cloud"><a href="#开通Google-Cloud" class="headerlink" title="开通Google Cloud"></a>开通Google Cloud</h2><p>国内已关闭信用卡可申请开通300$体验金渠道。</p><h2 id="创建Compute-Engine"><a href="#创建Compute-Engine" class="headerlink" title="创建Compute Engine"></a>创建Compute Engine</h2><ol><li>区域（台湾）</li><li>机器类型 g1-small 即可</li></ol><h2 id="配置VPC网络"><a href="#配置VPC网络" class="headerlink" title="配置VPC网络"></a>配置VPC网络</h2><ol><li>防火墙规则，【入站】和【出站】所有协议允许</li><li>外部 IP 地址，类型设置为【静态】</li></ol><h2 id="执行安装脚本"><a href="#执行安装脚本" class="headerlink" title="执行安装脚本"></a>执行安装脚本</h2><p>客户端 shadowsocks，选择 shadowsocksR: 输入: 2</p><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><ul><li><a href="https://vschk.wordpress.com/2019/07/05/%E8%B0%B7%E6%AD%8C%E4%BA%91%EF%BC%88google-cloud%EF%BC%89%E6%90%AD%E5%BB%BAssr%E6%95%99%E7%A8%8B%EF%BC%8C%E5%85%8D%E5%AE%89%E8%A3%9Dbbr/" target="_blank" rel="noopener">https://vschk.wordpress.com/2019/07/05/%E8%B0%B7%E6%AD%8C%E4%BA%91%EF%BC%88google-cloud%EF%BC%89%E6%90%AD%E5%BB%BAssr%E6%95%99%E7%A8%8B%EF%BC%8C%E5%85%8D%E5%AE%89%E8%A3%9Dbbr/</a></li><li><a href="https://www.veryopen.org/?p=3580" target="_blank" rel="noopener">https://www.veryopen.org/?p=3580</a></li><li><a href="https://fengooge.blogspot.com/2019/06/how-to-build-shadowsocks-with-google-cloud-platform.html" target="_blank" rel="noopener">https://fengooge.blogspot.com/2019/06/how-to-build-shadowsocks-with-google-cloud-platform.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装步骤来源网络文章，这里仅用来做Mark记录，具体步骤见参考地址。&lt;/p&gt;
&lt;h2 id=&quot;开通Google-Cloud&quot;&gt;&lt;a href=&quot;#开通Google-Cloud&quot; class=&quot;headerlink&quot; title=&quot;开通Google Cloud&quot;&gt;&lt;/a&gt;开通
      
    
    </summary>
    
    
      <category term="vpn" scheme="https://dbing.github.io/tags/vpn/"/>
    
  </entry>
  
  <entry>
    <title>快速搭建Jenkins</title>
    <link href="https://dbing.github.io/2020/01/21/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAJenkins/"/>
    <id>https://dbing.github.io/2020/01/21/快速搭建Jenkins/</id>
    <published>2020-01-21T10:49:38.000Z</published>
    <updated>2020-01-22T08:18:47.935Z</updated>
    
    <content type="html"><![CDATA[<p>研究 Jenkins 一日，简结下结果</p><ol><li><p>利用 gitlab webhooks 配合 jenkins 完成测试服代码自动集成</p></li><li><p>通过 jenkins 发布指定分支或tag代码到生产服务器</p></li></ol><p>对于<code>jenkins</code>的安装，因为环境不同，网络上也有一大把文章，对此先不做介绍。</p><p>对于不会写<code>Jenkinsfile</code>以及不想花费过多时间就想把<code>jenkins</code>玩转，还是有难度的，研究时间有限也不愿意在这上面投入时间了，玩过了才方知感受。</p><h2 id="采坑"><a href="#采坑" class="headerlink" title="采坑"></a>采坑</h2><ol><li><code>jenkins</code>过滤空目录问题</li></ol><p>Send files or execute commands over SSH after the build runs 过滤空目录问题</p><p>解决方式：-&gt;高级-&gt;Make empty dirs【打钩】此项<br>参考地址：<a href="http://ant.apache.org/manual/dirtasks.html#patterns" target="_blank" rel="noopener">http://ant.apache.org/manual/dirtasks.html#patterns</a></p><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><ul><li><a href="https://juejin.im/post/5dce6b3a5188254eed5b23a2#heading-4" target="_blank" rel="noopener">https://juejin.im/post/5dce6b3a5188254eed5b23a2#heading-4</a> </li><li><a href="https://www.cnblogs.com/saysmy/p/8806975.html" target="_blank" rel="noopener">https://www.cnblogs.com/saysmy/p/8806975.html</a></li><li><a href="https://yq.aliyun.com/articles/485296?spm=a2c4e.11153940.0.0.69de5f54y6etf3" target="_blank" rel="noopener">https://yq.aliyun.com/articles/485296?spm=a2c4e.11153940.0.0.69de5f54y6etf3</a></li><li><a href="https://www.cloudcared.cn/2792.html" target="_blank" rel="noopener">https://www.cloudcared.cn/2792.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;研究 Jenkins 一日，简结下结果&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;利用 gitlab webhooks 配合 jenkins 完成测试服代码自动集成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过 jenkins 发布指定分支或tag代码到生产服务器&lt;/p&gt;
&lt;/li&gt;
&lt;/
      
    
    </summary>
    
    
      <category term="持续交付" scheme="https://dbing.github.io/tags/%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>Nginx proxy_pass upstream resolver</title>
    <link href="https://dbing.github.io/2020/01/20/Nginx-proxy-pass-upstream-resolver/"/>
    <id>https://dbing.github.io/2020/01/20/Nginx-proxy-pass-upstream-resolver/</id>
    <published>2020-01-20T10:15:57.000Z</published>
    <updated>2020-01-22T08:19:44.259Z</updated>
    
    <content type="html"><![CDATA[<p>总结很到位，还未有时间细细品味mark一下</p><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><ul><li><a href="https://www.jianshu.com/p/5caa48664da5" target="_blank" rel="noopener">https://www.jianshu.com/p/5caa48664da5</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;总结很到位，还未有时间细细品味mark一下&lt;/p&gt;
&lt;h2 id=&quot;参考地址&quot;&gt;&lt;a href=&quot;#参考地址&quot; class=&quot;headerlink&quot; title=&quot;参考地址&quot;&gt;&lt;/a&gt;参考地址&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jiansh
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>nohup screen tmux 远程会话保持</title>
    <link href="https://dbing.github.io/2020/01/20/nohup-screen-tmux-%E8%BF%9C%E7%A8%8B%E4%BC%9A%E8%AF%9D%E4%BF%9D%E6%8C%81/"/>
    <id>https://dbing.github.io/2020/01/20/nohup-screen-tmux-远程会话保持/</id>
    <published>2020-01-20T10:10:01.000Z</published>
    <updated>2020-01-20T10:10:01.257Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Docker 搭建 Gitlab 服务</title>
    <link href="https://dbing.github.io/2020/01/15/Docker-%E6%90%AD%E5%BB%BA-Gitlab-%E6%9C%8D%E5%8A%A1/"/>
    <id>https://dbing.github.io/2020/01/15/Docker-搭建-Gitlab-服务/</id>
    <published>2020-01-15T08:56:26.000Z</published>
    <updated>2020-01-22T07:56:25.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>公司使用的<code>bitbucket</code>提供的<code>git</code>远程仓库，为什么选择他历史原因喽，回想第一天克隆一个<code>1G+</code>的<code>repo</code>等待了一天，这个痛苦啊。最近的每次发版都着实的感觉到<code>bitbucket</code>慢的给蜗牛一样（应该是墙的问题每次都得开VPN才能正常玩啥），鉴于此情况下，决定使用自建<code>Gitlab</code>服务，选择华东(上海)地区机房，日本团队的小伙伴测试的速度<code>400M+</code>大小的<code>repo</code>，克隆下来30分钟左右。</p><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p>Ubuntu 安装 Docker，官方文档：<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/ubuntu/</a></p><ol><li><p>更新 apt 包索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装最新版本的 Docker Engine-Community和containerd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>查看安装成功的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@jira:~# docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           19.03.5</span><br><span class="line"> API version:       1.40</span><br><span class="line"> Go version:        go1.12.12</span><br><span class="line"> Git commit:        633a0ea838</span><br><span class="line"> Built:             Wed Nov 13 07:50:12 2019</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      false</span><br><span class="line"> ...</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure></li></ol><h2 id="Docker-下快速部署-Gitlab-服务"><a href="#Docker-下快速部署-Gitlab-服务" class="headerlink" title="Docker 下快速部署 Gitlab 服务"></a>Docker 下快速部署 Gitlab 服务</h2><p>使用开源的<a href="https://github.com/sameersbn/docker-gitlab" target="_blank" rel="noopener">Gitlab</a> <code>docker-compose.yml</code>快速搭建，</p><p>我计划将<code>gitlab</code>服务放在<code>/usr/local/gitlab</code>目录，故创建了此目录</p><ol><li><p>下载<code>docker-compose.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/gitlab &amp;&amp; cd /usr/local/gitlab</span><br><span class="line">wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml</span><br></pre></td></tr></table></figure></li><li><p>修改<code>docker-compose.yml</code>配置项，这里仅贴出修改过的配置项</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 时区</span><br><span class="line">- TZ=Asia/Shanghai</span><br><span class="line">- GITLAB_TIMEZONE=PRC</span><br><span class="line"></span><br><span class="line"># 开启SSL</span><br><span class="line">- GITLAB_HTTPS=true</span><br><span class="line"></span><br><span class="line"># Gitlab 域和端口，域名不要带协议如（http://或https://）</span><br><span class="line">- GITLAB_HOST=git.neox-inc.com</span><br><span class="line">- GITLAB_PORT=443</span><br><span class="line">- GITLAB_SSH_PORT=22</span><br></pre></td></tr></table></figure><p>这里我对外暴露的是<code>9180</code>和<code>9122</code>端口，然后在负载均衡器中配置<code>SSL</code>证书，完成对<code>https</code>的访问，如需<code>ssh</code>方式访问，负载均衡器中还需配置<code>22=&gt;9122</code>的转发，负载均衡器配置图见下图。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gitlab:</span><br><span class="line">   restart: always</span><br><span class="line">   image: sameersbn/gitlab:12.5.5</span><br><span class="line">   depends_on:</span><br><span class="line">   - redis</span><br><span class="line">   - postgresql</span><br><span class="line">   ports:</span><br><span class="line">   - &quot;9180:80&quot;</span><br><span class="line">   - &quot;9122:22&quot;</span><br><span class="line">   - &quot;443:443&quot;</span><br><span class="line">   volumes:</span><br><span class="line">   - ./gitlab-data:/home/git/data:Z</span><br></pre></td></tr></table></figure><p>为更日后更方便迁移gitlab服务，<code>redis-data</code>、<code>postgresql-data</code>、<code>gitlab-data</code>volumes，这里我分别配置成相对’./‘目录</p><ol start="3"><li><p>安装 docker-compose</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install docker-compose</span><br></pre></td></tr></table></figure></li><li><p>启动 gitlab 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></li><li><p>访问 gitlab 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip:9180</span><br></pre></td></tr></table></figure></li></ol><p>如果你是域名直接解析到本地，那么可以通过域名访问。</p><h2 id="特殊场景"><a href="#特殊场景" class="headerlink" title="特殊场景"></a>特殊场景</h2><p>我司<code>ssl</code>证书统一管理在阿里云负载均衡器上，为了日后方便统一更换过期证书，<code>gitlab</code>服务也使用负载均衡器。通过研究阿里云负载均衡器发现,不支持前端协议<code>http</code>转后端协议<code>tcp</code>。</p><p>那么问题来了，<code>docker-compose</code>启的服务全部都是<code>tcp</code>协议，那么如何完成<code>ssl</code>即<code>http</code>前端协议转后端某个端口的<code>http</code>协议呢？</p><p>经过思考，只得借用<code>nginx</code>转发实现，配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">upstream git.neox-inc.com &#123;</span><br><span class="line">        server ip:9180;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">        server_name git.neox-inc.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://git.neox-inc.com;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>均衡器中监听配置图</p><img src="/2020/01/15/Docker-搭建-Gitlab-服务/gitlab.png" class="[class names]" title="[width] [height] [阿里云负载均衡器截图 [均衡器配置]]"><h2 id="批量导入用户"><a href="#批量导入用户" class="headerlink" title="批量导入用户"></a>批量导入用户</h2><p>参考地址：<a href="https://www.jianshu.com/p/83b06525c946" target="_blank" rel="noopener">https://www.jianshu.com/p/83b06525c946</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;p&gt;公司使用的&lt;code&gt;bitbucket&lt;/code&gt;提供的&lt;code&gt;git&lt;/code&gt;远程仓库，为什么选择他历史原因喽，回想第一天克隆
      
    
    </summary>
    
    
      <category term="持续交付" scheme="https://dbing.github.io/tags/%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>ZSH快捷键</title>
    <link href="https://dbing.github.io/2020/01/14/ZSH%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://dbing.github.io/2020/01/14/ZSH快捷键/</id>
    <published>2020-01-14T06:00:57.000Z</published>
    <updated>2020-01-14T06:07:43.330Z</updated>
    
    <content type="html"><![CDATA[<p>⌃ + u：清空当前行<br>⌃ + a：移动到行首<br>⌃ + e：移动到行尾<br>⌃ + f：向前移动<br>⌃ + b：向后移动<br>⌃ + p：上一条命令<br>⌃ + n：下一条命令<br>⌃ + r：搜索历史命令<br>⌃ + y：召回最近用命令删除的文字<br>⌃ + h：删除光标之前的字符<br>⌃ + d：删除光标所指的字符<br>⌃ + w：删除光标之前的单词<br>⌃ + k：删除从光标到行尾的内容<br>⌃ + t：交换光标和之前的字符</p><p>⌘ + Click：可以打开文件，文件夹和链接<br>⌘ + n：新建窗口<br>⌘ + t：新建标签页<br>⌘ + w：关闭当前页<br>⌘ + 数字 &amp; ⌘ + 方向键：切换标签页<br>⌥⌘ + 数字：切换窗口<br>⌘ + enter：切换全屏<br>⌘ + d：左右分屏<br>⇧⌘ + d：上下分屏<br>⌘ + ;：自动补全历史记录<br>⇧⌘ + h：自动补全剪贴板历史<br>⌥⌘ + e：查找所有来定位某个标签页<br>⌘ + r &amp; ⌃ + l：清屏<br>⌘ + /：显示光标位置<br>⌥⌘ + b：历史回放<br>⌘ + f：查找，然后用 tab 和 ⇧ + tab 可以向右和向左补全，补全之后的内容会被自动复制， 还可以用 ⌥ + enter 将查找结果输入终端<br>选中即复制，鼠标中键粘贴</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;⌃ + u：清空当前行&lt;br&gt;⌃ + a：移动到行首&lt;br&gt;⌃ + e：移动到行尾&lt;br&gt;⌃ + f：向前移动&lt;br&gt;⌃ + b：向后移动&lt;br&gt;⌃ + p：上一条命令&lt;br&gt;⌃ + n：下一条命令&lt;br&gt;⌃ + r：搜索历史命令&lt;br&gt;⌃ + y：召回最近用命令删除的文字
      
    
    </summary>
    
    
      <category term="zsh" scheme="https://dbing.github.io/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>使用 supervisor 监控Laravel queue 消费队列</title>
    <link href="https://dbing.github.io/2020/01/10/%E4%BD%BF%E7%94%A8-supervisor-%E7%9B%91%E6%8E%A7Laravel-queue-%E6%B6%88%E8%B4%B9%E9%98%9F%E5%88%97/"/>
    <id>https://dbing.github.io/2020/01/10/使用-supervisor-监控Laravel-queue-消费队列/</id>
    <published>2020-01-10T08:05:43.000Z</published>
    <updated>2020-01-10T08:42:08.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><ul><li>Ubuntu 5.4.0-6ubuntu1~16.04.9</li></ul><h2 id="安装-Supervisor"><a href="#安装-Supervisor" class="headerlink" title="安装 Supervisor"></a>安装 Supervisor</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install supervisor</span><br></pre></td></tr></table></figure><p>安装后可以查看到 supervisor 已经启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ps aux|grep supervisor</span><br><span class="line">root     14314  0.9  0.2  58936 18572 ?        Ss   16:13   0:00 /usr/bin/python /usr/bin/supervisord -n -c /etc/supervisor/supervisord.conf</span><br><span class="line">root     14358  0.0  0.0  14228   908 pts/2    S+   16:13   0:00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn supervisor</span><br></pre></td></tr></table></figure></p><h2 id="配置-Supervisor"><a href="#配置-Supervisor" class="headerlink" title="配置 Supervisor"></a>配置 Supervisor</h2><p>这里我以为<code>mooncake-queue-worker.conf</code>为例，命令：<code>vim /etc/supervisor/conf.d/mooncake-queue-worker.conf</code></p><p>配置清单如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[program:mooncake-worker]</span><br><span class="line">process_name=%(program_name)s_%(process_num)02d</span><br><span class="line">command=php /project/artisan queue:work redis --queue=access</span><br><span class="line">autostart=true                                                                                                                                                       </span><br><span class="line">autorestart=true</span><br><span class="line">user=www-data</span><br><span class="line">numprocs=4</span><br><span class="line">redirect_stderr=true</span><br><span class="line">stdout_logfile=/run/log/moonkcake-queue-worker.log</span><br></pre></td></tr></table></figure></p><p>注意：</p><ol><li><code>project</code> 换成自己的项目路径</li><li><code>user=www-data</code> 配置成自己的<code>php</code>进程用户</li><li><code>numprocs</code> 是启动进程数</li></ol><h2 id="启动-Supervisor"><a href="#启动-Supervisor" class="headerlink" title="启动 Supervisor"></a>启动 Supervisor</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo supervisorctl reread</span><br><span class="line">mooncake-worker: available</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo supervisorctl update</span><br><span class="line">mooncake-worker: added process group</span><br></pre></td></tr></table></figure><p>此时再查看一下<code>php</code>进程，可以成功看到4个Queue启动了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ps aux|grep php          </span><br><span class="line">www-data  9933  0.0  0.8 466168 68760 ?        S    11:55   0:03 php-fpm: pool www</span><br><span class="line">www-data 14383  0.3  0.8 558056 71696 ?        S    16:15   0:01 php-fpm: pool www</span><br><span class="line">www-data 14508  1.2  0.6 335088 49780 ?        S    16:24   0:00 php /usr/share/nginx/neox-mooncake-sjms/artisan queue:work redis --queue=access</span><br><span class="line">www-data 14509  1.3  0.6 335088 49648 ?        S    16:24   0:00 php /usr/share/nginx/neox-mooncake-sjms/artisan queue:work redis --queue=access</span><br><span class="line">www-data 14510  1.5  0.6 337136 52176 ?        S    16:24   0:00 php /usr/share/nginx/neox-mooncake-sjms/artisan queue:work redis --queue=access</span><br><span class="line">www-data 14511  1.7  0.6 337136 52228 ?        S    16:24   0:00 php /usr/share/nginx/neox-mooncake-sjms/artisan queue:work redis --queue=access</span><br></pre></td></tr></table></figure></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 停止某个进程</span><br><span class="line">supervisorctl stop program_name</span><br><span class="line"></span><br><span class="line"># 启动某个进程</span><br><span class="line">supervisorctl start program_name</span><br><span class="line"></span><br><span class="line"># 重启某个进程</span><br><span class="line">supervisorctl restart program_name</span><br><span class="line"></span><br><span class="line"># 停止全部进程</span><br><span class="line">supervisorctl stop all</span><br><span class="line"></span><br><span class="line"># 载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程</span><br><span class="line">supervisorctl reload</span><br><span class="line"></span><br><span class="line"># 根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启</span><br><span class="line">supervisorctl update</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>Q1. Invalid user name<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo supervisorctl reread                            </span><br><span class="line">ERROR: CANT_REREAD: Invalid user name www <span class="keyword">in</span> section <span class="string">'program:mooncake-worker'</span> (file: <span class="string">'/etc/supervisor/conf.d/mooncake-queue-worker.conf'</span>)</span><br></pre></td></tr></table></figure></p><p>A1:查看当前<code>PHP</code>进程用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  nginx ps aux|grep php  </span><br><span class="line">www-data  1736  0.0  0.9 540960 79144 ?        S    Jan09   0:30 php-fpm: pool www</span><br><span class="line">www-data  2114  0.0  0.8 537876 73172 ?        S    Jan09   0:30 php-fpm: pool www</span><br></pre></td></tr></table></figure><p>修改<code>mooncake-queue-worker.conf</code>中<code>user</code>项为<code>user=www-data</code>。</p><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><ul><li><a href="http://www.supervisord.org/running.html" target="_blank" rel="noopener">supervisord 官网</a></li><li><a href="https://laravel.com/docs/5.7/queues#supervisor-configuration" target="_blank" rel="noopener">Laravel 官方地址</a></li><li><a href="https://ryanmckern.com/2013/01/daemon-ize-your-processes-on-the-cheap-part-two-supervisor/" target="_blank" rel="noopener">ryanmckern.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境介绍&quot;&gt;&lt;a href=&quot;#环境介绍&quot; class=&quot;headerlink&quot; title=&quot;环境介绍&quot;&gt;&lt;/a&gt;环境介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Ubuntu 5.4.0-6ubuntu1~16.04.9&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装-Supe
      
    
    </summary>
    
    
      <category term="supervisor" scheme="https://dbing.github.io/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>使用阿里云 Redis 服务内存用完导致的网站停摆</title>
    <link href="https://dbing.github.io/2020/01/08/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91-Redis-%E6%9C%8D%E5%8A%A1%E5%86%85%E5%AD%98%E7%94%A8%E5%AE%8C%E5%AF%BC%E8%87%B4%E7%9A%84%E7%BD%91%E7%AB%99%E5%81%9C%E6%91%86/"/>
    <id>https://dbing.github.io/2020/01/08/使用阿里云-Redis-服务内存用完导致的网站停摆/</id>
    <published>2020-01-08T12:56:10.000Z</published>
    <updated>2020-01-10T09:18:06.407Z</updated>
    
    <content type="html"><![CDATA[<p>虽然事件过去一周多了，但是记忆还尚尤新，理论上我们都晓得 Redis 是基于内存存储的，一般也是用于存储一些有价值的热数据，而我死中就有傻孩纸把图片这种二进制文件<code>bese64_encode</code>后使用<code>chunk_split</code>函数分成小块，给存进了 <code>redis</code>。以下是情景重放。</p><h2 id="情景描述"><a href="#情景描述" class="headerlink" title="情景描述"></a>情景描述</h2><img src="/2020/01/08/使用阿里云-Redis-服务内存用完导致的网站停摆/redis.png" class="[class names]" title="[width] [height] [title text [alt text]]"><p>再发现使用率是<code>108%</code>时，此时服务是正常的，达到<code>110%</code>时，云Redis服务就拒绝连接了，此时<code>sentry</code>里收到大量错误，收到打开网站500错误页，服务瘫痪。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li><p>云 redis 存储空间</p></li><li><p>释放现有 redis 空间</p></li></ol><p>操作面板无法得知，方案1中耗时问题，果断选择了方案2，一行命令删除指定前缀key，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli -h 主机地址 -p 端口 keys &quot;course-*&quot; |xargs ./redis-cli -h 主机地址 -p 端口 del</span><br><span class="line"></span><br><span class="line"># 具体执行命令</span><br><span class="line">redis-cli -h 主机 -n 2 keys &apos;wechat*&apos; | xargs redis-cli -h 主机 -n 2 del</span><br></pre></td></tr></table></figure><h2 id="问题代码"><a href="#问题代码" class="headerlink" title="问题代码"></a>问题代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取该页面对应的二维码</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> string $scene</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> string WXACodeBase64</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getWXACode</span><span class="params">($scene)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    $sceneMd5 = md5($scene);</span><br><span class="line">    $getWXACodeImgBase64 = Redis::get(<span class="string">'wechat:js:api:WXACodeImg:'</span> . $sceneMd5);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($getWXACodeImgBase64)) &#123;</span><br><span class="line">        $result = [</span><br><span class="line">            <span class="string">'code'</span> =&gt; <span class="number">200</span>,</span><br><span class="line">            <span class="string">'msg'</span> =&gt; <span class="string">'success'</span>,</span><br><span class="line">            <span class="string">'data'</span> =&gt; $getWXACodeImgBase64</span><br><span class="line">        ];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $accessToken = <span class="keyword">$this</span>-&gt;getAccessToken(<span class="keyword">self</span>::GET_WXACODE);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($accessToken)) &#123;</span><br><span class="line">            $param = [</span><br><span class="line">                <span class="string">'scene'</span> =&gt; $scene</span><br><span class="line">            ];</span><br><span class="line">            $apiResult = HttpToolLib::curl(<span class="keyword">self</span>::WXACODE_API_URL . $accessToken, json_encode($param), <span class="keyword">true</span>);</span><br><span class="line">            $resJson = json_decode($apiResult, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>($resJson) &amp;&amp; array_key_exists(<span class="string">'errcode'</span>, $resJson)) &#123;</span><br><span class="line">                $result = [</span><br><span class="line">                    <span class="string">'code'</span> =&gt; $resJson[<span class="string">'errcode'</span>],</span><br><span class="line">                    <span class="string">'msg'</span> =&gt; $resJson[<span class="string">'errmsg'</span>],</span><br><span class="line">                    <span class="string">'data'</span> =&gt; <span class="keyword">null</span></span><br><span class="line">                ];</span><br><span class="line">                \Log::error(<span class="string">'getWXACodeError[code:'</span> . $resJson[<span class="string">'errcode'</span>] . <span class="string">';msg:'</span> . $resJson[<span class="string">'errmsg'</span>] . <span class="string">'.]'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $getWXACodeImgBase64 = chunk_split(base64_encode($apiResult));</span><br><span class="line">                Redis::setnx(<span class="string">'wechat:js:api:WXACodeImg:'</span> . $sceneMd5, $getWXACodeImgBase64);</span><br><span class="line">                $result = [</span><br><span class="line">                    <span class="string">'code'</span> =&gt; <span class="number">200</span>,</span><br><span class="line">                    <span class="string">'msg'</span> =&gt; <span class="string">'success'</span>,</span><br><span class="line">                    <span class="string">'data'</span> =&gt; $getWXACodeImgBase64</span><br><span class="line">                ];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虽然事件过去一周多了，但是记忆还尚尤新，理论上我们都晓得 Redis 是基于内存存储的，一般也是用于存储一些有价值的热数据，而我死中就有傻孩纸把图片这种二进制文件&lt;code&gt;bese64_encode&lt;/code&gt;后使用&lt;code&gt;chunk_split&lt;/code&gt;函数分
      
    
    </summary>
    
    
      <category term="redis" scheme="https://dbing.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 采坑记录</title>
    <link href="https://dbing.github.io/2019/11/27/Laravel-%E9%87%87%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://dbing.github.io/2019/11/27/Laravel-采坑记录/</id>
    <published>2019-11-27T08:05:05.000Z</published>
    <updated>2020-01-10T09:18:57.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Laravel-Middleware-里-Cookie-设置不成功问题"><a href="#Laravel-Middleware-里-Cookie-设置不成功问题" class="headerlink" title="Laravel Middleware 里 Cookie 设置不成功问题"></a>Laravel Middleware 里 Cookie 设置不成功问题</h2><p>我在laravel中间件里写了下面一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$response = $next($request)-&gt;cookie($clientKey, $client-&gt;id, 100 * 60 * 24 * 365);</span><br><span class="line"></span><br><span class="line">#或者</span><br><span class="line">\Cookie::queue($clientKey, $client-&gt;id, $ttl);</span><br><span class="line"></span><br><span class="line">dump($client-&gt;id);</span><br></pre></td></tr></table></figure></p><p>然后再中间件里，dump 一个变量，导致<code>cookie</code>不能设置上去，事后发现中间件里不能有任何输出，比如：<code>echo</code>,<code>dump</code>,<code>var_dump</code>,<code>print_r</code> 否则都会导致不成功</p><h2 id="Laravel-Jobs-不消费和消费失败问题-DB-是-mongodb"><a href="#Laravel-Jobs-不消费和消费失败问题-DB-是-mongodb" class="headerlink" title="Laravel Jobs 不消费和消费失败问题(DB 是 mongodb)"></a>Laravel Jobs 不消费和消费失败问题(DB 是 mongodb)</h2><p>创建了一个<code>AccessLogJob</code>死活不会执行，终端也不抛异常，经过排查最终发现是，在<code>DB</code>为<code>mongodb</code>库的情况下 <code>SerializesModels</code> 压根不会触发，也就是会导致<code>model</code>实例不会被序列化，临时解决方案注入时手动序列化<code>serialize</code>，使用时反序列化<code>unserialize</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccessLogJob</span> <span class="keyword">implements</span> <span class="title">ShouldQueue</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">InteractsWithQueue</span>, <span class="title">Queueable</span>, <span class="title">SerializesModels</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> AccessLog</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $accessLog;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new job instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(AccessLog $log)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;accessLog = serialize($log);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute the job.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (unserialize(<span class="keyword">$this</span>-&gt;accessLog))-&gt;save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Laravel-Middleware-里-Cookie-设置不成功问题&quot;&gt;&lt;a href=&quot;#Laravel-Middleware-里-Cookie-设置不成功问题&quot; class=&quot;headerlink&quot; title=&quot;Laravel Middleware 里 C
      
    
    </summary>
    
    
      <category term="Laravel" scheme="https://dbing.github.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>边锋的一次面试经历</title>
    <link href="https://dbing.github.io/2019/07/31/%E8%BE%B9%E9%94%8B%E7%9A%84%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/"/>
    <id>https://dbing.github.io/2019/07/31/边锋的一次面试经历/</id>
    <published>2019-07-31T11:28:39.000Z</published>
    <updated>2019-07-31T16:39:28.108Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前几天，去边锋网络上海分公司去面试，去了以后，说 PHP 负责人请假了，一个 Golang 后端面的，聊了2个非语言层面的问题，这里梳理总一下。</p></blockquote><h2 id="Q1：编写-API-接口，如果保证幂等性？"><a href="#Q1：编写-API-接口，如果保证幂等性？" class="headerlink" title="Q1：编写 API 接口，如果保证幂等性？"></a>Q1：编写 API 接口，如果保证幂等性？</h2><p>所谓幂等性设计，就是说，一次和多次请求某一个资源应该具有同样的副作用。用数学的语言来 表达就是:f(x) = f(f(x))。</p><p>举几个例子:</p><ul><li>订单创建接口，第一次调用超时了，然后调用方重试了一次。是否会多创建一笔订单?</li></ul><p>因为系统超时，而调用户方重试一下，会给我们的系统带来不一致的副作用。</p><p>为什么会产生这样的问题，就是在我们把系统解耦隔离后，服务间的调用可能会有三个状态，一个是成功(Success)，一个是失败(Failed)，还有一个是超时(Timeout)。前两者都是明确的状态，而超时则是完全不知道是什么状态。</p><p>这种情况下，一般有两种处理方式：</p><ul><li>一种是下游服务提供查询接口，上游再请求超时后查询一下，如果查询到则表示成功，如果查询不到则表示失败。</li><li>另一种是做接口幂等设计，也就是将查询动作放在下游服务，上游只管做重试，请求一次和请求多次结果是一样的。</li></ul><p>对于第一种方式，需要对方提供一个查询接口来做配合。而第二种方式则需要下游的系统提供支持幂等性的交易接口。</p><a id="more"></a><p>要做到幂等性的交易接口，需要有一个唯一的标识，来标志交易是同一笔交易。而这个交易 ID 由谁来分配是一件比较头疼的事。因为这个标识要能做到全局唯一。</p><h3 id="全局-ID"><a href="#全局-ID" class="headerlink" title="全局 ID"></a>全局 ID</h3><p>在全局唯一 ID 的算法中，这里介绍一个 Twitter 的开源项目 Snowflake。它是一个分布式 ID 的生成算法。其核心思想是，产生一个 long 型的 ID，其中:</p><ul><li>41bits 作为毫秒数。大概可以用 69.7 年。</li><li>10bits 作为机器编号(5bits 是数据中心，5bits 的机器 ID)，支持 1024 个实例。</li><li>12bits 作为毫秒内的序列号。一毫秒可以生成 4096 个序号。</li></ul><p>其他的像 Redis 或 MongoDB 的全局 ID 生成都和这个算法大同小异。我在这里就不多说了，提供一个<a href="https://juejin.im/post/5b3a23746fb9a024e15cad79" target="_blank" rel="noopener">掘金链接</a>。 你可以根据实际情况加上业务的编号。</p><h3 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h3><p>对于幂等性的处理流程来说，说白了就是要过滤一下已经收到的交易。要做到这个事，我们需要一个存储来记录收到的交易。</p><p>于是，当收到交易请求的时候，我们就会到这个存储中去查询。如果查找到了，那么就不再做查询了，并把上次做的结果返回。如果没有查到，那么我们就记录下来。</p><img src="/2019/07/31/边锋的一次面试经历/uid@1x.png"><p>但是，上面这个流程是有一个可优化的细节，对于绝大请求应该都不会是重新发过来的，所以让所有请求都去查询一下这个不太合理。</p><p>所以，这里我们收到交易请求后，直接去存储记录这个 ID(相对于数据的 Insert 操作)，如果出现 ID 冲突了的异常，那么我们就知道这个之前已经有人发过来了，所以就不用再做了。</p><h3 id="HTTP-的幂等性"><a href="#HTTP-的幂等性" class="headerlink" title="HTTP 的幂等性"></a>HTTP 的幂等性</h3><ol><li><p>HTTP GET 方法用于获取资源，不应有副作用，所以是幂等的。比如:GET <a href="http://www.bank.com/account/123456，不会改变资源的状态，不论调用一次还是" target="_blank" rel="noopener">http://www.bank.com/account/123456，不会改变资源的状态，不论调用一次还是</a> N 次 都没有副作用。</p></li><li><p>HTTP HEAD 和 GET 本质是一样的，区别在于 HEAD 不含有呈现数据，而仅仅是 HTTP 头信 息，不应用有副作用，也是幂等的。</p></li><li><p>HTTP OPTIONS 主要用于获取当前 URL 所支持的方法，所以也是幂等的。若请求成功，则它 会在 HTTP 头中包含一个名为“Allow”的头，值是所支持的方法，如“GET, POST”。</p></li><li><p>HTTP DELETE 方法用于删除资源，有副作用，但它应该满足幂等性。比如:DELETE <a href="http://www.forum.com/article/4231，调用一次和" target="_blank" rel="noopener">http://www.forum.com/article/4231，调用一次和</a> N 次对系统产生的副作用是相同 的，即删掉 ID 为 4231 的帖子。因此，调用者可以多次调用或刷新页面而不必担心引起错误。</p></li><li><p>HTTP POST 方法用于创建资源，所对应的 URI 并非创建的资源本身，而是去执行创建动作的操 作者，有副作用，不满足幂等性。比如:POST <a href="http://www.forum.com/articles的语义" target="_blank" rel="noopener">http://www.forum.com/articles的语义</a> 是在<a href="http://www.forum.com/articles下创建一篇帖子，HTTP" target="_blank" rel="noopener">http://www.forum.com/articles下创建一篇帖子，HTTP</a> 响应中应包含帖子的创建状态以及帖子的 URI。两次相同的 POST 请求会在服务器端创建两份资源，它们具有不同的 URI;所以，POST 方法不具备幂等性。</p></li><li><p>HTTP PUT 方法用于创建或更新操作，所对应的 URI 是要创建或更新的资源本身，有副作用， 它应该满足幂等性。比如:PUT <a href="http://www.forum/articles/4231的语义是创建或更新" target="_blank" rel="noopener">http://www.forum/articles/4231的语义是创建或更新</a> ID 为 4231 的帖子。对同一 URI 进行多次 PUT 的副作用和一次 PUT 是相同的;因此，PUT 方 法具有幂等性。</p></li></ol><p>所以，对于 POST 的方式，很可能会出现多次提交的问题，对此的一般的幂等性的设计如下：</p><ul><li><p>其一，在表单中需要隐藏一个 token，这个 token 是后端生成的一个唯一的 ID。用于防止用户多次点击了表单提交按钮，而导致后端收到了多次请求，接到请求后首先效验表单 token 是否有效（是否存在服务端），否则判定为非法提交，在后端 PHP 众多框架中，这个步骤一般都是自动完成，比如 Yii、Laravel。</p></li><li><p>还有一种稳妥的做法是，后端成功后向前端返回 302 跳转，把用户的前端页跳转到 GET 请求，把刚刚 POST 的数据给展示出来。如果是 Web 上的最好还把之前的表单设置成过期，这样用户不能通过浏览器后退按钮来重新提交。这个模式又叫做 PRG 模式 (Post/Redirect/Get)。</p></li></ul><p>以上内容参考自，陈皓：《左耳听风》</p><h2 id="Q2：如果保证-DB-与-Cache-数据一致？"><a href="#Q2：如果保证-DB-与-Cache-数据一致？" class="headerlink" title="Q2：如果保证 DB 与 Cache 数据一致？"></a>Q2：如果保证 DB 与 Cache 数据一致？</h2><p>场景：当用户更新自己的信息时，你的程序代码如何写：</p><ol><li>先更新 DB 再更新 Cache，</li><li>先更新 DB 再删除 Cache</li><li>先更新 Cache 再更新 DB</li><li>先删除 Cache 再更新 DB</li></ol><p>这里就此问题，上述 3 个步骤，再我去面试前完全没有细细思考过，事后仔细反思下，大有文章，于是小描一下。</p><p>参考大厂「Facebook」套路：缓存旁路模式（Cache Aside Pattern），大白话就是：先更新数据库，再删缓存。</p><p>对于为什么是缓存删除而不是采用缓存更新，对于实际业务中我们缓存的信息往往不单单是纯粹的表中的一行数据，有可能涉及到计算属性或者关联属性，相比删除缓存，让请求后自建缓存更容易。</p><img src="/2019/07/31/边锋的一次面试经历/Cache-Aside-Design.png"><img src="/2019/07/31/边锋的一次面试经历/Updating-Data-using-the-Cache.png"><p>此方案有两个潜在问题：</p><ol><li>如果发生更新数据库成功，删除缓存失败呢？</li><li>在高并发的场景下，会不会出现数据库与缓存数据不一致的概率呢？</li></ol><p>对于第一种方法问题的解决方案：</p><img src="/2019/07/31/边锋的一次面试经历/retry-cache-db.png"><p>处理流程步骤：</p><ol><li>更新数据库数据</li><li>缓存因为种种问题删除失败</li><li>将需要删除的key发送至消息队列</li><li>消费队列消息，获得需要删除的 key 继续重试删除操作，直到成功</li></ol><p>参考地址：</p><ol><li><a href="https://coolshell.cn/articles/17416.html/comment-page-2#comments" target="_blank" rel="noopener">酷壳</a></li><li><a href="http://ddrv.cn/a/127228" target="_blank" rel="noopener">算法网</a></li><li><a href="https://www.xttblog.com/?p=3598" target="_blank" rel="noopener">业余草</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前几天，去边锋网络上海分公司去面试，去了以后，说 PHP 负责人请假了，一个 Golang 后端面的，聊了2个非语言层面的问题，这里梳理总一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Q1：编写-API-接口，如果保证幂等性？&quot;&gt;&lt;a href=&quot;#Q1：编写-API-接口，如果保证幂等性？&quot; class=&quot;headerlink&quot; title=&quot;Q1：编写 API 接口，如果保证幂等性？&quot;&gt;&lt;/a&gt;Q1：编写 API 接口，如果保证幂等性？&lt;/h2&gt;&lt;p&gt;所谓幂等性设计，就是说，一次和多次请求某一个资源应该具有同样的副作用。用数学的语言来 表达就是:f(x) = f(f(x))。&lt;/p&gt;
&lt;p&gt;举几个例子:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;订单创建接口，第一次调用超时了，然后调用方重试了一次。是否会多创建一笔订单?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为系统超时，而调用户方重试一下，会给我们的系统带来不一致的副作用。&lt;/p&gt;
&lt;p&gt;为什么会产生这样的问题，就是在我们把系统解耦隔离后，服务间的调用可能会有三个状态，一个是成功(Success)，一个是失败(Failed)，还有一个是超时(Timeout)。前两者都是明确的状态，而超时则是完全不知道是什么状态。&lt;/p&gt;
&lt;p&gt;这种情况下，一般有两种处理方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一种是下游服务提供查询接口，上游再请求超时后查询一下，如果查询到则表示成功，如果查询不到则表示失败。&lt;/li&gt;
&lt;li&gt;另一种是做接口幂等设计，也就是将查询动作放在下游服务，上游只管做重试，请求一次和请求多次结果是一样的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于第一种方式，需要对方提供一个查询接口来做配合。而第二种方式则需要下游的系统提供支持幂等性的交易接口。&lt;/p&gt;
    
    </summary>
    
      <category term="面试" scheme="https://dbing.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="边锋网络" scheme="https://dbing.github.io/tags/%E8%BE%B9%E9%94%8B%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Laravel JWT 多用户端验证</title>
    <link href="https://dbing.github.io/2019/06/10/Laravel-JWT-%E5%A4%9A%E7%94%A8%E6%88%B7%E7%AB%AF%E9%AA%8C%E8%AF%81/"/>
    <id>https://dbing.github.io/2019/06/10/Laravel-JWT-多用户端验证/</id>
    <published>2019-06-10T03:29:14.000Z</published>
    <updated>2019-06-19T02:52:54.417Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://learnku.com/articles/28881" target="_blank" rel="noopener">https://learnku.com/articles/28881</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文链接：&lt;a href=&quot;https://learnku.com/articles/28881&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://learnku.com/articles/28881&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="Laravel" scheme="https://dbing.github.io/categories/Laravel/"/>
    
    
      <category term="JWT" scheme="https://dbing.github.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 中的事务</title>
    <link href="https://dbing.github.io/2019/06/05/MySQL-%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/"/>
    <id>https://dbing.github.io/2019/06/05/MySQL-中的事务/</id>
    <published>2019-06-05T10:31:43.000Z</published>
    <updated>2019-06-19T02:52:54.418Z</updated>
    
    <content type="html"><![CDATA[<p>编码中事务的使用，不能跨库，不能夸会话</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编码中事务的使用，不能跨库，不能夸会话&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>初识 Go 语言</title>
    <link href="https://dbing.github.io/2019/06/03/%E5%88%9D%E8%AF%86-Go-%E8%AF%AD%E8%A8%80/"/>
    <id>https://dbing.github.io/2019/06/03/初识-Go-语言/</id>
    <published>2019-06-03T08:57:55.000Z</published>
    <updated>2019-06-19T02:52:54.418Z</updated>
    
    <content type="html"><![CDATA[<p>Go 语言主要特性</p><ul><li>自动垃圾回收 </li><li>更丰富的内置类型 </li><li>函数多返回值 </li><li>错误处理 </li><li>匿名函数和闭包 </li><li>类型和接口 </li><li>并发编程 </li><li>反射 </li><li>语言交互性 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Go 语言主要特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动垃圾回收 &lt;/li&gt;
&lt;li&gt;更丰富的内置类型 &lt;/li&gt;
&lt;li&gt;函数多返回值 &lt;/li&gt;
&lt;li&gt;错误处理 &lt;/li&gt;
&lt;li&gt;匿名函数和闭包 &lt;/li&gt;
&lt;li&gt;类型和接口 &lt;/li&gt;
&lt;li&gt;并发编程 &lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="Go" scheme="https://dbing.github.io/categories/Go/"/>
    
    
      <category term="Go" scheme="https://dbing.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Composer 中国镜像</title>
    <link href="https://dbing.github.io/2019/05/22/Composer-%E4%B8%AD%E5%9B%BD%E9%95%9C%E5%83%8F/"/>
    <id>https://dbing.github.io/2019/05/22/Composer-中国镜像/</id>
    <published>2019-05-22T07:51:57.000Z</published>
    <updated>2019-11-25T14:05:43.754Z</updated>
    
    <content type="html"><![CDATA[<p>Composer 中国镜像-阿里云镜像</p><p>原文地址：<a href="https://developer.aliyun.com/composer" target="_blank" rel="noopener">https://developer.aliyun.com/composer</a></p><p>选项一、全局配置（推荐）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure><p>取消镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g --unset repos.packagist</span><br></pre></td></tr></table></figure></p><p>选项二、项目配置</p><p>仅修改当前工程配置，仅当前工程可使用该镜像地址：：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure></p><p>取消镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config --unset repos.packagist</span><br></pre></td></tr></table></figure></p><p>调试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer -vvv install</span><br></pre></td></tr></table></figure></p><h2 id="Composer-manager"><a href="#Composer-manager" class="headerlink" title="Composer manager"></a>Composer manager</h2><p>鲜有日子，阿里云镜像也会抽风，那么这是镜像管理工具推荐给你，很方便切换到你想要使用的源</p><p>原文地址：<a href="https://github.com/slince/composer-registry-manager" target="_blank" rel="noopener">https://github.com/slince/composer-registry-manager</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Composer 中国镜像-阿里云镜像&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://developer.aliyun.com/composer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.aliyun.c
      
    
    </summary>
    
    
      <category term="Composer" scheme="https://dbing.github.io/tags/Composer/"/>
    
  </entry>
  
  <entry>
    <title>Linxu 压缩与解压常用命令</title>
    <link href="https://dbing.github.io/2019/05/22/Linxu-%E5%8E%8B%E7%BC%A9%E4%B8%8E%E8%A7%A3%E5%8E%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://dbing.github.io/2019/05/22/Linxu-压缩与解压常用命令/</id>
    <published>2019-05-22T05:55:14.000Z</published>
    <updated>2019-06-19T02:52:54.417Z</updated>
    
    <content type="html"><![CDATA[<p>以下均已<code>demo.tar.xz</code>文件为例演示</p><h2 id="tar"><a href="#tar" class="headerlink" title="*.tar"></a>*.tar</h2><p>解压：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf demo.tar</span><br></pre></td></tr></table></figure></p><h2 id="gz"><a href="#gz" class="headerlink" title="*.gz"></a>*.gz</h2><p>解压：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gzip -d demo.gz</span><br><span class="line">gunzip demo.gz</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="tar-gz-amp-tgz"><a href="#tar-gz-amp-tgz" class="headerlink" title=".tar.gz &amp; .tgz"></a><em>.tar.gz &amp; </em>.tgz</h2><p>解压：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf demo.tar.gz</span><br><span class="line">tar -xzvf demo.tgz</span><br></pre></td></tr></table></figure></p><h2 id="tar-bz2"><a href="#tar-bz2" class="headerlink" title="*.tar.bz2"></a>*.tar.bz2</h2><p>解压：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xjvf demo.tar.bz2</span><br></pre></td></tr></table></figure></p><h2 id="tar-xz"><a href="#tar-xz" class="headerlink" title="*.tar.xz"></a>*.tar.xz</h2><p>解压方法一：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xz -d demo.tar.xz</span><br><span class="line">tar -xvf demo.tar</span><br></pre></td></tr></table></figure></p><p>解压方法二：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvJf demo.tar.xz</span><br></pre></td></tr></table></figure><h2 id="bz2"><a href="#bz2" class="headerlink" title="*.bz2"></a>*.bz2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bzip2 -d</span><br><span class="line">bunzip2</span><br></pre></td></tr></table></figure><h2 id="tar-Z"><a href="#tar-Z" class="headerlink" title="*.tar.Z"></a>*.tar.Z</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xZvf</span><br></pre></td></tr></table></figure><h2 id="rar"><a href="#rar" class="headerlink" title="*.rar"></a>*.rar</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unrar e demo.rar</span><br></pre></td></tr></table></figure><h2 id="zip"><a href="#zip" class="headerlink" title="*.zip"></a>*.zip</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip demo.zip</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar</span><br><span class="line">-c: 建立压缩档案</span><br><span class="line">-x：解压</span><br><span class="line">-t：查看内容</span><br><span class="line">-r：向压缩归档文件末尾追加文件</span><br><span class="line">-u：更新原压缩包中的文件</span><br></pre></td></tr></table></figure><p>独立参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-z：有gzip属性的</span><br><span class="line">-j：有bz2属性的</span><br><span class="line">-Z：有compress属性的</span><br><span class="line">-v：显示所有过程</span><br><span class="line">-O：将文件解开到标准输出</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下均已&lt;code&gt;demo.tar.xz&lt;/code&gt;文件为例演示&lt;/p&gt;
&lt;h2 id=&quot;tar&quot;&gt;&lt;a href=&quot;#tar&quot; class=&quot;headerlink&quot; title=&quot;*.tar&quot;&gt;&lt;/a&gt;*.tar&lt;/h2&gt;&lt;p&gt;解压：&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tar -xvf demo.tar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;gz&quot;&gt;&lt;a href=&quot;#gz&quot; class=&quot;headerlink&quot; title=&quot;*.gz&quot;&gt;&lt;/a&gt;*.gz&lt;/h2&gt;&lt;p&gt;解压：&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gzip -d demo.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gunzip demo.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://dbing.github.io/categories/Linux/"/>
    
    
      <category term="tar" scheme="https://dbing.github.io/tags/tar/"/>
    
  </entry>
  
  <entry>
    <title>Linux PATH 环境变量配置</title>
    <link href="https://dbing.github.io/2019/05/22/Linux-PATH-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/"/>
    <id>https://dbing.github.io/2019/05/22/Linux-PATH-环境变量配置/</id>
    <published>2019-05-22T04:11:25.000Z</published>
    <updated>2019-05-22T14:24:01.271Z</updated>
    
    <content type="html"><![CDATA[<p>以添加<code>go</code>为例，修改<code>PATH</code>的几种方法</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">pwd</span><br><span class="line">/home/bing</span><br><span class="line">wget https://dl.google.com/go/go1.12.5.linux-amd64.tar.gz</span><br><span class="line">tar -xzvf go1.12.5.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><h2 id="查看-PATH"><a href="#查看-PATH" class="headerlink" title="查看 PATH"></a>查看 PATH</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><p>以<code>:</code>符号分割，每一段都是一个环境变量</p><h2 id="修改-PATH"><a href="#修改-PATH" class="headerlink" title="修改 PATH"></a>修改 PATH</h2><a id="more"></a><h3 id="方法一-export"><a href="#方法一-export" class="headerlink" title="方法一 export"></a>方法一 export</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/home/bing/go/bin:$PATH</span><br></pre></td></tr></table></figure><p>测试：<code>go version</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出`go version go1.12.5 linux/amd64`</span><br></pre></td></tr></table></figure></p><table><thead><tr><th style="text-align:left">生效时间</th><th>有效期</th><th>局限</th></tr></thead><tbody><tr><td style="text-align:left">立即生效</td><td>临时有效，当前会话（当前终端）</td><td>当前用户</td></tr></tbody></table><h3 id="方法二-bashrc"><a href="#方法二-bashrc" class="headerlink" title="方法二 bashrc"></a>方法二 bashrc</h3><p>通过修改<code>.bashrc</code>文件<br><code>vim ~/.bashrc</code> 添加一行<code>export PATH=/home/bing/go/bin:$PATH</code></p><ol><li>新开一个终端窗口才能生效。</li><li>或者执行 <code>source ~/.bashrc</code> 立即生效</li></ol><table><thead><tr><th style="text-align:left">生效时间</th><th>有效期</th><th>局限</th></tr></thead><tbody><tr><td style="text-align:left">新开启终端有效或立即生效</td><td>永久有效</td><td>当前用户</td></tr></tbody></table><h3 id="方式三-profile"><a href="#方式三-profile" class="headerlink" title="方式三 profile"></a>方式三 profile</h3><p>通过修复<code>profile</code>文件<br><code>vim /etc/profile</code>找到<code>PATH</code>的行(有可能没有)，添加<code>export PATH=/home/bing/go/bin:$PATH</code></p><table><thead><tr><th style="text-align:left">生效时间</th><th>有效期</th><th>局限</th></tr></thead><tbody><tr><td style="text-align:left">系统重启</td><td>永久有效</td><td>所有用户</td></tr></tbody></table><h3 id="方法四-environment"><a href="#方法四-environment" class="headerlink" title="方法四 environment"></a>方法四 environment</h3><p>通过修改<code>environment</code>文件<br><code>vim environment</code>在<code>PATH=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games&quot;</code>中追加<code>:/home/bing/go/bin</code></p><table><thead><tr><th style="text-align:left">生效时间</th><th>有效期</th><th>局限</th></tr></thead><tbody><tr><td style="text-align:left">系统重启</td><td>永久有效</td><td>所有用户</td></tr></tbody></table><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>通过创建软连接的方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /home/bing/go/bin/go /usr/local/bin/go</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以添加&lt;code&gt;go&lt;/code&gt;为例，修改&lt;code&gt;PATH&lt;/code&gt;的几种方法&lt;/p&gt;
&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd ~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pwd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/home/bing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget https://dl.google.com/go/go1.12.5.linux-amd64.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -xzvf go1.12.5.linux-amd64.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;查看-PATH&quot;&gt;&lt;a href=&quot;#查看-PATH&quot; class=&quot;headerlink&quot; title=&quot;查看 PATH&quot;&gt;&lt;/a&gt;查看 PATH&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;echo $PATH&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以&lt;code&gt;:&lt;/code&gt;符号分割，每一段都是一个环境变量&lt;/p&gt;
&lt;h2 id=&quot;修改-PATH&quot;&gt;&lt;a href=&quot;#修改-PATH&quot; class=&quot;headerlink&quot; title=&quot;修改 PATH&quot;&gt;&lt;/a&gt;修改 PATH&lt;/h2&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://dbing.github.io/categories/Linux/"/>
    
    
      <category term="Linux PATH" scheme="https://dbing.github.io/tags/Linux-PATH/"/>
    
  </entry>
  
  <entry>
    <title>酷代码-第一篇</title>
    <link href="https://dbing.github.io/2019/05/21/%E9%85%B7%E4%BB%A3%E7%A0%81-%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <id>https://dbing.github.io/2019/05/21/酷代码-第一篇/</id>
    <published>2019-05-21T02:36:13.000Z</published>
    <updated>2020-02-10T15:08:02.278Z</updated>
    
    <content type="html"><![CDATA[<p>分享一下，工作中遇见值得分享的<code>Code</code>，这些代码往往比较有趣、有意义、或者少见（有意义），在此我统称为：酷代码。</p><h2 id="IP-白名单检测"><a href="#IP-白名单检测" class="headerlink" title="IP 白名单检测"></a>IP 白名单检测</h2><p>场景描述：我司的一个子项目，用来处理全部的支付业务，为了安全，所有的内部请求必须经过 IP 检测（这只是其中一环），分享一下基于我老大（涛哥）思想，利用位运算完成，<code>IP</code>白名单检测方法，以下是核心代码</p><p>定义检测函数<code>checkRemoteAddr()</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证 IP 白名单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $ip   string              待验证IP地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $AllowRemoteIps array     允许的IP白名单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkRemoteAddr</span><span class="params">($ip,$AllowRemoteIps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $ipNum = ip2long($ip);</span><br><span class="line">    <span class="keyword">foreach</span> ($AllowRemoteIps <span class="keyword">as</span> $mask)</span><br><span class="line">    &#123;</span><br><span class="line">        @<span class="keyword">list</span>($maskIp, $maskStep) = explode(<span class="string">"/"</span>, $mask);</span><br><span class="line">        $maskIpNum = ip2long($maskIp);</span><br><span class="line">        $maskStep = !<span class="keyword">isset</span>($maskStep) ? <span class="number">0</span> : <span class="number">32</span> - intval($maskStep);</span><br><span class="line">        <span class="keyword">if</span>( ($ipNum &gt;&gt; $maskStep) === ($maskIpNum &gt;&gt; $maskStep) )  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>调用</p><figure class="highlight php"><figcaption><span>config.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$allowRemoteIp = [</span><br><span class="line">    <span class="string">"58.246.60.40"</span>,         <span class="comment">// 开放指定 IP</span></span><br><span class="line">    <span class="string">"192.168.10.0/24"</span>,      <span class="comment">// 验证前3段</span></span><br><span class="line">    <span class="string">"10.0.1.0/24"</span>,          <span class="comment">// 验证前3段</span></span><br><span class="line">    <span class="string">'172.19.2.2/32'</span>,        <span class="comment">// 验证4段 写法等同于 172.19.2.2</span></span><br><span class="line"><span class="comment">//    '0.0.0.0/0',            // 允许所有 IP</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$r1 = checkRemoteAddr(<span class="string">'58.246.60.40'</span>,$allowRemoteIp);</span><br><span class="line">var_dump($r1);</span><br><span class="line">$r2 = checkRemoteAddr(<span class="string">'58.246.60.41'</span>,$allowRemoteIp);</span><br><span class="line">var_dump($r2);</span><br><span class="line">$r3 = checkRemoteAddr(<span class="string">'10.0.1.120'</span>,$allowRemoteIp);</span><br><span class="line">var_dump($r3);</span><br><span class="line">$r4 = checkRemoteAddr(<span class="string">'10.0.2.120'</span>,$allowRemoteIp);</span><br><span class="line">var_dump($r4);</span><br></pre></td></tr></table></figure><p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bool(true)</span><br><span class="line">bool(false)</span><br><span class="line">bool(true)</span><br><span class="line">bool(false)</span><br></pre></td></tr></table></figure></p><h2 id="一个闭包写法"><a href="#一个闭包写法" class="headerlink" title="一个闭包写法"></a>一个闭包写法</h2><p>定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">    public function test($num)&#123;</span><br><span class="line">        $this-&gt;run(function ($m) use ($num)&#123;</span><br><span class="line">            if ($num == $m) echo &apos;存在 Num &apos;. $num . PHP_EOL;</span><br><span class="line">        &#125;);</span><br><span class="line">        echo &apos;End &apos;. date(&apos;Y/m/d H:i:s&apos;) . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function run(callable $callback)&#123;</span><br><span class="line">        for ($i=0; $i&lt;=5; $i++)&#123;</span><br><span class="line">            // to-do</span><br><span class="line">            $callback($i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$a = new A;</span><br><span class="line">$a-&gt;test(5);</span><br></pre></td></tr></table></figure></p><p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">存在 Num 5</span><br><span class="line">End 2019/05/30 17:48:52</span><br></pre></td></tr></table></figure></p><h2 id="有趣的复数"><a href="#有趣的复数" class="headerlink" title="有趣的复数"></a>有趣的复数</h2><p>近日在<code>Yii2</code>框架中写<code>reset api</code>，发现资源类控制定义后的访问形式必须为复数，这个复数呢，不是简单加个<code>s</code>的方式，而是遵循英语的复数规则，感觉很是有意思，带着好奇找了一下<code>Yii2</code>是怎么实现的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// vendor/yiisoft/yii2/rest/UrlRule.php</span><br><span class="line"></span><br><span class="line">public function init()</span><br><span class="line">&#123;</span><br><span class="line">    $controllers = [];</span><br><span class="line">    foreach ((array) $this-&gt;controller as $urlName =&gt; $controller) &#123;</span><br><span class="line">        if (is_int($urlName)) &#123;</span><br><span class="line">            $urlName = $this-&gt;pluralize ? Inflector::pluralize($controller) : $controller;</span><br><span class="line">        &#125;</span><br><span class="line">        $controllers[$urlName] = $controller;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续查看<code>puluralize()</code>方法，在<code>/vendor/yiisoft/yii2/helpers/BaseInflector.php</code>文件中看到了真面目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * Converts a word to its plural form.</span><br><span class="line">    * Note that this is for English only!</span><br><span class="line">    * For example, &apos;apple&apos; will become &apos;apples&apos;, and &apos;child&apos; will become &apos;children&apos;.</span><br><span class="line">    * @param string $word the word to be pluralized</span><br><span class="line">    * @return string the pluralized word</span><br><span class="line">    */</span><br><span class="line">public static function pluralize($word)</span><br><span class="line">&#123;</span><br><span class="line">    if (isset(static::$specials[$word])) &#123;</span><br><span class="line">        return static::$specials[$word];</span><br><span class="line">    &#125;</span><br><span class="line">    foreach (static::$plurals as $rule =&gt; $replacement) &#123;</span><br><span class="line">        if (preg_match($rule, $word)) &#123;</span><br><span class="line">            return preg_replace($rule, $replacement, $word);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $word;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从方法中可以看出，如果<code>$word</code>存在于静态属性<code>$specials</code>定义，则返回其对应的<code>value</code>，否则从静态数组<code>$plurals</code>中循环匹配复数规则，命中时根据<code>preg_replace</code>函数翻译成复数，这个两个数组的定义比较大，这里仅贴出部分代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> $specials = [</span><br><span class="line">    <span class="string">'atlas'</span> =&gt; <span class="string">'atlases'</span>,</span><br><span class="line">    <span class="string">'beef'</span> =&gt; <span class="string">'beefs'</span>,</span><br><span class="line">    <span class="string">'brother'</span> =&gt; <span class="string">'brothers'</span>,</span><br><span class="line">    <span class="string">'cafe'</span> =&gt; <span class="string">'cafes'</span>,</span><br><span class="line">    <span class="string">'child'</span> =&gt; <span class="string">'children'</span>,</span><br><span class="line">    <span class="string">'cookie'</span> =&gt; <span class="string">'cookies'</span>,</span><br><span class="line">    <span class="string">'corpus'</span> =&gt; <span class="string">'corpuses'</span>,</span><br><span class="line">    <span class="string">'cow'</span> =&gt; <span class="string">'cows'</span>,</span><br><span class="line">    <span class="string">'curve'</span> =&gt; <span class="string">'curves'</span>,</span><br><span class="line">    <span class="string">'foe'</span> =&gt; <span class="string">'foes'</span>,</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> $plurals = [</span><br><span class="line">    <span class="string">'/([nrlm]ese|deer|fish|sheep|measles|ois|pox|media)$/i'</span> =&gt; <span class="string">'\1'</span>,</span><br><span class="line">    <span class="string">'/^(sea[- ]bass)$/i'</span> =&gt; <span class="string">'\1'</span>,</span><br><span class="line">    <span class="string">'/(m)ove$/i'</span> =&gt; <span class="string">'\1oves'</span>,</span><br><span class="line">    <span class="string">'/(f)oot$/i'</span> =&gt; <span class="string">'\1eet'</span>,</span><br><span class="line">    <span class="string">'/(h)uman$/i'</span> =&gt; <span class="string">'\1umans'</span>,</span><br><span class="line">    <span class="string">'/(s)tatus$/i'</span> =&gt; <span class="string">'\1tatuses'</span>,</span><br><span class="line">    <span class="string">'/(s)taff$/i'</span> =&gt; <span class="string">'\1taff'</span>,</span><br><span class="line">    <span class="string">'/(t)ooth$/i'</span> =&gt; <span class="string">'\1eeth'</span>,</span><br><span class="line">    <span class="string">'/(quiz)$/i'</span> =&gt; <span class="string">'\1zes'</span>,</span><br><span class="line">    <span class="string">'/^(ox)$/i'</span> =&gt; <span class="string">'\1\2en'</span>,</span><br><span class="line">    <span class="string">'/([m|l])ouse$/i'</span> =&gt; <span class="string">'\1ice'</span>,</span><br><span class="line">    <span class="string">'/(matr|vert|ind)(ix|ex)$/i'</span> =&gt; <span class="string">'\1ices'</span>,</span><br><span class="line">    <span class="string">'/(x|ch|ss|sh)$/i'</span> =&gt; <span class="string">'\1es'</span>,</span><br><span class="line">    <span class="string">'/([^aeiouy]|qu)y$/i'</span> =&gt; <span class="string">'\1ies'</span>,</span><br><span class="line">    <span class="string">'/(hive)$/i'</span> =&gt; <span class="string">'\1s'</span>,</span><br><span class="line">    <span class="string">'/(?:([^f])fe|([lr])f)$/i'</span> =&gt; <span class="string">'\1\2ves'</span>,</span><br><span class="line">    <span class="string">'/sis$/i'</span> =&gt; <span class="string">'ses'</span>,</span><br><span class="line">    <span class="string">'/([ti])um$/i'</span> =&gt; <span class="string">'\1a'</span>,</span><br><span class="line">    <span class="string">'/(p)erson$/i'</span> =&gt; <span class="string">'\1eople'</span>,</span><br><span class="line">    <span class="string">'/(m)an$/i'</span> =&gt; <span class="string">'\1en'</span>,</span><br><span class="line">    <span class="string">'/(c)hild$/i'</span> =&gt; <span class="string">'\1hildren'</span>,</span><br><span class="line">    <span class="string">'/(buffal|tomat|potat|ech|her|vet)o$/i'</span> =&gt; <span class="string">'\1oes'</span>,</span><br><span class="line">    <span class="string">'/(alumn|bacill|cact|foc|fung|nucle|radi|stimul|syllab|termin|vir)us$/i'</span> =&gt; <span class="string">'\1i'</span>,</span><br><span class="line">    <span class="string">'/us$/i'</span> =&gt; <span class="string">'uses'</span>,</span><br><span class="line">    <span class="string">'/(alias)$/i'</span> =&gt; <span class="string">'\1es'</span>,</span><br><span class="line">    <span class="string">'/(ax|cris|test)is$/i'</span> =&gt; <span class="string">'\1es'</span>,</span><br><span class="line">    <span class="string">'/(currenc)y$/'</span> =&gt; <span class="string">'\1ies'</span>,</span><br><span class="line">    <span class="string">'/s$/'</span> =&gt; <span class="string">'s'</span>,</span><br><span class="line">    <span class="string">'/^$/'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="string">'/$/'</span> =&gt; <span class="string">'s'</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>END :)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享一下，工作中遇见值得分享的&lt;code&gt;Code&lt;/code&gt;，这些代码往往比较有趣、有意义、或者少见（有意义），在此我统称为：酷代码。&lt;/p&gt;
&lt;h2 id=&quot;IP-白名单检测&quot;&gt;&lt;a href=&quot;#IP-白名单检测&quot; class=&quot;headerlink&quot; title=&quot;IP 白名单检测&quot;&gt;&lt;/a&gt;IP 白名单检测&lt;/h2&gt;&lt;p&gt;场景描述：我司的一个子项目，用来处理全部的支付业务，为了安全，所有的内部请求必须经过 IP 检测（这只是其中一环），分享一下基于我老大（涛哥）思想，利用位运算完成，&lt;code&gt;IP&lt;/code&gt;白名单检测方法，以下是核心代码&lt;/p&gt;
&lt;p&gt;定义检测函数&lt;code&gt;checkRemoteAddr()&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 验证 IP 白名单&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; $ip   string              待验证IP地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; $AllowRemoteIps array     允许的IP白名单&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;checkRemoteAddr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($ip,$AllowRemoteIps)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $ipNum = ip2long($ip);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt; ($AllowRemoteIps &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; $mask)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @&lt;span class=&quot;keyword&quot;&gt;list&lt;/span&gt;($maskIp, $maskStep) = explode(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, $mask);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $maskIpNum = ip2long($maskIp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $maskStep = !&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($maskStep) ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt; - intval($maskStep);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( ($ipNum &amp;gt;&amp;gt; $maskStep) === ($maskIpNum &amp;gt;&amp;gt; $maskStep) )  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Cool code" scheme="https://dbing.github.io/categories/Cool-code/"/>
    
    
      <category term="code" scheme="https://dbing.github.io/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Window10 子系统极速搭建LNMP开发环境</title>
    <link href="https://dbing.github.io/2019/05/16/Window10-%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%9E%81%E9%80%9F%E6%90%AD%E5%BB%BALNMP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://dbing.github.io/2019/05/16/Window10-子系统极速搭建LNMP开发环境/</id>
    <published>2019-05-16T10:18:28.000Z</published>
    <updated>2020-02-17T15:13:00.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开启子系统"><a href="#开启子系统" class="headerlink" title="开启子系统"></a>开启子系统</h2><p>window10 开启子系统方法：</p><p>参考地址：<a href="https://jingyan.baidu.com/article/546ae185de58961149f28cac.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/546ae185de58961149f28cac.html</a></p><h2 id="快速安装-LNMP-环境"><a href="#快速安装-LNMP-环境" class="headerlink" title="快速安装 LNMP 环境"></a>快速安装 LNMP 环境</h2><p>Linux 下 <code>CentOS</code> 可以通过<code>yum</code>,<code>Ubuntu</code> 可以通过 <code>apt-get</code>，可以通过这种方式安装<code>LNMP</code>所需要每一个软件，也可以使用<code>LNMP</code>集成包的方法，既然是快速搭建开发环境，这里推荐使用<code>BT</code></p><p>安装手册：<a href="http://www.bt.cn/btcode.html#install" target="_blank" rel="noopener">http://www.bt.cn/btcode.html#install</a></p><h2 id="安装扩展"><a href="#安装扩展" class="headerlink" title="安装扩展"></a>安装扩展</h2><p>方法一：</p><p>通过<code>BT</code>管理面板，进行安装。</p><p>方法二：</p><p>切换<code>PHP</code>可执行目录，<code>cd /www/server/php/71/bin/</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pecl install mongodb</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Build process completed successfully</span><br><span class="line">Installing <span class="string">'/www/server/php/71/lib/php/extensions/no-debug-non-zts-20160303/mongodb.so'</span></span><br><span class="line">install ok: channel:<span class="comment">//pecl.php.net/mongodb-1.5.3</span></span><br><span class="line">Extension mongodb enabled in php.ini</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>Q：Ubuntu apt-get源为国内镜像源的方法<br>A：见以下操作步骤：</p><ol><li><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</code></li><li><code>sudo vim /etc/apt/sources.list</code></li><li>清空原来的列表（命令行模式下，按<code>ggdG</code>），添加以下内容（中科大镜像源）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure></li></ol><p>4.保存后，运行 <code>sudo apt-get update</code></p><p>补：Vim 清空文件内容方法<br>方法一：命令行模式下，按键盘<code>ggdG</code><br>方法二：先在命令模式下输入 G 再输入<code>:1,.d</code></p><hr><p>Q1：访问PHP项目，特别慢或者（Time out）超时。<br>A1：在 Ubuntu WSL的<code>Nginx</code>配置 <code>fastcgi_buffering off;</code> # This must be here for WSL as of 11/28/2018</p><p>具体配置参考如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">        fastcgi_pass unix:/var/run/php/php7.1-fpm.sock;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_buffering off; # This must be here for WSL as of 11/28/2018</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        fastcgi_param PHP_VALUE &quot;upload_max_filesize = 20M \n post_max_size=21M&quot;;</span><br><span class="line">        include /etc/nginx/fastcgi.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此问题 Issues：<a href="https://github.com/Microsoft/WSL/issues/393#issuecomment-442498519" target="_blank" rel="noopener">https://github.com/Microsoft/WSL/issues/393#issuecomment-442498519</a></p><p>Q2:BT下启动<code>MySQL</code>失败，一下是通过命令行启动提示<code>log</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">meng@SD-20200215YBQD:/$ sudo /etc/init.d/mysqld start</span><br><span class="line">my_print_defaults: [Warning] World-writable config file <span class="string">'/etc/my.cnf'</span> is ignored.</span><br><span class="line">Starting MySQL.my_print_defaults: [Warning] World-writable config file <span class="string">'/etc/my.cnf'</span> is ignored.</span><br><span class="line">my_print_defaults: [Warning] World-writable config file <span class="string">'/etc/my.cnf'</span> is ignored.</span><br><span class="line">Logging to <span class="string">'/www/server/mysql/data/SD-20200215YBQD.err'</span>.</span><br><span class="line">. * The server quit without updating PID file (/www/server/mysql/data/SD-20200215YBQD.pid).</span><br></pre></td></tr></table></figure><p>A2:修改 <code>/etc/my.cnf</code> 文件权限为 <code>644</code>，重启<code>MySQL</code>服务即可，重启命令：<code>/etc/init.d/mysqld start</code></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开启子系统&quot;&gt;&lt;a href=&quot;#开启子系统&quot; class=&quot;headerlink&quot; title=&quot;开启子系统&quot;&gt;&lt;/a&gt;开启子系统&lt;/h2&gt;&lt;p&gt;window10 开启子系统方法：&lt;/p&gt;
&lt;p&gt;参考地址：&lt;a href=&quot;https://jingyan.bai
      
    
    </summary>
    
      <category term="Linux" scheme="https://dbing.github.io/categories/Linux/"/>
    
    
      <category term="Window10 LNMP 环境搭建" scheme="https://dbing.github.io/tags/Window10-LNMP-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Git 实用指南</title>
    <link href="https://dbing.github.io/2019/04/26/Git-%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://dbing.github.io/2019/04/26/Git-实用指南/</id>
    <published>2019-04-26T14:20:25.000Z</published>
    <updated>2020-01-08T01:53:49.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h2><p>Git 官网地址：<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2</a></p><h2 id="最简配置"><a href="#最简配置" class="headerlink" title="最简配置"></a>最简配置</h2><p>config 的三个作用域<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">local</span></span><br><span class="line">git config --global</span><br><span class="line">git config --system</span><br></pre></td></tr></table></figure></p><p>配置 <code>user.name</code>和<code>user.email</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">'your name'</span></span><br><span class="line">git config --global user.email <span class="string">'your_email@domain.com'</span></span><br></pre></td></tr></table></figure></p><p>显示<code>config</code>配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list --<span class="built_in">local</span></span><br></pre></td></tr></table></figure></p><h2 id="图形界面"><a href="#图形界面" class="headerlink" title="图形界面"></a>图形界面</h2><h2 id="Git-基础命令"><a href="#Git-基础命令" class="headerlink" title="Git 基础命令"></a>Git 基础命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git -u</span><br><span class="line">git mv <span class="built_in">test</span>  demo</span><br></pre></td></tr></table></figure><h2 id="Git-tag"><a href="#Git-tag" class="headerlink" title="Git tag"></a>Git tag</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打标签</span></span><br><span class="line">git tag -a v1.1.0 -m <span class="string">"tagging version 1.1.0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地 Tag</span></span><br><span class="line">git tag -d v1.1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程 Tag</span></span><br><span class="line">git push origin :refs/tags/v1.1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Tag</span></span><br><span class="line">git tag</span><br></pre></td></tr></table></figure><h2 id="Git-log"><a href="#Git-log" class="headerlink" title="Git log"></a>Git log</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">git <span class="built_in">log</span> --onelie</span><br><span class="line">git <span class="built_in">log</span> -n4</span><br><span class="line">git <span class="built_in">log</span> --all --graph</span><br><span class="line">git <span class="built_in">log</span> --all --oneline --graph -n4</span><br><span class="line">git <span class="built_in">log</span> <span class="built_in">help</span> --web <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><p>Q1：想撤回 <code>commit</code> 操作同时保留代码，怎么办？<br>A1：执行命令 <code>git reset --soft HEAD^</code></p><p>解释：<code>HEAD^</code> 意思是上一个版本，也可以写成 <code>HEAD~1</code>，如果想撤销两次<code>commit</code>，命令：<code>HEAD~2</code></p><p>参数：</p><ul><li><code>--soft</code>: 不删除工作空间改动代码，撤销<code>commit</code>，不撤销<code>git add .</code></li><li><code>--mixed</code>: 不删除工作空间改动代码，撤销<code>commit</code>，并且撤销<code>git add .</code>，<code>git reset --mixed HEAD^</code>等同于<code>git reset HEAD^</code></li><li><code>--hard</code>: 删除工作空间改动代码，撤销<code>commit</code>，撤销<code>git add .</code>（恢复到了上一次的commit状态）</li></ul><p>Q2: 只想修改注释；<br>A2: <code>git commit --amend</code>,进入默认vim编辑器,修改保存即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git-安装&quot;&gt;&lt;a href=&quot;#Git-安装&quot; class=&quot;headerlink&quot; title=&quot;Git 安装&quot;&gt;&lt;/a&gt;Git 安装&lt;/h2&gt;&lt;p&gt;Git 官网地址：&lt;a href=&quot;https://git-scm.com/book/zh/v2&quot; targ
      
    
    </summary>
    
      <category term="工具" scheme="https://dbing.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="https://dbing.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>PhpStorm Material 主题配置与字体选择</title>
    <link href="https://dbing.github.io/2019/04/19/PhpStorm-Material-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%AD%97%E4%BD%93%E9%80%89%E6%8B%A9/"/>
    <id>https://dbing.github.io/2019/04/19/PhpStorm-Material-主题配置与字体选择/</id>
    <published>2019-04-19T10:39:45.000Z</published>
    <updated>2019-05-22T10:07:14.074Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>古人云: “工欲善其事必先利其器”，分享一下自己在<code>PhpStorm</code>中的自己喜欢的<code>Material</code>主题以及开发字体。</p></blockquote><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p>预览官网效果，<a href="https://plugins.jetbrains.com/plugin/8006-material-theme-ui" target="_blank" rel="noopener">去预览</a></p><p>我的主题效果<img src="/2019/04/19/PhpStorm-Material-主题配置与字体选择/install-view.png" title="预览效果"></p><a id="more"></a><h2 id="安装-Material"><a href="#安装-Material" class="headerlink" title="安装 Material"></a>安装 Material</h2><p>步骤 File-&gt;Setting-&gt;Plugins-&gt;Marketplace</p><p>已安装后截图<br><img src="/2019/04/19/PhpStorm-Material-主题配置与字体选择/install-material.png" title="安装 Material"></p><h2 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h2><p>步骤 File-&gt;Setting-&gt;Material Theme-&gt;Selected Theme</p><img src="/2019/04/19/PhpStorm-Material-主题配置与字体选择/theme-material.png" title="选择主题"><h2 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h2><p>步骤 File-&gt;Setting-&gt;Editor-&gt;Color Scheme-&gt;Color Scheme Font</p><img src="/2019/04/19/PhpStorm-Material-主题配置与字体选择/theme-material-font.png" title="设置字体"><p>个人喜好字体：<code>Fira Code Medium</code></p><h2 id="个人配置文件"><a href="#个人配置文件" class="headerlink" title="个人配置文件"></a>个人配置文件</h2><a href="/2019/04/19/PhpStorm-Material-主题配置与字体选择/settings.zip" title="[下载我的配置]">[下载我的配置]</a><p>导入步骤 File-&gt;Import Settings</p><h2 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h2><ul><li><a href="https://github.com/equinusocio/material-theme" title="[material-theme github]" target="_blank" rel="noopener">跳转至 material Github</a></li></ul><p>End :-)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;古人云: “工欲善其事必先利其器”，分享一下自己在&lt;code&gt;PhpStorm&lt;/code&gt;中的自己喜欢的&lt;code&gt;Material&lt;/code&gt;主题以及开发字体。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;效果预览&quot;&gt;&lt;a href=&quot;#效果预览&quot; class=&quot;headerlink&quot; title=&quot;效果预览&quot;&gt;&lt;/a&gt;效果预览&lt;/h2&gt;&lt;p&gt;预览官网效果，&lt;a href=&quot;https://plugins.jetbrains.com/plugin/8006-material-theme-ui&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;去预览&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我的主题效果&lt;img src=&quot;/2019/04/19/PhpStorm-Material-主题配置与字体选择/install-view.png&quot; title=&quot;预览效果&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PhpStorm" scheme="https://dbing.github.io/categories/PhpStorm/"/>
    
    
      <category term="PhpStorm" scheme="https://dbing.github.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 5.7 的最佳技巧和良好实践</title>
    <link href="https://dbing.github.io/2019/04/01/Laravel-5-7-%E7%9A%84%E6%9C%80%E4%BD%B3%E6%8A%80%E5%B7%A7%E5%92%8C%E8%89%AF%E5%A5%BD%E5%AE%9E%E8%B7%B5/"/>
    <id>https://dbing.github.io/2019/04/01/Laravel-5-7-的最佳技巧和良好实践/</id>
    <published>2019-04-01T13:46:50.000Z</published>
    <updated>2019-04-18T08:45:04.638Z</updated>
    
    <content type="html"><![CDATA[<p>许多PHP开发人员已经知道Laravel编写优雅、可工作和可调试的代码。它还支持很多很多特性，这些特性有时没有列在文档中，或者曾经列在文档中，但是由于各种原因被删除了。</p><p>我在工作中使用<code>Laravel</code>开发产品已经2年了，我一直学习从编写糟糕的代码到优雅的代码，自从第一次使用<code>Laravel</code>编写代码以来，我就一直在从中受益，我将向您展示在使用<code>Laravel</code>编写代码时可能会帮助您的神秘技巧。</p><h2 id="当您需要查询内容时，请使用local-scopes"><a href="#当您需要查询内容时，请使用local-scopes" class="headerlink" title="当您需要查询内容时，请使用local scopes"></a>当您需要查询内容时，请使用<code>local scopes</code></h2><p><code>Laravel</code>有一种很好的方法，可以使用<code>Query Builder</code>为数据库驱动程序编写查询，像这样：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$orders = Order::where(<span class="string">'status'</span>, <span class="string">'delivered'</span>)-&gt;where(<span class="string">'paid'</span>, <span class="keyword">true</span>)-&gt;get();</span><br></pre></td></tr></table></figure></p><p>这段代码看起来很好。这让我放弃了SQL，专注于编写对我来说更容易理解的代码。但是如果我们使用局部作用域（local scopes），这段代码可以写得更好。</p><a id="more"></a><p>局部作用域(local scopes)允许我们创建自己的查询生成器(Query Builder)方法，当我们试图检索数据时，我们可以使用这些方法来进行链接。例如，我们可以使用<code>-&gt;delivered()</code>和<code>-&gt;paid()</code>方法以更简洁的方式替换掉<code>-&gt;where()</code>语句。</p><p>首先，在我们的<code>Order</code>模型，我们应该添加如下方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopeDelivered</span><span class="params">($query)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $query-&gt;where(<span class="string">'status'</span>, <span class="string">'delivered'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopePaid</span><span class="params">($query)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $query-&gt;where(<span class="string">'paid'</span>, <span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在使用<code>local scopes</code>时，应该使用<code>scope[Something]</code>为前缀命名方法名。通过这种方式，<code>Laravel</code>将知道这是一个<code>scope</code>修饰的方法，并将在查询生成器（<code>Query Builder</code>）中使用它。确保包含的第一个参数是被<code>Laravel</code>自动注入并且是<code>Query Builder</code>的实例。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$orders = Order::delivered()-&gt;paid()-&gt;get();</span><br></pre></td></tr></table></figure></p><p>对于更多动态的检索，可以使用动态局部作用域（dynamic local scopes）。每个作用域（scope ）允许您提供参数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopeStatus</span><span class="params">($query, string $status)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $query-&gt;where(<span class="string">'status'</span>, $status);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">$orders = Order::status(<span class="string">'delivered'</span>)-&gt;paid()-&gt;get();</span><br></pre></td></tr></table></figure><p>在后面的文章，您将了解为什么应该对数据库字段使用<code>snake_case</code>，这是第一个原因:<code>Laravel</code>默认使用<code>where[Something]</code>来替换前面的作用域。所以你可以做的是:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Order::whereStatus(<span class="string">'delivered'</span>)-&gt;paid()-&gt;get();</span><br></pre></td></tr></table></figure></p><p><code>Laravel</code>将要从<code>where[Something]</code>中搜索<code>snake_case</code>版本。如果您的数据表中有状态，您可以使用前面的示例。如果你有<code>shipping_status</code>字段，你也可以使用如下方式:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Order::whereShippingStatus(<span class="string">'delivered'</span>)-&gt;paid()-&gt;get();</span><br></pre></td></tr></table></figure></p><p>这是你的选择!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;许多PHP开发人员已经知道Laravel编写优雅、可工作和可调试的代码。它还支持很多很多特性，这些特性有时没有列在文档中，或者曾经列在文档中，但是由于各种原因被删除了。&lt;/p&gt;
&lt;p&gt;我在工作中使用&lt;code&gt;Laravel&lt;/code&gt;开发产品已经2年了，我一直学习从编写糟糕的代码到优雅的代码，自从第一次使用&lt;code&gt;Laravel&lt;/code&gt;编写代码以来，我就一直在从中受益，我将向您展示在使用&lt;code&gt;Laravel&lt;/code&gt;编写代码时可能会帮助您的神秘技巧。&lt;/p&gt;
&lt;h2 id=&quot;当您需要查询内容时，请使用local-scopes&quot;&gt;&lt;a href=&quot;#当您需要查询内容时，请使用local-scopes&quot; class=&quot;headerlink&quot; title=&quot;当您需要查询内容时，请使用local scopes&quot;&gt;&lt;/a&gt;当您需要查询内容时，请使用&lt;code&gt;local scopes&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Laravel&lt;/code&gt;有一种很好的方法，可以使用&lt;code&gt;Query Builder&lt;/code&gt;为数据库驱动程序编写查询，像这样：&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$orders = Order::where(&lt;span class=&quot;string&quot;&gt;&#39;status&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;delivered&#39;&lt;/span&gt;)-&amp;gt;where(&lt;span class=&quot;string&quot;&gt;&#39;paid&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;)-&amp;gt;get();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这段代码看起来很好。这让我放弃了SQL，专注于编写对我来说更容易理解的代码。但是如果我们使用局部作用域（local scopes），这段代码可以写得更好。&lt;/p&gt;
    
    </summary>
    
      <category term="Laravel" scheme="https://dbing.github.io/categories/Laravel/"/>
    
    
      <category term="laravel5.7" scheme="https://dbing.github.io/tags/laravel5-7/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 5.7 安装 Json Web Tokens (tymon/jwt-auth)</title>
    <link href="https://dbing.github.io/2019/03/30/Laravel-5-7-%E5%AE%89%E8%A3%85-Json-Web-Tokens-tymon-jwt-auth/"/>
    <id>https://dbing.github.io/2019/03/30/Laravel-5-7-安装-Json-Web-Tokens-tymon-jwt-auth/</id>
    <published>2019-03-30T02:04:07.000Z</published>
    <updated>2019-07-03T07:52:46.901Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Laravel 5.7 框架集成 jwt 操作指南，在官方的 <a href="https://github.com/tymondesigns/jwt-auth/wiki/Installation[external]" title="[wiki]" target="_blank" rel="noopener">wiki</a> 中也有介绍，是使用的<code>0.5.*</code>版本，本文使用的<code>jwt-auth</code>是<code>1.0.0-rc.3</code>版本，切记使用此扩展包的版本不同，集成也会稍有不同，否则你会得到意想不到的问题，根据自己 <code>laravel</code>版本不同使用<code>jwt-auth</code>版本建议如下：</p><table><thead><tr><th style="text-align:left">Laravel version</th><th>jwt-auth version</th></tr></thead><tbody><tr><td style="text-align:left"><code>4.*</code></td><td><code>0.3.*</code> <code>0.4.*</code></td></tr><tr><td style="text-align:left"><code>5.*</code> &amp;&amp; <code>&lt;5.5</code></td><td><code>0.5.*</code></td></tr><tr><td style="text-align:left"><code>5.*</code></td><td><code>1.0.*</code></td></tr></tbody></table><h2 id="安装扩展包-jwt-auth"><a href="#安装扩展包-jwt-auth" class="headerlink" title="安装扩展包 jwt-auth"></a>安装扩展包 jwt-auth</h2><p>将扩展包添加到<code>composer.json</code>，添加如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">“require”: &#123;</span><br><span class="line">    ...</span><br><span class="line">    “tymon/jwt-auth”: “1.0.0-rc.3”</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后通过命令更新<code>Composer</code>命令如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer update</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="设置配置"><a href="#设置配置" class="headerlink" title="设置配置"></a>设置配置</h2><p>创建<code>jwt secret</code>秘钥<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan jwt:secret</span><br></pre></td></tr></table></figure></p><blockquote><p>tip：会在 <code>.env</code> 末尾行追加一行配置记录<code>JWT_SECRET=xxxxxx</code></p></blockquote><p>发布 jwt 配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish --provider=<span class="string">"Tymon\JWTAuth\Providers\LaravelServiceProvider"</span></span><br></pre></td></tr></table></figure></p><blockquote><p>tip：会在项目的<code>config</code>目录中新增一个<code>jwt.php</code>的配置文件</p></blockquote><h2 id="添加到服务提供者"><a href="#添加到服务提供者" class="headerlink" title="添加到服务提供者"></a>添加到服务提供者</h2><p>打开<code>config/app.php</code>并在<code>aliases</code>数组中添加以下行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'JWTAuth'</span> =&gt; Tymon\JWTAuth\Facades\JWTAuth::class,</span><br><span class="line"><span class="string">'JWTFactory'</span> =&gt; Tymon\JWTAuth\Facades\JWTFactory::class,</span><br></pre></td></tr></table></figure></p><h2 id="添加到中间件"><a href="#添加到中间件" class="headerlink" title="添加到中间件"></a>添加到中间件</h2><p>打开<code>app/Http/Kernel.php</code>，然后在<code>$routeMiddleware</code>中添加以下行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'jwt.auth'</span> =&gt; \Tymon\JWTAuth\Http\Middleware\Authenticate::class,</span><br><span class="line"><span class="string">'jwt.refresh'</span> =&gt; \Tymon\JWTAuth\Http\Middleware\RefreshToken::class,</span><br></pre></td></tr></table></figure></p><h2 id="更新用户模型"><a href="#更新用户模型" class="headerlink" title="更新用户模型"></a>更新用户模型</h2><p>打开<code>User.php</code>并为模型实现<code>JWTSubject</code>，代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Contracts</span>\<span class="title">JWTSubject</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span> <span class="keyword">implements</span> <span class="title">JWTSubject</span></span></span><br></pre></td></tr></table></figure></p><p>并在模型中添加2个方法，添加如下代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getJWTIdentifier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getKey();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getJWTCustomClaims</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="更新配置文件-auth-php"><a href="#更新配置文件-auth-php" class="headerlink" title="更新配置文件 auth.php"></a>更新配置文件 auth.php</h2><p>打开<code>config/auth.php</code>并将 <code>guards</code> 中键为<code>api</code>的驱动(driver)改为<code>jwt</code>（默认为：token）代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'guards'</span> =&gt; [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'api'</span> =&gt; [</span><br><span class="line">        <span class="string">'driver'</span> =&gt; <span class="string">'jwt'</span>,</span><br><span class="line">        <span class="string">'provider'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h2 id="登录获取授权-Token"><a href="#登录获取授权-Token" class="headerlink" title="登录获取授权 Token"></a>登录获取授权 Token</h2><p>通过<code>artisan</code>创建<code>AuthController</code>控制器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:controller AuthController</span><br></pre></td></tr></table></figure><p>在控制器中<code>AuthController</code>添加如下登录获取<code>Token</code>的代码，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $credentials = request([<span class="string">'email'</span>, <span class="string">'password'</span>]);</span><br><span class="line">    <span class="keyword">if</span> (!$token = auth(<span class="string">'api'</span>)-&gt;attempt($credentials)) &#123;</span><br><span class="line">        <span class="keyword">return</span> response()-&gt;json([<span class="string">'error'</span> =&gt; <span class="string">'Unauthorized'</span>], <span class="number">401</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response()-&gt;json([</span><br><span class="line">        <span class="string">'token'</span> =&gt; $token,</span><br><span class="line">        <span class="string">'expires'</span> =&gt; auth(<span class="string">'api'</span>)-&gt;factory()-&gt;getTTL() * <span class="number">60</span>,</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建路由"><a href="#创建路由" class="headerlink" title="创建路由"></a>创建路由</h2><p>打开路由文件<code>routes/api.php</code>，添加如下路由代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::post(<span class="string">'login'</span>, <span class="string">'AuthController@login'</span>);</span><br></pre></td></tr></table></figure></p><p>添加一行测试数据<code>email:test@test.com</code>、<code>password:secret</code>，PostMan 测试截图如下：</p><img src="/2019/03/30/Laravel-5-7-安装-Json-Web-Tokens-tymon-jwt-auth/2019-03-30-11.38.png" title="登录授权获取Token"><p>添加<code>jwt.auth</code>中间件，保护你的路由，事例代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::middleware(<span class="string">'jwt.auth'</span>)-&gt;get(<span class="string">'users'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> auth(<span class="string">'api'</span>)-&gt;user();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>添加<code>Authorization: Bearer {token}</code>到请求(header)头，PostMan 测试截图如下：</p><img src="/2019/03/30/Laravel-5-7-安装-Json-Web-Tokens-tymon-jwt-auth/2019-03-30-11.45.png" title="通过Token获取用户信息"><h2 id="如果您想捕获异常"><a href="#如果您想捕获异常" class="headerlink" title="如果您想捕获异常"></a>如果您想捕获异常</h2><p>打开文件<code>app/Exceptions/Handler.php</code>在<code>render</code>方法开头使用如下代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">UnauthorizedHttpException</span>;</span><br></pre></td></tr></table></figure></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($exception <span class="keyword">instanceof</span> UnauthorizedHttpException) &#123;</span><br><span class="line">    $preException = $exception-&gt;getPrevious();</span><br><span class="line">    <span class="keyword">if</span> ($preException <span class="keyword">instanceof</span></span><br><span class="line">                  \Tymon\JWTAuth\Exceptions\TokenExpiredException) &#123;</span><br><span class="line">        <span class="keyword">return</span> response()-&gt;json([<span class="string">'error'</span> =&gt; <span class="string">'TOKEN_EXPIRED'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($preException <span class="keyword">instanceof</span></span><br><span class="line">                  \Tymon\JWTAuth\Exceptions\TokenInvalidException) &#123;</span><br><span class="line">        <span class="keyword">return</span> response()-&gt;json([<span class="string">'error'</span> =&gt; <span class="string">'TOKEN_INVALID'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($preException <span class="keyword">instanceof</span></span><br><span class="line">             \Tymon\JWTAuth\Exceptions\TokenBlacklistedException) &#123;</span><br><span class="line">         <span class="keyword">return</span> response()-&gt;json([<span class="string">'error'</span> =&gt; <span class="string">'TOKEN_BLACKLISTED'</span>]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> ($exception-&gt;getMessage() === <span class="string">'Token not provided'</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> response()-&gt;json([<span class="string">'error'</span> =&gt; <span class="string">'Token not provided'</span>]);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://jwt-auth.readthedocs.io/en/develop/laravel-installation/" title="[external] [官方文档]" target="_blank" rel="noopener">官方Wiki</a></li><li><a href="https://github.com/tymondesigns/jwt-auth" title="[external] [github]" target="_blank" rel="noopener">github</a></li></ul><p>End :)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Laravel 5.7 框架集成 jwt 操作指南，在官方的 &lt;a href=&quot;https://github.com/tymondesigns/jwt-auth/wiki/Installation[external]&quot; title=&quot;[wiki]&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wiki&lt;/a&gt; 中也有介绍，是使用的&lt;code&gt;0.5.*&lt;/code&gt;版本，本文使用的&lt;code&gt;jwt-auth&lt;/code&gt;是&lt;code&gt;1.0.0-rc.3&lt;/code&gt;版本，切记使用此扩展包的版本不同，集成也会稍有不同，否则你会得到意想不到的问题，根据自己 &lt;code&gt;laravel&lt;/code&gt;版本不同使用&lt;code&gt;jwt-auth&lt;/code&gt;版本建议如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Laravel version&lt;/th&gt;
&lt;th&gt;jwt-auth version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;4.*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0.3.*&lt;/code&gt; &lt;code&gt;0.4.*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;5.*&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;&amp;lt;5.5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0.5.*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;5.*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.0.*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;安装扩展包-jwt-auth&quot;&gt;&lt;a href=&quot;#安装扩展包-jwt-auth&quot; class=&quot;headerlink&quot; title=&quot;安装扩展包 jwt-auth&quot;&gt;&lt;/a&gt;安装扩展包 jwt-auth&lt;/h2&gt;&lt;p&gt;将扩展包添加到&lt;code&gt;composer.json&lt;/code&gt;，添加如下代码&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;“require”: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    “tymon/jwt-auth”: “1.0.0-rc.3”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后通过命令更新&lt;code&gt;Composer&lt;/code&gt;命令如下&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;composer update&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Laravel" scheme="https://dbing.github.io/categories/Laravel/"/>
    
    
      <category term="laravel5.7 | jwt-auth" scheme="https://dbing.github.io/tags/laravel5-7-jwt-auth/"/>
    
  </entry>
  
  <entry>
    <title>PhpStorm配置Xdebug远程调试</title>
    <link href="https://dbing.github.io/2019/03/19/PhpStorm-%E9%85%8D%E7%BD%AE-Xdebug-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    <id>https://dbing.github.io/2019/03/19/PhpStorm-配置-Xdebug-远程调试/</id>
    <published>2019-03-19T02:29:54.000Z</published>
    <updated>2019-05-09T10:23:01.654Z</updated>
    
    <content type="html"><![CDATA[<p>调试复杂些的项目代码，<code>Xdebug</code> 是一把利器，本文结合自己的开发环境简讲通过<code>PhpStorm</code>完成<code>Xdebug</code>调试,部分原理图借鉴<code>xxlegend</code>作者</p><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><blockquote class="pullquote [class]"><p>本机：Windows10 + PhpStorm 2018 + Ip 192.168.10.108</p><p>开发机：CentOS 6.10 + PHP 7.1 + Nginx 1.14 + Ip 192.168.10.140</p></blockquote><h3 id="开发方式"><a href="#开发方式" class="headerlink" title="开发方式"></a>开发方式</h3><p>一般情况开发者都是在本地开发，使用的开发环境也是本地自己搭建的，无论是在<code>Win</code>、<code>Mac</code>、<code>Linux</code>三者哪一个平台开发，最终想达到的体验是尽可能和生产环境一致，如果是在<code>Win</code>下开发，带来的代码兼容性问题时长让人难受（如：大小写问题），以至于追求<code>Unix</code>开发是一种潮流，这可能便是<code>Mac</code>之所以时程序员所爱的原因吧，<code>Win</code>下要想到达此效果。</p><ol><li>通过在<code>Window</code>下安装虚拟机，虚拟机中安装<code>Linxu</code>系统；</li><li>使用<code>Windows 10</code>已经支持开启子系统，<code>Ubuntu</code>子系统中安装<code>PHP</code>开发环境；</li><li>使用公司提供的公共开发机，开发机环境和所需服务都是安装好的，通过<code>samba</code>共享目录方式，本机无环境，开发机创建一个自己的虚拟目录；</li></ol><ul><li>方法一：没有配置上<code>SSD</code>，内存没到<code>4G</code> 慎用 </li><li>方法二：<code>Windows 10</code> 开启子系统，在应用市场一键安装<code>Ubuntu</code>，还是很方便的，在子系统中可以直接访问宿主机(本机)目录，使用感很方便。</li><li>方法三：我公司为了开发者方便，搭建了<code>IP</code>为<code>140</code>的开发机，通过<code>samba</code>创建虚拟目录，本地添加网络盘方式打开<code>140</code>自己<code>Home</code>开发目录；</li></ul><a id="more"></a><h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><blockquote><p>开发机（140）项目目录<code>/home/dingbing/zhifu</code><br>本机目录<code>Z:\zhifu</code></p></blockquote><p>本机通过挂载网络盘方式，访问到开发机<code>/home/dingbing/zhifu</code></p><h2 id="Xdebug-原理介绍"><a href="#Xdebug-原理介绍" class="headerlink" title="Xdebug 原理介绍"></a>Xdebug 原理介绍</h2><h3 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h3><img src="/2019/03/19/PhpStorm-配置-Xdebug-远程调试/xdebug_1.png" class="[class names]" title="[width] [height] [title text [alt text]]"><p>客户端（浏览器）发起请求，服务器Apache（或Nginx等），接收请求根据服务端配置规则如果是<code>.php</code>转交<code>PHP</code>，如果携带调试信息<code>?XDEBUG_SESSION_START=10003</code>参数，并且<code>PHP</code>引擎安装且开启了<code>Xdebug</code>，<code>Xdebug</code>把信息转发给<code>IDE</code>，从而完成断点调试。</p><h3 id="通信设置"><a href="#通信设置" class="headerlink" title="通信设置"></a>通信设置</h3><p>使用静态IP/单个开发人员</p><img src="/2019/03/19/PhpStorm-配置-Xdebug-远程调试/dbgp-setup.gif" class="[class names]" title="[width] [height] [title text [alt text]]"><ol><li>服务器的IP是10.0.1.2，端口是HTTP</li><li>IDE在IP 10.0.1.42上，因此xdebug。remote_host被设置为10.0.1.42</li><li>IDE监听端口9000，所以是xdebug。remote_port被设置为9000</li><li>HTTP请求在运行IDE的机器上启动</li><li>Xdebug连接到10.0.1.42:9000</li><li>调试运行，提供HTTP响应</li></ol><h2 id="安装并调试"><a href="#安装并调试" class="headerlink" title="安装并调试"></a>安装并调试</h2><h3 id="安装-Xdebug"><a href="#安装-Xdebug" class="headerlink" title="安装 Xdebug"></a>安装 Xdebug</h3><p>这里平台不一样，安装方式也不一样，<code>Linux</code> 和 <code>Window</code> 平台会稍有不同，PHP 版本不一样，对应安装的<code>Xdebug</code>版本也不一样，安装方式这里暂时不总结了。</p><p><code>Linux</code> 下编译后，将<code>.so</code>文件引入到<code>php.ini</code><br><code>Window</code>下，将对应的<code>xdebug.dll</code>库文件引入到<code>php.ini</code></p><p>官方下载地址 <a href="https://xdebug.org/download.php" target="_blank" rel="noopener">https://xdebug.org/download.php</a><br>安装后我的(CentOS)<code>php.ini</code>配置清单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[XDebug]</span><br><span class="line">xdebug.idekey=PHPSTORM</span><br><span class="line">xdebug.remote_mode=req</span><br><span class="line"></span><br><span class="line">;xdebug.remote_connect_back = 1</span><br><span class="line">;//注意：如果开启此，将忽略下面的 xdebug.remote_host 的参数</span><br><span class="line"></span><br><span class="line">xdebug.remote_host=192.168.10.117</span><br><span class="line">;//注意：客户端的IP&lt;即IDE的机器的ip&gt;</span><br><span class="line"></span><br><span class="line">xdebug.remote_enable=1</span><br><span class="line">xdebug.remote_port=9009</span><br><span class="line">;//注意：客户端的端口&lt;与IDE的Xdebug端口一致，此端口不能被其他程序占用&gt;</span><br><span class="line"></span><br><span class="line">xdebug.remote_handler=dbgp</span><br><span class="line">xdebug.auto_trace = 1</span><br><span class="line">;xdebug.remote_log = /tmp/xdebug.log</span><br><span class="line"></span><br><span class="line">zend_extension=/www/server/php/71/lib/php/extensions/no-debug-non-zts-20160303/xdebug.so</span><br></pre></td></tr></table></figure></p><p>配置项解释：<a href="https://xdebug.org/docs/remote" target="_blank" rel="noopener">https://xdebug.org/docs/remote</a></p><h3 id="配置-Debug"><a href="#配置-Debug" class="headerlink" title="配置 Debug"></a>配置 Debug</h3><p>步骤 File-&gt;Setting-&gt;Languages &amp; Frameworks-&gt;PHP-&gt;Debug</p><p>注意<code>IDE Xdebug port</code>端口要和<code>php.ini</code>配置保持一致。</p><img src="/2019/03/19/PhpStorm-配置-Xdebug-远程调试/xdebug_set_1.png" class="[class names]" title="[width] [height] [title text [alt text]]"><h3 id="配置-Servers"><a href="#配置-Servers" class="headerlink" title="配置 Servers"></a>配置 Servers</h3><p>步骤 File-&gt;Setting-&gt;Languages &amp; Frameworks-&gt;PHP-&gt;Servers</p><img src="/2019/03/19/PhpStorm-配置-Xdebug-远程调试/xdebug_set_2.png" class="[class names]" title="[width] [height] [title text [alt text]]"><h3 id="配置-Debug-Configuer"><a href="#配置-Debug-Configuer" class="headerlink" title="配置 Debug Configuer"></a>配置 Debug Configuer</h3><p>步骤 Run-&gt;Edit Configurations-&gt;Add New Configuration</p><img src="/2019/03/19/PhpStorm-配置-Xdebug-远程调试/xdebug_set_3.png" class="[class names]" title="[width] [height] [title text [alt text]]"><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><ol><li>打断点</li><li>点击右上角小虫子图标，开启调试</li></ol><img src="/2019/03/19/PhpStorm-配置-Xdebug-远程调试/xdebug_set_4.png" class="[class names]" title="[width] [height] [title text [alt text]]"><ol start="3"><li>如果看到如下图，那么恭喜你，已经成功开启了断点调试</li></ol><img src="/2019/03/19/PhpStorm-配置-Xdebug-远程调试/xdebug_set_5.png" class="[class names]" title="[width] [height] [title text [alt text]]"><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>Q：开启<code>Debug</code>后，1分钟后调试自动终止了。<br>A：是因为<code>PHP</code>脚本默认超时时间是 1分钟，设置<code>PHP</code> 超时时间为1小时、或2小时，</p><p>设置方式：</p><ol><li>Nginx、php-fpm 情况，修改 php-fpm.conf 文件<code>request_terminate_timeout = 7200</code> </li><li>apache Module 情况，修改 httpd/conf.d/fcgid.conf 文件 <code>FcgidIOTimeout 7200</code></li></ol><p>END :-)</p><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><ul><li><a href="http://xxlegend.com/2017/05/23/PhpStorm%20Xdebug%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E5%8F%8A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/" target="_blank" rel="noopener">http://xxlegend.com/2017/05/23/PhpStorm%20Xdebug%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E5%8F%8A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;调试复杂些的项目代码，&lt;code&gt;Xdebug&lt;/code&gt; 是一把利器，本文结合自己的开发环境简讲通过&lt;code&gt;PhpStorm&lt;/code&gt;完成&lt;code&gt;Xdebug&lt;/code&gt;调试,部分原理图借鉴&lt;code&gt;xxlegend&lt;/code&gt;作者&lt;/p&gt;
&lt;h2 id=&quot;环境介绍&quot;&gt;&lt;a href=&quot;#环境介绍&quot; class=&quot;headerlink&quot; title=&quot;环境介绍&quot;&gt;&lt;/a&gt;环境介绍&lt;/h2&gt;&lt;blockquote class=&quot;pullquote [class]&quot;&gt;&lt;p&gt;本机：Windows10 + PhpStorm 2018 + Ip 192.168.10.108&lt;/p&gt;
&lt;p&gt;开发机：CentOS 6.10 + PHP 7.1 + Nginx 1.14 + Ip 192.168.10.140&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;开发方式&quot;&gt;&lt;a href=&quot;#开发方式&quot; class=&quot;headerlink&quot; title=&quot;开发方式&quot;&gt;&lt;/a&gt;开发方式&lt;/h3&gt;&lt;p&gt;一般情况开发者都是在本地开发，使用的开发环境也是本地自己搭建的，无论是在&lt;code&gt;Win&lt;/code&gt;、&lt;code&gt;Mac&lt;/code&gt;、&lt;code&gt;Linux&lt;/code&gt;三者哪一个平台开发，最终想达到的体验是尽可能和生产环境一致，如果是在&lt;code&gt;Win&lt;/code&gt;下开发，带来的代码兼容性问题时长让人难受（如：大小写问题），以至于追求&lt;code&gt;Unix&lt;/code&gt;开发是一种潮流，这可能便是&lt;code&gt;Mac&lt;/code&gt;之所以时程序员所爱的原因吧，&lt;code&gt;Win&lt;/code&gt;下要想到达此效果。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过在&lt;code&gt;Window&lt;/code&gt;下安装虚拟机，虚拟机中安装&lt;code&gt;Linxu&lt;/code&gt;系统；&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;Windows 10&lt;/code&gt;已经支持开启子系统，&lt;code&gt;Ubuntu&lt;/code&gt;子系统中安装&lt;code&gt;PHP&lt;/code&gt;开发环境；&lt;/li&gt;
&lt;li&gt;使用公司提供的公共开发机，开发机环境和所需服务都是安装好的，通过&lt;code&gt;samba&lt;/code&gt;共享目录方式，本机无环境，开发机创建一个自己的虚拟目录；&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;方法一：没有配置上&lt;code&gt;SSD&lt;/code&gt;，内存没到&lt;code&gt;4G&lt;/code&gt; 慎用 &lt;/li&gt;
&lt;li&gt;方法二：&lt;code&gt;Windows 10&lt;/code&gt; 开启子系统，在应用市场一键安装&lt;code&gt;Ubuntu&lt;/code&gt;，还是很方便的，在子系统中可以直接访问宿主机(本机)目录，使用感很方便。&lt;/li&gt;
&lt;li&gt;方法三：我公司为了开发者方便，搭建了&lt;code&gt;IP&lt;/code&gt;为&lt;code&gt;140&lt;/code&gt;的开发机，通过&lt;code&gt;samba&lt;/code&gt;创建虚拟目录，本地添加网络盘方式打开&lt;code&gt;140&lt;/code&gt;自己&lt;code&gt;Home&lt;/code&gt;开发目录；&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PhpStorm" scheme="https://dbing.github.io/categories/PhpStorm/"/>
    
    
      <category term="xdebug" scheme="https://dbing.github.io/tags/xdebug/"/>
    
  </entry>
  
  <entry>
    <title>配置双公钥完成同时对 gitee 和 github 的使用</title>
    <link href="https://dbing.github.io/2018/12/31/%E9%85%8D%E7%BD%AE%E5%8F%8C%E5%85%AC%E9%92%A5%E5%AE%8C%E6%88%90%E5%90%8C%E6%97%B6%E5%AF%B9-gitee-%E5%92%8C-github-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://dbing.github.io/2018/12/31/配置双公钥完成同时对-gitee-和-github-的使用/</id>
    <published>2018-12-31T15:02:16.000Z</published>
    <updated>2019-04-18T08:45:04.642Z</updated>
    
    <content type="html"><![CDATA[<p>问题起因背景是在本机开发时，使用 git 管理项目时，开源项目使用的是 github 托管，企业私有项目使用的是企业版码云管理，之前一直使用 git 的面板工具（mac 平台中的 Sourcetree ），不存在这样的问题，现在想改为命令的习惯使用 git 发现，本机为 gitee 项目生成了公钥，再为 github 生成公钥时，gitee 的公钥就会被覆盖，这就不能愉快的玩耍了。那么如果做到要这两个公钥并存的呢，往下走。</p><h2 id="生成-gitee-公钥"><a href="#生成-gitee-公钥" class="headerlink" title="生成 gitee 公钥"></a>生成 gitee 公钥</h2><p>生成 gitee 用的 SSH-Key<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">'xxxxx@xxx.com'</span> -f ~/.ssh/gitee_id_rsa</span><br></pre></td></tr></table></figure></p><p>tip:「<a href="mailto:xxxxx@xxx.com" target="_blank" rel="noopener">xxxxx@xxx.com</a>」替换为自己 gitee 邮箱</p><p>按照提示完成三次回车，即可生成 ssh key。通过查看 <code>~/.ssh/gitee_id_rsa.pub</code> 文件内容，获取到你的 public key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/gitee_id_rsa.pub</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCwLn0yWMfx6lNOdu58M0JYot......</span><br></pre></td></tr></table></figure><p>复制生成后的 public key，<br>添加为项目公钥：通过仓库主页 「管理」-&gt;「部署公钥管理」-&gt;「添加部署公钥」，如果需要可写权限那么需要添加到个人公钥。<br>添加为个人公钥：<a href="https://gitee.com/profile/sshkeys" target="_blank" rel="noopener">传送门</a></p><a id="more"></a><p>详细步骤可参见：</p><ul><li>gitee 生成/添加SSH公钥 <a href="https://gitee.com/help/articles/4181" target="_blank" rel="noopener">码云帮助中心</a>，</li><li>个人公钥和项目公钥区别可见：<a href="https://gitee.com/help/articles/4191#article-header1" target="_blank" rel="noopener">码云帮助中心</a></li></ul><h2 id="生成-github-公钥"><a href="#生成-github-公钥" class="headerlink" title="生成 github 公钥"></a>生成 github 公钥</h2><p>生成一个github 用的 SSH-Key<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">'xxxxx@xxx.com'</span> -f ~/.ssh/github_id_rsa</span><br></pre></td></tr></table></figure></p><p>tip:「<a href="mailto:xxxxx@xxx.com" target="_blank" rel="noopener">xxxxx@xxx.com</a>」替换为自己 github 邮箱</p><p>github 添加为个人公钥：<a href="https://github.com/settings/keys" target="_blank" rel="noopener">传送门</a></p><h2 id="创建-config-解决公钥冲突"><a href="#创建-config-解决公钥冲突" class="headerlink" title="创建 config 解决公钥冲突"></a>创建 config 解决公钥冲突</h2><p>在 ~/.ssh 目录下新建一个config文件，添加如下内容（其中Host和HostName填写git服务器的域名，IdentityFile指定私钥的路径）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># gitee</span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/gitee_id_rsa</span><br><span class="line"># github</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/github_id_rsa</span><br></pre></td></tr></table></figure></p><h2 id="测试公钥"><a href="#测试公钥" class="headerlink" title="测试公钥"></a>测试公钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@gitee.com</span><br><span class="line">Hi braem! You<span class="string">'ve successfully authenticated, but GITEE.COM does not provide shell access.</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi dbing! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>如果提示以上信息，恭喜又可以愉快的玩耍了 :)</p>]]></content>
    
    <summary type="html">
    
      通过配置 .ssh/config 文件完成对 gitee、gitlab、github...等多域下分别使用不同公钥的，达到可以在命令行中愉快的玩耍各个 git 远程仓库
    
    </summary>
    
    
      <category term="配置公钥" scheme="https://dbing.github.io/tags/%E9%85%8D%E7%BD%AE%E5%85%AC%E9%92%A5/"/>
    
  </entry>
  
</feed>
