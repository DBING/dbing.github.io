<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bing&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dbing.github.io/"/>
  <updated>2020-04-08T11:38:18.324Z</updated>
  <id>https://dbing.github.io/</id>
  
  <author>
    <name>bing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每日英语-11</title>
    <link href="https://dbing.github.io/2020/04/08/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD-11/"/>
    <id>https://dbing.github.io/2020/04/08/每日英语-11/</id>
    <published>2020-04-08T11:12:01.000Z</published>
    <updated>2020-04-08T11:38:18.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每日英语"><a href="#每日英语" class="headerlink" title="每日英语"></a>每日英语</h2><p>一直在白斩词上记英语，在3月中旬左右突然更新了，体验了新版，发现句子不见了，截止到今日也就没有按日更新句子，昨日发现可以在列表里看到已学过的词的句子，这下又可以愉快的记句子了，发现没记句子的这几天学的词都是朦朦胧的。</p><p>贴一张3月份的打卡记录：</p><p><img src="3m.jpeg" alt="3月英语打卡"></p><p>接下来句子不能停，不能停，不能停</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;每日英语&quot;&gt;&lt;a href=&quot;#每日英语&quot; class=&quot;headerlink&quot; title=&quot;每日英语&quot;&gt;&lt;/a&gt;每日英语&lt;/h2&gt;&lt;p&gt;一直在白斩词上记英语，在3月中旬左右突然更新了，体验了新版，发现句子不见了，截止到今日也就没有按日更新句子，昨日发现可以在列
      
    
    </summary>
    
      <category term="每日英语" scheme="https://dbing.github.io/categories/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="每日英语" scheme="https://dbing.github.io/tags/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>HelloKefu 开源客服系统</title>
    <link href="https://dbing.github.io/2020/04/08/HelloKefu-%E5%BC%80%E6%BA%90%E5%AE%A2%E6%9C%8D%E7%B3%BB%E7%BB%9F/"/>
    <id>https://dbing.github.io/2020/04/08/HelloKefu-开源客服系统/</id>
    <published>2020-04-08T11:02:33.000Z</published>
    <updated>2020-04-08T11:31:27.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简短背景"><a href="#简短背景" class="headerlink" title="简短背景"></a>简短背景</h2><p>截止今日（2020年04月08日）写稿六个月前，偶然一个机会拿出了两周的时间，写出了一个客服系统（纯属情怀），技术栈：<code>Laravel+Vue+Swoole</code>，效果图如下：</p><p>客服端：</p><p><img src="./serve.png" alt="客服端"></p><p>访客端：</p><p><img src="./client.png" alt="访客端"></p><p>设计最让自己感觉满意的地方再于，<code>访客</code>(客户端)于<code>客服</code>(服务端)通过事件机制解耦了复杂的代码，两种消息机制(<code>Mutation</code>和<code>Action</code>)直接对应<code>Vux</code>中<code>Mutation</code>和<code>Action</code>相应方法，从而客户端一行代码直接触发<code>Server</code>端对应的<code>Event</code>，服务端打包相应的消息直接调用对应的<code>Mutation</code>或<code>Action</code>。</p><p>让通信方式更简单。<code>Vue</code>和<code>Laravel</code>之间通过<code>Api</code>的方式通信。</p><p>因时间安排原因，放弃此项目不再维护。</p><h2 id="Repo-地址"><a href="#Repo-地址" class="headerlink" title="Repo 地址"></a>Repo 地址</h2><p><a href="https://github.com/dbing/hellokefu/" target="_blank" rel="noopener">hellokefu</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简短背景&quot;&gt;&lt;a href=&quot;#简短背景&quot; class=&quot;headerlink&quot; title=&quot;简短背景&quot;&gt;&lt;/a&gt;简短背景&lt;/h2&gt;&lt;p&gt;截止今日（2020年04月08日）写稿六个月前，偶然一个机会拿出了两周的时间，写出了一个客服系统（纯属情怀），技术栈：&lt;co
      
    
    </summary>
    
      <category term="随笔" scheme="https://dbing.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Hellokefu" scheme="https://dbing.github.io/tags/Hellokefu/"/>
    
  </entry>
  
  <entry>
    <title>Mac 常用快捷键</title>
    <link href="https://dbing.github.io/2020/04/06/Mac-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://dbing.github.io/2020/04/06/Mac-快捷键/</id>
    <published>2020-04-06T04:59:20.000Z</published>
    <updated>2020-04-08T11:05:54.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h2><ul><li>command + shift + 3 ：全屏截屏</li><li>command + shift + 4 ：选定区域截屏</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li>command + tab ：应用间切换</li><li>command + shift + u ：使用工具</li></ul><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><ul><li>control + a : 移动至行首</li><li>control + e : 移动至行尾</li></ul><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><ul><li>command + 0 : 打开文件</li><li>command + option + l : 打开下载</li><li>command + c : 复制</li><li>command + v : 粘贴</li><li>command + alt + v : 移动</li><li>command + alt + ← ：删除文件（Tab键确认、空格键确认删除）</li></ul><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><ul><li>command + shift + { ：上个标签页</li><li>command + shift + } ：下个标签页</li><li>command + alt + ← ：上一个标签</li><li>command + n ：新开一个标签</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;截屏&quot;&gt;&lt;a href=&quot;#截屏&quot; class=&quot;headerlink&quot; title=&quot;截屏&quot;&gt;&lt;/a&gt;截屏&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;command + shift + 3 ：全屏截屏&lt;/li&gt;
&lt;li&gt;command + shift + 4 ：选定区域截屏&lt;/
      
    
    </summary>
    
      <category term="随笔" scheme="https://dbing.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Mac" scheme="https://dbing.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Electron 专注于桌面应用开发</title>
    <link href="https://dbing.github.io/2020/04/03/Electron-%E4%B8%93%E6%B3%A8%E4%BA%8E%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    <id>https://dbing.github.io/2020/04/03/Electron-专注于桌面应用开发/</id>
    <published>2020-04-03T10:46:12.000Z</published>
    <updated>2020-04-03T10:53:32.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h2><p>Electron 可以让你使用纯 JavaScript 调用丰富的原生(操作系统) APIs 来创造桌面应用。 你可以把它看作一个 Node. js 的变体，它专注于桌面应用而不是 Web 服务器端。</p><p>这不意味着 Electron 是某个图形用户界面（GUI）库的 JavaScript 版本。 相反，Electron 使用 web 页面作为它的 GUI，所以你能把它看作成一个被 JavaScript 控制的，精简版的 Chromium 浏览器。</p><p>以上是摘自<code>Electron</code>官方文档对其的描述，望以后有时间开发也给桌面应用小程序，这里<code>Mark</code>一下，感兴趣可以翻阅其<a href="https://www.electronjs.org/docs/tutorial/first-app" target="_blank" rel="noopener">官网文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Electron&quot;&gt;&lt;a href=&quot;#Electron&quot; class=&quot;headerlink&quot; title=&quot;Electron&quot;&gt;&lt;/a&gt;Electron&lt;/h2&gt;&lt;p&gt;Electron 可以让你使用纯 JavaScript 调用丰富的原生(操作系统) APIs
      
    
    </summary>
    
      <category term="新事物" scheme="https://dbing.github.io/categories/%E6%96%B0%E4%BA%8B%E7%89%A9/"/>
    
    
      <category term="Electron" scheme="https://dbing.github.io/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>Vim 基础篇</title>
    <link href="https://dbing.github.io/2020/03/26/Vim-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>https://dbing.github.io/2020/03/26/Vim-基础篇/</id>
    <published>2020-03-26T11:10:39.000Z</published>
    <updated>2020-04-07T10:11:34.999Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="随笔" scheme="https://dbing.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Vim" scheme="https://dbing.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Linux du 命令</title>
    <link href="https://dbing.github.io/2020/03/26/Linux-du-%E5%91%BD%E4%BB%A4/"/>
    <id>https://dbing.github.io/2020/03/26/Linux-du-命令/</id>
    <published>2020-03-26T02:23:14.000Z</published>
    <updated>2020-04-03T11:14:10.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>以下执行命令，均在如下目录位置执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  gitlab <span class="built_in">pwd</span></span><br><span class="line">/usr/<span class="built_in">local</span>/gitlab</span><br></pre></td></tr></table></figure><ul><li>统计当前目录的大小</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  gitlab du  -sh</span><br><span class="line">21G     .</span><br></pre></td></tr></table></figure><ul><li>统计当前目录所有下文件和文件夹大小</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  gitlab du * -sh</span><br><span class="line">8.0K    docker-compose.yml</span><br><span class="line">20K     gitlab-certs-backup</span><br><span class="line">20G     gitlab-data</span><br><span class="line">16K     gitlab-sh</span><br><span class="line">633M    postgresql-data</span><br><span class="line">3.4M    redis-data</span><br></pre></td></tr></table></figure><ul><li>查找当前目录下一级目录中大小单位在G的目录并排序</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  gitlab du -h --max-depth=1 |grep G |sort</span><br><span class="line">20G     ./gitlab-data</span><br><span class="line">21G     .</span><br></pre></td></tr></table></figure><p><code>--max-depth=1</code> 限制一级目录，如果单位是<code>T</code>或<code>M</code>，更改参数即可</p><ul><li>查找当前目录下一级目录中大小上M的目录并倒排序</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  gitlab du -h --max-depth=1 |grep <span class="string">'M'</span> |sort -nr</span><br><span class="line">633M    ./postgresql-data</span><br><span class="line">3.4M    ./redis-data</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;&lt;p&gt;以下执行命令，均在如下目录位置执行&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="Neox" scheme="https://dbing.github.io/categories/Neox/"/>
    
    
      <category term="du" scheme="https://dbing.github.io/tags/du/"/>
    
  </entry>
  
  <entry>
    <title>Composer 安装私有包</title>
    <link href="https://dbing.github.io/2020/03/26/Composer-%E5%AE%89%E8%A3%85%E7%A7%81%E6%9C%89%E5%8C%85/"/>
    <id>https://dbing.github.io/2020/03/26/Composer-安装私有包/</id>
    <published>2020-03-26T02:20:34.000Z</published>
    <updated>2020-03-26T04:59:37.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>我司一个项目这里简称：<code>神居</code>，分为<code>C</code>端（「代号：mooncake」），“平台端”「代号：internal」,<code>B</code>端「代号：agent」，“任务端”「代号：script」，为了保护公司隐私，这里不方便介绍每个项目处理的业务，你只需要知道的是每个代号代表一个独立运行的项目，那么这些项目又如果做到代码的复用（Library/Model）呢，且需要做到每个项目可独立迭代更新。我们现采用的方式就是<code>composer</code>管理私有包的方式。</p><p>这里也有一篇描述<a href="https://barryvanveen.nl/blog/55-installing-a-private-package-with-composer" target="_blank" rel="noopener"><code>Composer</code>安装私有PHP软件包</a>文章，以下我部分步骤翻译自这篇文章。</p><h2 id="Composer安装私有PHP软件包"><a href="#Composer安装私有PHP软件包" class="headerlink" title="Composer安装私有PHP软件包"></a><code>Composer</code>安装私有PHP软件包</h2><p>使用<code>Composer</code>安装私有PHP软件包。首先我们需要在<code>composer.json</code>文件中进行一些额外的配置，然后设置SSH密钥。按照以下3个简单步骤进行操作</p><h3 id="1-指向Git仓库"><a href="#1-指向Git仓库" class="headerlink" title="1. 指向Git仓库"></a>1. 指向Git仓库</h3><p>更新composer.json并添加一个存储库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;repositories&quot;:[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;type&quot;: &quot;vcs&quot;,</span><br><span class="line">        &quot;url&quot;: &quot;git@github.com:barryvanveen/secret.git&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这里<code>url</code>，可以是<code>gitlab</code>或者其他地址（可别犯傻）。</p><h3 id="2-创建一个SSH密钥"><a href="#2-创建一个SSH密钥" class="headerlink" title="2.创建一个SSH密钥"></a>2.创建一个SSH密钥</h3><p>在要安装软件包的计算机上创建一个SSH密钥，如果感觉自己既要配置<code>gitlab</code>又要配置<code>github</code>等等其他的<code>SSH</code>秘钥，如何共存使用，可以参考我的这篇文章<a href="/2018/12/31/%E9%85%8D%E7%BD%AE%E5%8F%8C%E5%85%AC%E9%92%A5%E5%AE%8C%E6%88%90%E5%90%8C%E6%97%B6%E5%AF%B9-gitee-%E5%92%8C-github-%E7%9A%84%E4%BD%BF%E7%94%A8/">传送门</a>。</p><p>如果您在开发机器上工作，则可能要将SSH密钥添加到GitHub / BitBucket / GitLab帐户。这样就可以访问您帐户有权访问的所有私有存储库。</p><p><a href="https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/" target="_blank" rel="noopener">将SSH密钥添加到GitHub帐户</a><br><a href="https://confluence.atlassian.com/bitbucket/set-up-an-ssh-key-728138079.html#SetupanSSHkey-#installpublickeyStep3.AddthepublickeytoyourBitbucketsettings" target="_blank" rel="noopener">将SSH密钥添加到BitBucket帐户</a><br><a href="https://docs.gitlab.com/ee/gitlab-basics/create-your-ssh-keys.html" target="_blank" rel="noopener">将SSH密钥添加到GitLab帐户</a></p><p>如果要配置部署服务器，则最好配置访问密钥或部署密钥。访问密钥仅提供对单个存储库的访问，因此可以进行更具体的访问管理。</p><p><a href="https://developer.github.com/v3/guides/managing-deploy-keys/#deploy-keys" target="_blank" rel="noopener">将部署密钥添加到GitHub存储库</a><br><a href="https://confluence.atlassian.com/bitbucket/use-deployment-keys-294486051.html" target="_blank" rel="noopener">将访问密钥添加到BitBucket存储库</a><br><a href="https://docs.gitlab.com/ee/ssh/#deploy-keys" target="_blank" rel="noopener">将部署密钥添加到GitLab存储库</a></p><p>你肯能会问，开发机器和部署服务器使用同样的<code>SSH</code>秘钥不就完事了嘛，搞这么麻烦干啥，因为开发机器的秘钥对<code>repo</code>拥有写的权限，而部署服务器只需拥有<code>repo</code>的读权限即可了，还是建议共用的做法。</p><h3 id="3-运行作曲家"><a href="#3-运行作曲家" class="headerlink" title="3.运行作曲家"></a>3.运行作曲家</h3><p>现在只需<code>composer require</code>或<code>composer install</code>像往常一样打包。</p><blockquote><p>这里值得提一下 <code>composer require</code> 指定版本时，会同时更新 composer.json 中对应的版本号，<code>composer update</code> 则不会</p></blockquote><p><strong>警告：向已知主机添加SSH指纹</strong></p><p>首次在新主机名上使用SSH密钥时，它将显示如下警告：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'123.123.123.123 (123.123.123.123)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is a1:b2:c3:d4:e5:f6:6f:5e:4d:3c:2b:1a:00:11:22:33.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure><p>这是额外的保护层，可防止您错误地连接到未知主机。但是，如果要使用SSH密钥自动执行任务，则确实会带来一些问题。</p><p>这就是为什么我们要手动触发此警告，并避免将来再次弹出它。可以使用以下命令完成此操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>当然，您应该用<code>repo</code>私有存储库的主机名替换掉<a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>`。此命令将调用上面列出的警告。您可以使用GitHub / BitBucket / GitLab帐户中的指纹列表来验证指纹。</p><p>确认此警告后，SSH指纹将被添加到已知主机列表中，这将防止警告再次弹出。</p><h2 id="案例分享"><a href="#案例分享" class="headerlink" title="案例分享"></a>案例分享</h2><p>以<code>mooncake</code>为例，一下是相关的<code>composer.json</code>配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&quot;require&quot;: &#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  &quot;neox/lib&quot;: &quot;2.9.0&quot;,</span><br><span class="line">  &quot;neox/model&quot;: &quot;1.6.1&quot;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&quot;repositories&quot;: &#123;</span><br><span class="line">  &quot;neox-lib&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;vcs&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;git@git.neox-inc.com:be-sushi/neox-library.git&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;neox-model&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;vcs&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;git@git.neox-inc.com:be-sushi/neox-model.git&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="使用私有库的开发技巧"><a href="#使用私有库的开发技巧" class="headerlink" title="使用私有库的开发技巧"></a>使用私有库的开发技巧</h2><p>抛出问题：我们晓得私有库都有独立的<code>repo</code>，还以<code>mooncake</code>项目为例那我们在本地开发需要改动私有库<code>lib</code>或<code>model</code>下代码，那么改完后如何测试？私有库放哪里？是直接动手改<code>vendor/neox/lib</code>，还是改独立目录下与<code>mooncake</code>项目平级<code>lib</code>库代码（假设我们将私有库<code>lib</code>克隆到与<code>mooncake</code>平级目录），如果改的是后者如何使其改过的代码生效呢？好了~不买官司了。接下分享一下我采用的方式：</p><p><strong>方案一</strong><br>私有仓库<code>lib</code>和项目<code>mooncake</code>平级（不是必须），配置<code>composer</code>达到指定使用私有库<code>lib</code>分支代码，修改代码以后需要把修改后的代码<code>require</code>进<code>vendor</code>目录下，我们可以<code>composer.json</code>配置达到从本地指定私有<code>lib</code>目录，将指定分支代码<code>require</code>进<code>vendor</code>，而不是从<code>gitlab</code>下载。</p><p>缺点：每次改动私有的<code>lib</code>库代码，都需要<code>composer install</code>，还需先删除<code>composer.lock</code>文件再<code>install</code>。刚一开始我采用的这种方案，你会发现每次的<code>install</code>，都要执行一堆没用的（效率太低，不推荐）。以下是这种方案我的<code>composer.json</code>配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&quot;require&quot;: &#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  &quot;neox/lib&quot;: &quot;dev-feature/20200323-db-rename-namespace&quot;,</span><br><span class="line">  &quot;neox/model&quot;: &quot;dev-feature/20200323-db-rename-namespace&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&quot;repositories&quot;: &#123;</span><br><span class="line">  &quot;neox-lib&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;vcs&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;../lib&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;neox-model&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;vcs&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;../model&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：实际<code>lib</code>和<code>model</code>代码分支名是<code>feature/20200323-db-rename-namespace</code></p></blockquote><p><strong>方案二</strong></p><p>直接修改<code>vendor</code>目录下的<code>lib</code>或<code>model</code>，修改前可以通过<code>git</code>分支自行创建和切换分支以维护不同的代码，将此目录下的代码直接作为<code>lib</code>和<code>model</code>的本地开发仓库（其实本来也就是了）。这种方式改完代码及时生效无需执行<code>composer</code>任何命令，因为<code>vendor</code>下的代码包本来也就已经被处理好了<code>autolaod</code>。此种方式也是我现在采用的方法，推荐。</p><p>最后贴一下，我司私有库的<code>composer.json</code>配置图（因为隐私我做了部分模糊）：</p><p>私有库<code>Lib</code>:<br><img src="/2020/03/26/Composer-安装私有包/lib-u.png"></p><p>私有库<code>Model</code>:</p><img src="/2020/03/26/Composer-安装私有包/model-u.png"><p>最终被<code>composer</code>处理后的<code>psr-4</code>目录映射形式：</p><img src="/2020/03/26/Composer-安装私有包/psr-4-u.png"><h2 id="好文同享"><a href="#好文同享" class="headerlink" title="好文同享"></a>好文同享</h2><ul><li><a href="https://segmentfault.com/a/1190000014948542#item-4" target="_blank" rel="noopener">segmentfault composer 原理</a></li><li><a href="https://github.com/LeoYang90/laravel-source-analysis/blob/master/PHP%20Composer%E2%80%94%E2%80%94%20%E5%88%9D%E5%A7%8B%E5%8C%96%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.md" target="_blank" rel="noopener">github composer 原理</a></li><li><a href="https://barryvanveen.nl/blog/55-installing-a-private-package-with-composer" target="_blank" rel="noopener">Composer 创建私有库-英文</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;项目背景&quot;&gt;&lt;a href=&quot;#项目背景&quot; class=&quot;headerlink&quot; title=&quot;项目背景&quot;&gt;&lt;/a&gt;项目背景&lt;/h2&gt;&lt;p&gt;我司一个项目这里简称：&lt;code&gt;神居&lt;/code&gt;，分为&lt;code&gt;C&lt;/code&gt;端（「代号：mooncake」），“平
      
    
    </summary>
    
      <category term="Neox" scheme="https://dbing.github.io/categories/Neox/"/>
    
    
      <category term="Composer" scheme="https://dbing.github.io/tags/Composer/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code 中值得推荐的扩展</title>
    <link href="https://dbing.github.io/2020/03/20/Visual-Studio-Code-%E4%B8%AD%E5%80%BC%E5%BE%97%E6%8E%A8%E8%8D%90%E7%9A%84%E6%89%A9%E5%B1%95/"/>
    <id>https://dbing.github.io/2020/03/20/Visual-Studio-Code-中值得推荐的扩展/</id>
    <published>2020-03-20T09:53:30.000Z</published>
    <updated>2020-03-26T02:29:58.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="推荐的扩展"><a href="#推荐的扩展" class="headerlink" title="推荐的扩展"></a>推荐的扩展</h2><ul><li>vscode-icons</li><li>Bracket Pair Colorizer</li><li>Path Autocomplete</li><li><a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="noopener">Settings Sync</a></li></ul><blockquote><p>Previously known as Visual Studio Code Settings Sync</p></blockquote><p><code>Visual Studio Code</code>设置同步，用于在多台设备下快速同步所有配置。</p><p>快捷键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Upload Key : Shift + Alt + U</span><br><span class="line">2. Download Key : Shift + Alt + D</span><br><span class="line"></span><br><span class="line">(on macOS: Shift + Option + U / Shift + Option + D)</span><br></pre></td></tr></table></figure><ul><li>Path Autocomplete</li><li>filesize</li></ul><h2 id="主题扩展"><a href="#主题扩展" class="headerlink" title="主题扩展"></a>主题扩展</h2><ul><li>One Dark Pro</li><li>Brackets Light Pro</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;推荐的扩展&quot;&gt;&lt;a href=&quot;#推荐的扩展&quot; class=&quot;headerlink&quot; title=&quot;推荐的扩展&quot;&gt;&lt;/a&gt;推荐的扩展&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;vscode-icons&lt;/li&gt;
&lt;li&gt;Bracket Pair Colorizer&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="开发者工具" scheme="https://dbing.github.io/categories/%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Visual Studio Code" scheme="https://dbing.github.io/tags/Visual-Studio-Code/"/>
    
  </entry>
  
  <entry>
    <title>不同语言系统下Accept-Language引发的小问题</title>
    <link href="https://dbing.github.io/2020/03/18/%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E7%B3%BB%E7%BB%9F%E4%B8%8BAccept-Language%E5%BC%95%E5%8F%91%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>https://dbing.github.io/2020/03/18/不同语言系统下Accept-Language引发的小问题/</id>
    <published>2020-03-18T08:34:31.000Z</published>
    <updated>2020-03-19T02:37:05.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>不同语言环境下，浏览器请求头携带的<code>Accept-Language</code>值不一样的，导致的部分用户下默认显示「繁体中文」bug</p><p>我的中文环境：<br><code>Accept-Language: en,zh-CN;q=0.9,zh;q=0.8</code></p><p>同事的英文环境：<br><code>Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7,ru;q=0.6,ja;q=0.5,es;q=0.4,fr;q=0.3,de;q=0.2,mt;q=0.1,pl;q=0.1,lb;q=0.1</code></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>调整代码判断优先逻辑解决此问题，代码再此不贴出了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题原因&quot;&gt;&lt;a href=&quot;#问题原因&quot; class=&quot;headerlink&quot; title=&quot;问题原因&quot;&gt;&lt;/a&gt;问题原因&lt;/h2&gt;&lt;p&gt;不同语言环境下，浏览器请求头携带的&lt;code&gt;Accept-Language&lt;/code&gt;值不一样的，导致的部分用户下默认显
      
    
    </summary>
    
      <category term="Neox" scheme="https://dbing.github.io/categories/Neox/"/>
    
    
      <category term="Neox" scheme="https://dbing.github.io/tags/Neox/"/>
    
  </entry>
  
  <entry>
    <title>CPU 上下文切换是什么意思?</title>
    <link href="https://dbing.github.io/2020/03/13/CPU-%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D%E4%B8%8A/"/>
    <id>https://dbing.github.io/2020/03/13/CPU-上下文切换是什么意思上/</id>
    <published>2020-03-13T04:36:50.000Z</published>
    <updated>2020-03-13T05:25:21.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CPU-上下文"><a href="#CPU-上下文" class="headerlink" title="CPU 上下文"></a>CPU 上下文</h2><p>Linux 是一个多任务操作系统，它支持远大于 CPU 数量的任务同时运行。当然，这些任务实际上并不是真的在同时运行，而是因为系统在很短的时间内，将 CPU 轮流 分配给它们，每个任务运行前，CPU 都需要知道任务从哪里加载、又从哪里开始运行，而这些都是由系统事先帮它设置在 CPU 寄存器和程序计数器(Program Counter，PC)</p><p>CPU 寄存器：是 CPU 内置的容量小、但速度极快的内存<br>程序计数器：是用来存储 CPU 正在执行的指令位置、或者即将执行的下一条指令位置。</p><p>CPU 在运行任何任务前，必须的依赖环境也即是CPU 上下文。</p><h2 id="CPU-上下文切换"><a href="#CPU-上下文切换" class="headerlink" title="CPU 上下文切换"></a>CPU 上下文切换</h2><p>CPU 上下文切换，就 是先把前一个任务的 CPU 上下文(也就是 CPU 寄存器和程序计数器)保存起来，然后加 载新任务的上下文到这些寄存器和程序计数器，最后再跳转到程序计数器所指的新位置， 运行新任务。</p><p>根据任务的不同，CPU 上下文切换又可分为，进程上下文切换、线程上下文切换、中断上下文切换。</p><a id="more"></a><h3 id="进程上下文切换"><a href="#进程上下文切换" class="headerlink" title="进程上下文切换"></a>进程上下文切换</h3><img src="/2020/03/13/CPU-上下文切换是什么意思上/1.png"><p>Linux 按照特权等级，把进程的运行空间分为内核空间和用户空间，分别对应着下图中， CPU 特权等级的 Ring 0 和 Ring 3。</p><p>内核空间(Ring 0)具有最高权限，可以直接访问所有资源;<br>用户空间(Ring 3)只能访问受限资源，不能直接访问内存等硬件设备，必须通过系统 调用陷入到内核中，才能访问这些特权资源。</p><blockquote><p>进程既可以在用户空间运行，又可以在内核空间中运行。进程在 用户空间运行时，被称为进程的用户态，而陷入内核空间的时候，被称为进程的内核态。</p></blockquote><p>进程是由内核来管理和调度的，进程的切换只能发生在内核态。所 以，进程的上下文不仅包括了虚拟内存、栈、全局变量等用户空间的资源，还包括了内核 堆栈、寄存器等内核空间的状态。</p><p>如下图所示，保存上下文和恢复上下文的过程并不是“免费”的，需要内核在 CPU 上运行 才能完成。</p><img src="/2020/03/13/CPU-上下文切换是什么意思上/2.png"><p>根据 Tsuna 的测试报告，每次上下文切换都需要几十纳秒到数微秒的 CPU 时间。这个时 间还是相当可观的，特别是在进程上下文切换次数较多的情况下，很容易导致 CPU 将大量 时间耗费在寄存器、内核栈以及虚拟内存等资源的保存和恢复上，进而大大缩短了真正运 行进程的时间。这也正是上一节中我们所讲的，导致平均负载升高的一个重要因素。</p><h3 id="线程上下文切换"><a href="#线程上下文切换" class="headerlink" title="线程上下文切换"></a>线程上下文切换</h3><p>线程与进程最大的区别在于，线程是调度的基本单位，而进程则是资源拥有的基本单位。 说白了，所谓内核中的任务调度，实际上的调度对象是线程;而进程只是给线程提供了虚 拟内存、全局变量等资源。所以，对于线程和进程，我们可以这么理解:</p><ul><li>当进程只有一个线程时，可以认为进程就等于线程。</li><li>当进程拥有多个线程时，这些线程会共享相同的虚拟内存和全局变量等资源。这些资源 在上下文切换时是不需要修改的。</li></ul><blockquote><p>线程也有自己的私有数据，比如栈和寄存器等，这些在上下文切换时也是需要保存的。</p></blockquote><p>这么一来，线程的上下文切换其实就可以分为两种情况:</p><p>第一种， 前后两个线程属于不同进程。此时，因为资源不共享，所以切换过程就跟进程上 下文切换是一样。</p><p>第二种，前后两个线程属于同一个进程。此时，因为虚拟内存是共享的，所以在切换时， 虚拟内存这些资源就保持不动，只需要切换线程的私有数据、寄存器等不共享的数据。</p><p>到这里你应该也发现了，虽然同为上下文切换，但同进程内的线程切换，要比多进程间的 切换消耗更少的资源，而这，也正是多线程代替多进程的一个优势。</p><h3 id="中断上下文切换"><a href="#中断上下文切换" class="headerlink" title="中断上下文切换"></a>中断上下文切换</h3><p>除了前面两种上下文切换，还有一个场景也会切换 CPU 上下文，那就是中断。</p><p>为了快速响应硬件的事件，中断处理会打断进程的正常调度和执行，转而调用中断处理程 序，响应设备事件。而在打断其他进程时，就需要将进程当前的状态保存下来，这样在中 断结束后，进程仍然可以从原来的状态恢复运行。</p><p>跟进程上下文不同，中断上下文切换并不涉及到进程的用户态。所以，即便中断过程打断 了一个正处在用户态的进程，也不需要保存和恢复这个进程的虚拟内存、全局变量等用户 态资源。中断上下文，其实只包括内核态中断服务程序执行所必需的状态，包括 CPU 寄存 器、内核堆栈、硬件中断参数等。</p><p>对同一个 CPU 来说，中断处理比进程拥有更高的优先级，所以中断上下文切换并不会与 进程上下文切换同时发生。同样道理，由于中断会打断正常进程的调度和执行，所以大部 分中断处理程序都短小精悍，以便尽可能快的执行结束。</p><p>另外，跟进程上下文切换一样，中断上下文切换也需要消耗 CPU，切换次数过多也会耗费 大量的 CPU，甚至严重降低系统的整体性能。所以，当你发现中断次数过多时，就需要注 意去排查它是否会给你的系统带来严重的性能问题。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>CPU 上下文切换，是保证 Linux 系统正常工作的核心功能之一，一般情况下不需要我们 特别关注。</li><li>但过多的上下文切换，会把 CPU 时间消耗在寄存器、内核栈以及虚拟内存等数据的保 存和恢复上，从而缩短进程真正运行的时间，导致系统的整体性能大幅下降。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>整理自「Linux 性能优化实战」</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CPU-上下文&quot;&gt;&lt;a href=&quot;#CPU-上下文&quot; class=&quot;headerlink&quot; title=&quot;CPU 上下文&quot;&gt;&lt;/a&gt;CPU 上下文&lt;/h2&gt;&lt;p&gt;Linux 是一个多任务操作系统，它支持远大于 CPU 数量的任务同时运行。当然，这些任务实际上并不是真的在同时运行，而是因为系统在很短的时间内，将 CPU 轮流 分配给它们，每个任务运行前，CPU 都需要知道任务从哪里加载、又从哪里开始运行，而这些都是由系统事先帮它设置在 CPU 寄存器和程序计数器(Program Counter，PC)&lt;/p&gt;
&lt;p&gt;CPU 寄存器：是 CPU 内置的容量小、但速度极快的内存&lt;br&gt;程序计数器：是用来存储 CPU 正在执行的指令位置、或者即将执行的下一条指令位置。&lt;/p&gt;
&lt;p&gt;CPU 在运行任何任务前，必须的依赖环境也即是CPU 上下文。&lt;/p&gt;
&lt;h2 id=&quot;CPU-上下文切换&quot;&gt;&lt;a href=&quot;#CPU-上下文切换&quot; class=&quot;headerlink&quot; title=&quot;CPU 上下文切换&quot;&gt;&lt;/a&gt;CPU 上下文切换&lt;/h2&gt;&lt;p&gt;CPU 上下文切换，就 是先把前一个任务的 CPU 上下文(也就是 CPU 寄存器和程序计数器)保存起来，然后加 载新任务的上下文到这些寄存器和程序计数器，最后再跳转到程序计数器所指的新位置， 运行新任务。&lt;/p&gt;
&lt;p&gt;根据任务的不同，CPU 上下文切换又可分为，进程上下文切换、线程上下文切换、中断上下文切换。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://dbing.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://dbing.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Anaconda 常用命令</title>
    <link href="https://dbing.github.io/2020/03/13/Anaconda-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://dbing.github.io/2020/03/13/Anaconda-常用命令/</id>
    <published>2020-03-13T04:15:13.000Z</published>
    <updated>2020-03-13T04:35:20.693Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Anaconda-是什么"><a href="#Anaconda-是什么" class="headerlink" title="Anaconda 是什么"></a>Anaconda 是什么</h2><blockquote><p>Anaconda Enterprise supports your organization no matter the size, easily scaling from a single user on one laptop to thousands of machines. No headaches, no IT nightmares.</p></blockquote><h2 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h2><h3 id="查看全部环境"><a href="#查看全部环境" class="headerlink" title="查看全部环境"></a>查看全部环境</h3><p>conda env -h</p><p>conda create –name your_env_name</p><h3 id="创建制定python版本的环境"><a href="#创建制定python版本的环境" class="headerlink" title="创建制定python版本的环境"></a>创建制定python版本的环境</h3><p>conda create –name your_env_name python=2.7<br>conda create –name your_env_name python=3<br>conda create –name your_env_name python=3.5</p><h3 id="创建包含某些包的环境"><a href="#创建包含某些包的环境" class="headerlink" title="创建包含某些包的环境"></a>创建包含某些包的环境</h3><p>conda create –name your_env_name numpy scipy</p><h3 id="创建指定python版本下包含某些包的环境"><a href="#创建指定python版本下包含某些包的环境" class="headerlink" title="创建指定python版本下包含某些包的环境"></a>创建指定python版本下包含某些包的环境</h3><p>conda create –name your_env_name python=3.5 numpy scipy</p><h3 id="列举当前所有环境"><a href="#列举当前所有环境" class="headerlink" title="列举当前所有环境"></a>列举当前所有环境</h3><p>conda info –envs<br>conda env list</p><h3 id="进入某个环境"><a href="#进入某个环境" class="headerlink" title="进入某个环境"></a>进入某个环境</h3><p>activate  your_env_name</p><h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><p>deactivate your_env_name</p><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p>conda create –name new_env_name –clone old_env_name </p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>conda remove –name your_env_name –all</p><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><h3 id="列举当前活跃环境下的所有包"><a href="#列举当前活跃环境下的所有包" class="headerlink" title="列举当前活跃环境下的所有包"></a>列举当前活跃环境下的所有包</h3><p>conda list</p><h3 id="列举一个非当前活跃环境下的所有包"><a href="#列举一个非当前活跃环境下的所有包" class="headerlink" title="列举一个非当前活跃环境下的所有包"></a>列举一个非当前活跃环境下的所有包</h3><p>conda list -n your_env_name</p><h3 id="为指定环境安装某个包"><a href="#为指定环境安装某个包" class="headerlink" title="为指定环境安装某个包"></a>为指定环境安装某个包</h3><p>conda install -n env_name package_name</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -n my-opencv pytorch=1.4.0 torchvision -c pytorch</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Anaconda-是什么&quot;&gt;&lt;a href=&quot;#Anaconda-是什么&quot; class=&quot;headerlink&quot; title=&quot;Anaconda 是什么&quot;&gt;&lt;/a&gt;Anaconda 是什么&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Anaconda Enterpri
      
    
    </summary>
    
    
      <category term="conda" scheme="https://dbing.github.io/tags/conda/"/>
    
  </entry>
  
  <entry>
    <title>2018-2019年-面试经历-上</title>
    <link href="https://dbing.github.io/2020/03/11/2018-2019%E5%B9%B4-%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86-%E4%B8%8A/"/>
    <id>https://dbing.github.io/2020/03/11/2018-2019年-面试经历-上/</id>
    <published>2020-03-11T10:10:33.000Z</published>
    <updated>2020-03-11T10:32:00.860Z</updated>
    
    <content type="html"><![CDATA[<h2 id="智众医疗"><a href="#智众医疗" class="headerlink" title="智众医疗"></a>智众医疗</h2><ol><li>自我介绍</li><li>MySQL 优化，常见的索引优化的方式</li><li>阿里云的 RDS 报 IOPS 过高（使用到索引了）</li><li>除了用 Redis 做缓存还用到了什么？（消息队列和锁，讲一下）</li><li>讲一下你的比较顺畅的一个工作流程</li><li>有一个接口，用户反馈很慢？</li><li>你们是怎么监控接口的？</li><li>docker 的原理？</li><li>如何优化镜像的打包速度和大小</li><li>讲一下个人是怎么成长的？</li><li>谈谈你对 MySQL 的优化</li><li>在创建 MySQL 索引时你是如何考虑的？</li><li>Btree 和 红黑树的区别</li><li>你在生产环境是如何部署任务队列的？</li><li>Laravel 中你认为哪些比较好的地方</li><li>ELK 有没有了解过？</li></ol><h2 id="韩创科技"><a href="#韩创科技" class="headerlink" title="韩创科技"></a>韩创科技</h2><h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><ol><li>最后一道笔试题</li><li>3千万的网站做个用户消息，用户读取后标记已读，请问你该如何设计。</li><li>Redis 的二进制存储，Redis 以及 Redis 存储结构以及 Redis 更高逼格的应用。</li><li>Elasticsearch 你再什么场景下使用的，怎么使用的。数据量级别是多少。</li><li>阿里云的开发搜索，出现延迟或空白现象有没有遇到过</li><li>当你下面的技术人员与产品发生了冲突，你会怎么做？</li><li>Kafka 有没有应用过，或是跑过 Demo</li><li>Redis 下 count 函数有没有了解</li></ol><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><ol><li>Composer 自动加载原理</li><li>队列任务，单机消费处理不过来，多消费者如何做？</li><li>网站代码发布更新，如果做到不影响正常访问的用户</li><li>你是如何在三台或更多台生产服务器发布代码？</li><li>谈谈你对 MySQL 分区、分表的理解。</li><li>数据是如何在磁盘分布的。</li><li>使用主键查询与普通索引查询的区别。</li></ol><h2 id="乐贝"><a href="#乐贝" class="headerlink" title="乐贝"></a>乐贝</h2><h3 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h3><ol><li>Elasticsearch 下做查询或统计为什么这么快，谈谈你对它的理解。</li><li>谈谈你做过的最成熟的一个项目，你是怎么架构的。</li></ol><a id="more"></a><h3 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h3><ol><li>PHP 中有哪些常量？</li><li>PHP 的设计模式有了解吗？手写一个单例模式，这个代码在 swoole下运行有问题吗？如果有会有哪些问题？</li><li>__call  是什么？</li><li>Redis 如何防止高并发下，下单导致的问题</li><li>Laravel 中的 event 怎么用？</li><li>lua 有了解过吗？</li><li>Laravel 中懒加载是什么原理？Laravel 下加载扩展原理是什么？</li><li>Laravel 有一个扩展包，现在不满足我的业务，需要做修改你怎么做。</li><li>有了解 Http 协议吗？Http 协议分为哪个部分，Method 发生在哪个阶段，Post 传值在哪个层，Get传值在哪个层。</li></ol><h2 id="字节跳动"><a href="#字节跳动" class="headerlink" title="字节跳动"></a>字节跳动</h2><ol><li>504具体原因</li><li>最有代表性的一个项目，简述下使用的技术栈</li><li>PHP7的新特性</li><li>简述下 nginx 比 apache 优秀的原因</li><li>简述下 nginx 进程模型和 fastcgi 模型区别</li><li>mysql 事物4中隔离级别以及，默认隔离级别</li><li>死锁原因</li><li>索引应该注意哪些？</li><li>sql 优化具体有哪些</li><li>docker 下日志怎么管理</li><li>explain 优化sql 看什么指标参数</li><li>离职原因</li><li>gorouting 原理</li></ol><h3 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h3><ol><li>一共有10层楼梯，人每次可以走1-2步，一共有多少种走法</li></ol><h2 id="亦诊医疗"><a href="#亦诊医疗" class="headerlink" title="亦诊医疗"></a>亦诊医疗</h2><ol><li>Laravel 中 service Providers 你是怎么应用的？</li><li>说说 PHP 数组，在PHP底层怎么存储的（HashTable）</li><li>一个一维整数数组，如何快速取出前最大（或最小）的两个（SPL）</li><li>简述依赖注入的作用和实现方式</li><li>列举常见的 WEB 性能优化方法</li><li>git cherry-pick master</li></ol><h2 id="寻找母星"><a href="#寻找母星" class="headerlink" title="寻找母星"></a>寻找母星</h2><h3 id="电面"><a href="#电面" class="headerlink" title="电面"></a>电面</h3><ol><li>一台4核8G的服务器，只运行nginx 和 php，如何调优使其利用最大化。</li><li>TP5 或 Laravel 加载时经历了什么。</li></ol><h2 id="毒APP"><a href="#毒APP" class="headerlink" title="毒APP"></a>毒APP</h2><h3 id="一面-2"><a href="#一面-2" class="headerlink" title="一面"></a>一面</h3><ol><li>简单介绍一下自己</li><li>laravel yii2.0 tp5 优缺点</li><li>PHP 5与 PHP 7 哪些变化</li><li>PHP7 为什么会对这些 参数声明和返回值做强制类型声明？</li><li>对某一个类进行扩展，你应该怎么扩展？</li><li>有用过装饰器模式吗？</li><li>针对数据库的调优（为什么最左侧索引使用不上，索引就会失效）</li><li>yii 有哪些优势</li><li>PHP 跑脚本跑过没？</li><li>Crontab 如何实现每秒执行一次？</li><li>PHP 垃圾回收机制？</li><li>502、503、504 具体区别是什么？</li><li>Redis 哪些数据类型</li><li>elasticsearch 为什么快？</li><li>你们是如何管理代码的？</li><li>简述一下常用git 命令，git-rebase 应用场景是什么？</li><li>git reset 在本地回退代码后，如何提交到线上？</li><li>抢购如何处理库存和并发问题？</li></ol><h3 id="二面-2"><a href="#二面-2" class="headerlink" title="二面"></a>二面</h3><ol><li>可以详细描述一下一个 http 的请求过程嘛？</li><li>fpm 和 fastcgi 有什么关系</li><li>fastcgi 和 cgi 有什么关系？</li><li>数组在PHP底层是怎么存储的？（这里准确的说应该是HashTable）</li><li>假如 Hash 碰撞他会怎么处理？</li><li>innodb 有哪些索引？</li><li>复合索引哪些情况下会失效？</li><li>怎么查看 sql 有没有使用索引？</li><li>你再查看 explain 会看哪些参数？</li><li>B+tree 结构有没有了解？，B+tree 的层级是</li><li>redis 管道有用过吗？</li><li>订单表数据量比较大做拆分，需要从三个维度查询条件是订单号，商户id，用户id？</li><li>除了redis 还用过别的消息队列吗？</li><li>自己手写过框架吗？</li><li>微服务有了解过吗？</li><li>之前有用php做过一些服务化的东西吗？之前有做过一些模块拆分的东西吗？服务之间的依赖怎么处理？要怎么通信？</li><li>你现在参与研发的时间还多吗？</li><li>你的离职原因是什么？</li><li>你这么有什么问题要问的吗？</li></ol><h3 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h3><ol><li>redis 删除机制</li><li>缓存雪崩</li></ol><h2 id="连米科技"><a href="#连米科技" class="headerlink" title="连米科技"></a>连米科技</h2><h3 id="一面-3"><a href="#一面-3" class="headerlink" title="一面"></a>一面</h3><ol><li>你大概介绍一下你之前的项目和经历。</li><li>你做过的有代表性的项目介绍一下。</li><li>优惠券的活动，瞬时并发按5000算，你应该怎么处理。</li><li>在这个场景上，还有别的点上需要做优化的吗？</li><li>发送验证码的接口，被别人用大批量的手机号恶意利用，你应该怎么去处理。<br> 答：1.针对单个手机号在一日内做总次数发送限制。<br> 2.在 HTTP 请求头上做特殊标记<br> 3.传递的参数做加密，携带签名。</li><li>如果入职一家公司你的期待或预期是怎样的。</li><li>相对于别的开发，你有什么优势。</li><li>我这边了解的差不多了，你还有什么想了解的吗？</li></ol><h3 id="二面-3"><a href="#二面-3" class="headerlink" title="二面"></a>二面</h3><ol><li>你这个项目还在运行着吗？为什么不能访问了？介绍一下你这个项目的技术栈。</li><li>你这个项目的部署细节</li><li>你处理的电商项目中有哪些亮点呢。</li><li>第三方支付你积累的哪些经验呢。</li><li>说一个你项目的物理结构。</li><li>RDS 提供哪些服务让你选择 RDS</li><li>PHP 线上配置</li><li>PHP 和 Nginx 是怎么通信的</li><li>Docker 有多少了解呢</li><li>你怎么编排 Docker 的呢</li><li>Laravel 需要改哪些设置使其更快</li><li>PHP 垃圾回收机制</li><li>PHP 自动加载机制有了解过吗？</li></ol><h3 id="二三四五"><a href="#二三四五" class="headerlink" title="二三四五"></a>二三四五</h3><ol><li>简单做个自我介绍</li><li>你在开发过程中你有没有用过php的扩展，你是如何安装php扩展的</li><li>你是怎么判断一个字符串长度的，</li><li>strlen 和 mb_strlen 有什么区别，两个中文汉字，这个两个函数返回值分别是多少。</li><li>怎么用php读取一个10G的文件，</li><li>PHP 中两个等号和三个等号的区别是什么呢？</li><li>php 中常用的魔术方法举几个例子，tostring 是什么意思</li><li>array_map 有用过吗？他主要功能描述一下。</li><li>array_walk 呢？</li><li>怎么获取一个文件的类型？</li><li>你开发过程中有没有用redis，他有集中数据类型</li><li>redis 有几种持久化方式呢。</li><li>你是怎么优化mysql呢？</li><li>你是怎么判断一个sql 有无没使用索引呢，explain 看什么指标呢？</li><li>为什么使用索引就很快呢，索引的原理是什么呢？</li><li>索引覆盖是什么呢？什么时候会使用到呢？</li><li>如何控制mysql的一个连接数</li><li>你平时用的nginx多呢还是apache呢，你是如何创建一个虚拟主机的。</li><li>PHP 和 Nginx 是怎么通信的。</li><li>PHP 和 Nginx 有几种通信方式。</li></ol><h3 id="开发类"><a href="#开发类" class="headerlink" title="开发类"></a>开发类</h3><ol><li>有一个接口每天只能访问一万次，你应该怎么做。</li><li>让你设计一个抢购系统，你关注哪些点。</li><li>你维护一个网站，有一段时间也没有上传代码，突然有人告诉你这个网站今天打开特别慢，你该怎么排查一下，以及一下有哪些步骤。</li><li>正则表达式匹配出所有是4的倍数的二进制数</li></ol><h3 id="开发题"><a href="#开发题" class="headerlink" title="开发题"></a>开发题</h3><p>1.写一个函数，得出1等奖中奖概率是0.5%，2等奖中奖概率5%，3等奖中奖概率10%<br>2.一个二维数据，根据某个key值的大小按升序或降序排序</p><h2 id="边锋科技"><a href="#边锋科技" class="headerlink" title="边锋科技"></a>边锋科技</h2><p>php负责人请假，GoLang 技术面试</p><ol><li>插入数据表真实是成功的，但是获取db的写入状态确是不成功的，请问如何提示给客户端，如何解决？（他的回答：插入后再查一次）</li><li>更新缓存成功了，但是更新DB确失败了，怎么办？</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;智众医疗&quot;&gt;&lt;a href=&quot;#智众医疗&quot; class=&quot;headerlink&quot; title=&quot;智众医疗&quot;&gt;&lt;/a&gt;智众医疗&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;自我介绍&lt;/li&gt;
&lt;li&gt;MySQL 优化，常见的索引优化的方式&lt;/li&gt;
&lt;li&gt;阿里云的 RDS 报 IOPS 过高（使用到索引了）&lt;/li&gt;
&lt;li&gt;除了用 Redis 做缓存还用到了什么？（消息队列和锁，讲一下）&lt;/li&gt;
&lt;li&gt;讲一下你的比较顺畅的一个工作流程&lt;/li&gt;
&lt;li&gt;有一个接口，用户反馈很慢？&lt;/li&gt;
&lt;li&gt;你们是怎么监控接口的？&lt;/li&gt;
&lt;li&gt;docker 的原理？&lt;/li&gt;
&lt;li&gt;如何优化镜像的打包速度和大小&lt;/li&gt;
&lt;li&gt;讲一下个人是怎么成长的？&lt;/li&gt;
&lt;li&gt;谈谈你对 MySQL 的优化&lt;/li&gt;
&lt;li&gt;在创建 MySQL 索引时你是如何考虑的？&lt;/li&gt;
&lt;li&gt;Btree 和 红黑树的区别&lt;/li&gt;
&lt;li&gt;你在生产环境是如何部署任务队列的？&lt;/li&gt;
&lt;li&gt;Laravel 中你认为哪些比较好的地方&lt;/li&gt;
&lt;li&gt;ELK 有没有了解过？&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;韩创科技&quot;&gt;&lt;a href=&quot;#韩创科技&quot; class=&quot;headerlink&quot; title=&quot;韩创科技&quot;&gt;&lt;/a&gt;韩创科技&lt;/h2&gt;&lt;h3 id=&quot;二面&quot;&gt;&lt;a href=&quot;#二面&quot; class=&quot;headerlink&quot; title=&quot;二面&quot;&gt;&lt;/a&gt;二面&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;最后一道笔试题&lt;/li&gt;
&lt;li&gt;3千万的网站做个用户消息，用户读取后标记已读，请问你该如何设计。&lt;/li&gt;
&lt;li&gt;Redis 的二进制存储，Redis 以及 Redis 存储结构以及 Redis 更高逼格的应用。&lt;/li&gt;
&lt;li&gt;Elasticsearch 你再什么场景下使用的，怎么使用的。数据量级别是多少。&lt;/li&gt;
&lt;li&gt;阿里云的开发搜索，出现延迟或空白现象有没有遇到过&lt;/li&gt;
&lt;li&gt;当你下面的技术人员与产品发生了冲突，你会怎么做？&lt;/li&gt;
&lt;li&gt;Kafka 有没有应用过，或是跑过 Demo&lt;/li&gt;
&lt;li&gt;Redis 下 count 函数有没有了解&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;一面&quot;&gt;&lt;a href=&quot;#一面&quot; class=&quot;headerlink&quot; title=&quot;一面&quot;&gt;&lt;/a&gt;一面&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Composer 自动加载原理&lt;/li&gt;
&lt;li&gt;队列任务，单机消费处理不过来，多消费者如何做？&lt;/li&gt;
&lt;li&gt;网站代码发布更新，如果做到不影响正常访问的用户&lt;/li&gt;
&lt;li&gt;你是如何在三台或更多台生产服务器发布代码？&lt;/li&gt;
&lt;li&gt;谈谈你对 MySQL 分区、分表的理解。&lt;/li&gt;
&lt;li&gt;数据是如何在磁盘分布的。&lt;/li&gt;
&lt;li&gt;使用主键查询与普通索引查询的区别。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;乐贝&quot;&gt;&lt;a href=&quot;#乐贝&quot; class=&quot;headerlink&quot; title=&quot;乐贝&quot;&gt;&lt;/a&gt;乐贝&lt;/h2&gt;&lt;h3 id=&quot;二面-1&quot;&gt;&lt;a href=&quot;#二面-1&quot; class=&quot;headerlink&quot; title=&quot;二面&quot;&gt;&lt;/a&gt;二面&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Elasticsearch 下做查询或统计为什么这么快，谈谈你对它的理解。&lt;/li&gt;
&lt;li&gt;谈谈你做过的最成熟的一个项目，你是怎么架构的。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="面试" scheme="https://dbing.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>每日英语-10</title>
    <link href="https://dbing.github.io/2020/03/10/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD-10/"/>
    <id>https://dbing.github.io/2020/03/10/每日英语-10/</id>
    <published>2020-03-10T09:14:18.000Z</published>
    <updated>2020-03-10T09:18:41.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日句子"><a href="#今日句子" class="headerlink" title="今日句子"></a>今日句子</h2><ol><li><p>Today is my birthday!<br>今天是我的生日</p></li><li><p>I like to wear my white coat.<br>我喜欢穿我的白色外套。</p></li><li><p>Vegetables are ok,but i prefer eating meat.<br>蔬菜是不错，但是我还是更喜欢吃肉。</p></li><li><p>There are different kinds of bread in the picture.<br>图片中有各式各样的面包。</p></li></ol><h2 id="陌生单词"><a href="#陌生单词" class="headerlink" title="陌生单词"></a>陌生单词</h2><ul><li><p>kinds:<br>n. 种类；特征；圣餐的圣体（指面包或葡萄酒）（kind 的复数）</p></li><li><p>prefer:<br>vt. 更喜欢；宁愿；提出；提升<br>vi. 喜欢；愿意</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;今日句子&quot;&gt;&lt;a href=&quot;#今日句子&quot; class=&quot;headerlink&quot; title=&quot;今日句子&quot;&gt;&lt;/a&gt;今日句子&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Today is my birthday!&lt;br&gt;今天是我的生日&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I l
      
    
    </summary>
    
      <category term="每日英语" scheme="https://dbing.github.io/categories/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="每日英语" scheme="https://dbing.github.io/tags/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>PHP写时复制</title>
    <link href="https://dbing.github.io/2020/03/09/PHP%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6/"/>
    <id>https://dbing.github.io/2020/03/09/PHP写时复制/</id>
    <published>2020-03-09T09:28:45.000Z</published>
    <updated>2020-03-09T10:05:32.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP-写时复制"><a href="#PHP-写时复制" class="headerlink" title="PHP 写时复制"></a>PHP 写时复制</h2><blockquote><p>Copy On Write 简写 COW，中文意思即：写时复制</p></blockquote><ol><li>当一个变量赋值给另外一个变量时，此时内存开销会是*2吗？</li><li>当再调用一个函数传递一个很大实参数组时，你有没有考虑过，内存的开销是怎样的！</li></ol><p>如果针对这两个问题，你可以毫无疑问的准确回答出来，那么接下来你可以不用再看了。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">'init memory: '</span> . memory_get_usage() . <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">$str = array_fill(<span class="number">0</span>, <span class="number">1024</span>, <span class="string">'hi'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'fill after: '</span> . memory_get_usage() . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">$newStr = $str;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'copy after: '</span> . memory_get_usage() . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">die</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">init memory: 354296</span><br><span class="line">fill after: 391216</span><br><span class="line">copy after: 391216</span><br></pre></td></tr></table></figure><p>可以看到重新赋值给新的变量<code>$newStr</code>后内存并没有增长。</p><h2 id="原理解释"><a href="#原理解释" class="headerlink" title="原理解释"></a>原理解释</h2><p>多个相同值的变量共用同一块内存的确节省了内存空间，但变量的值是会发生变化的，如果在上面的例子中， 指向同一内存的值发生了变化（或者可能发生变化），就需要将变化的值“分离”出去，这个“分离”的操作， 就是“复制”。</p><p>在PHP中，Zend引擎为了区别同一个zval地址是否被多个变量共享，引入了ref_count和is_ref两个变量进行标识：</p><ul><li><p>ref_count和is_ref是定义于zval结构体中</p></li><li><p>is_ref标识是不是用户使用 &amp; 的强制引用；</p></li></ul><p>ref_count是引用计数，用于标识此zval被多少个变量引用，即COW的自动引用，为0时会被销毁；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PHP-写时复制&quot;&gt;&lt;a href=&quot;#PHP-写时复制&quot; class=&quot;headerlink&quot; title=&quot;PHP 写时复制&quot;&gt;&lt;/a&gt;PHP 写时复制&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Copy On Write 简写 COW，中文意思即：写时复制&lt;/
      
    
    </summary>
    
      <category term="PHP" scheme="https://dbing.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://dbing.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>每日英语-9</title>
    <link href="https://dbing.github.io/2020/03/09/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD-9/"/>
    <id>https://dbing.github.io/2020/03/09/每日英语-9/</id>
    <published>2020-03-09T08:59:12.000Z</published>
    <updated>2020-03-09T09:16:34.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日句子"><a href="#今日句子" class="headerlink" title="今日句子"></a>今日句子</h2><ol><li><p>Let’s meet again on the sixteenth – a week from today.<br>让我们16号再见吧，也就是一周后的今天</p></li><li><p>Sea turtles swim so gracefully.<br>海龟再优雅地游水。</p></li><li><p>The old friends are walking in a park.<br>这些老朋友正在公园里散步。</p></li><li><p>After hearing the bad news,she cannot fall asleep.<br>听到这个坏消息之后他难以入睡</p></li></ol><a id="more"></a><ol start="5"><li><p>I love eating cakes!<br>我爱吃蛋糕！</p></li><li><p>Would you like a pet rabbit?<br>你想要一直宠物兔吗？</p></li><li><p>I took a big bite out of my sandwich.<br>我咬了一大口我的三明治</p></li><li><p>Ducks are swimming happily in the water.<br>鸭子们在水中愉快的游着。</p></li><li><p>How did you get your hair so straight?<br>你如何让你的头发这么直的？</p></li><li><p>Her hand looks so soft and clean.<br>她的手看起来又嫩又干净。</p></li><li><p>My head aches – maybe I think too much.<br>我的头好痛，估计是我用脑过度。</p></li><li><p>These students are having a music class.<br>这些学生正在上音乐课。</p></li><li><p>This is a blue police cap.<br>这是一顶蓝色的警察帽</p></li><li><p>My monther went to the supermarket with a shopping list.<br>我的妈妈带着购物清单去了超市。</p></li><li><p>2020 is the Year of the Rat.<br>2020年是鼠年。</p></li></ol><h2 id="陌生词："><a href="#陌生词：" class="headerlink" title="陌生词："></a>陌生词：</h2><ul><li><p>soft:<br>adj. 软的，柔软的；温柔的，温和的；软弱的；笨的<br>adv. 柔软地；温和地<br>n. 柔性；柔软的东西；柔软部分</p></li><li><p>straight:<br>adj. 直的；连续的；笔直的；正直的；整齐的；异性恋的<br>adv. 直接地；不断地；立即；坦率地<br>n. 直；直线；直男，直女，异性恋者</p></li><li><p>out of:<br>由于；缺乏；自…离开；用…（材料</p></li><li><p>bite:<br>vt. 咬；刺痛<br>n. 咬；一口；咬伤；刺痛<br>vi. 咬；刺痛</p></li><li><p>took:<br>v. 拿；取；接受（take的过去式）</p></li><li><p>fall:<br>v. 落下；跌倒；下垂；跪下；（地面）向下倾斜；（数量等的）减少； （雨或雪） 降落；沦陷； 阵亡；进入（某状态）；突然来到<br>n. 落下；跌倒；（雪、岩石等的）降落；（数量等的）减少；秋季；垮台、衰败<br>adj. 秋天的</p></li><li><p>asleep:<br>adj. 睡着的；麻木的；长眠的；不积极的；不专心的<br>adv. 熟睡地；进入睡眠状态（地）</p></li><li><p>gracefully:[ˈɡreɪsfəli]<br>adv. 优雅地；温文地</p></li><li><p>sea<br>n. 海；海洋；许多；大量</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;今日句子&quot;&gt;&lt;a href=&quot;#今日句子&quot; class=&quot;headerlink&quot; title=&quot;今日句子&quot;&gt;&lt;/a&gt;今日句子&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Let’s meet again on the sixteenth – a week from today.&lt;br&gt;让我们16号再见吧，也就是一周后的今天&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sea turtles swim so gracefully.&lt;br&gt;海龟再优雅地游水。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The old friends are walking in a park.&lt;br&gt;这些老朋友正在公园里散步。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After hearing the bad news,she cannot fall asleep.&lt;br&gt;听到这个坏消息之后他难以入睡&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="每日英语" scheme="https://dbing.github.io/categories/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="每日英语" scheme="https://dbing.github.io/tags/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>Laravel Task Scheduling Preventing Task Overlaps</title>
    <link href="https://dbing.github.io/2020/03/09/Laravel-Task-Scheduling-Preventing-Task-Overlaps/"/>
    <id>https://dbing.github.io/2020/03/09/Laravel-Task-Scheduling-Preventing-Task-Overlaps/</id>
    <published>2020-03-09T04:12:05.000Z</published>
    <updated>2020-03-09T06:10:40.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>一个<code>Task</code>没有允许结束，另一个<code>Task</code>又起了，这固然会造成程序执行的结果不是我们想要的，为了解决这个问题我发现<code>Laravel</code>有提供现成的方法。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>方法一：可以在代码中使用原子锁，这样即使第二个<code>tash</code>进程启动了，也可以阻挡住。</p><p>方法二：使用<code>Laravel</code>提供现成的<code>withoutOverlapping</code>方法，官方案例：<code>$schedule-&gt;command(&#39;emails:send&#39;)-&gt;withoutOverlapping();</code></p><p>方法一中使用哪一种的锁机制，那就看自家自己的喜好了不分好坏，只分性能高低😼，个人使用<code>redis</code>原子锁，从<code>2.6.12</code>版本以后，使用锁的方式变得更为简单，如设置一个名为<code>lock</code>的5秒钟原子锁：<code>SET lock 1 EX 5 NX</code>，<a href="http://redisdoc.com/string/set.html" target="_blank" rel="noopener">SET 更多参数用法</a></p><p>方法二我的测试结果如下：</p><ol><li><p>创建测试<code>command</code>文件,命令：<code>php artisan make:command Test</code></p></li><li><p>代码</p></li></ol><a id="more"></a><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Command</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The name and signature of the console command.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $signature = <span class="string">'test:over'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The console command description.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $description = <span class="string">'Command description'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new command instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute the console command.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;line(<span class="string">'Start'</span>);</span><br><span class="line">        \Log::info(<span class="string">'command run time:'</span>.date(<span class="string">'Y-m-d H:i:s'</span>));</span><br><span class="line">        sleep(<span class="number">90</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;line(<span class="string">'End'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>Kernel.php</code>代码</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $commands = [</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    Commands\Test::class</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">schedule</span><span class="params">(Schedule $schedule)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    $schedule-&gt;command(<span class="string">'test:over'</span>)-&gt;everyMinute()-&gt;withoutOverlapping();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>测试结果</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[2020-03-09 13:00:02] production.INFO: command run time:2020-03-09 13:00:02  </span><br><span class="line">[2020-03-09 13:02:00] production.INFO: command run time:2020-03-09 13:02:00  </span><br><span class="line">[2020-03-09 13:04:02] production.INFO: command run time:2020-03-09 13:04:02  </span><br><span class="line">[2020-03-09 13:06:01] production.INFO: command run time:2020-03-09 13:06:01  </span><br><span class="line">[2020-03-09 13:08:02] production.INFO: command run time:2020-03-09 13:08:02  </span><br><span class="line">[2020-03-09 13:10:01] production.INFO: command run time:2020-03-09 13:10:01  </span><br><span class="line">[2020-03-09 13:12:02] production.INFO: command run time:2020-03-09 13:12:02  </span><br><span class="line">[2020-03-09 13:14:01] production.INFO: command run time:2020-03-09 13:14:01  </span><br><span class="line">[2020-03-09 13:16:02] production.INFO: command run time:2020-03-09 13:16:02</span><br></pre></td></tr></table></figure><p>只要不人为干预强制启动多个<code>schedule:run</code>，不会有问题。</p><p>在19:32秒时强制，人为强制启动多个<code>schedule:run</code>进程，log如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[2020-03-09 13:18:01] production.INFO: command run time:2020-03-09 13:18:01  </span><br><span class="line">[2020-03-09 13:19:32] production.INFO: command run time:2020-03-09 13:19:32  </span><br><span class="line">[2020-03-09 13:22:02] production.INFO: command run time:2020-03-09 13:22:02  </span><br><span class="line">[2020-03-09 13:24:01] production.INFO: command run time:2020-03-09 13:24:01  </span><br><span class="line">[2020-03-09 13:26:02] production.INFO: command run time:2020-03-09 13:26:02  </span><br><span class="line">[2020-03-09 13:28:01] production.INFO: command run time:2020-03-09 13:28:01</span><br></pre></td></tr></table></figure><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Do not allow the event to overlap each other.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">withoutOverlapping</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;withoutOverlapping = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skip(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file_exists(<span class="keyword">$this</span>-&gt;mutexPath());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register a callback to further filter the schedule.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  \Closure  $callback</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span><span class="params">(Closure $callback)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;rejects[] = $callback;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the mutex path for the scheduled command.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">mutexPath</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> storage_path(<span class="string">'framework'</span>.DIRECTORY_SEPARATOR.<span class="string">'schedule-'</span>.sha1(<span class="keyword">$this</span>-&gt;expression.<span class="keyword">$this</span>-&gt;command));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜   ls storage/framework</span><br><span class="line">cache  schedule-7d2b691b1562e375e4f787cfd391d7a019e5f8cf  sessions  views</span><br><span class="line">➜  ✗ cat storage/framework/schedule-7d2b691b1562e375e4f787cfd391d7a019e5f8cf</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://laravel.com/docs/5.3/scheduling#preventing-task-overlaps" target="_blank" rel="noopener">https://laravel.com/docs/5.3/scheduling#preventing-task-overlaps</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;一个&lt;code&gt;Task&lt;/code&gt;没有允许结束，另一个&lt;code&gt;Task&lt;/code&gt;又起了，这固然会造成程序执行的结果不是我们想要的，为了解决这个问题我发现&lt;code&gt;Laravel&lt;/code&gt;有提供现成的方法。&lt;/p&gt;
&lt;h2 id=&quot;方案&quot;&gt;&lt;a href=&quot;#方案&quot; class=&quot;headerlink&quot; title=&quot;方案&quot;&gt;&lt;/a&gt;方案&lt;/h2&gt;&lt;p&gt;方法一：可以在代码中使用原子锁，这样即使第二个&lt;code&gt;tash&lt;/code&gt;进程启动了，也可以阻挡住。&lt;/p&gt;
&lt;p&gt;方法二：使用&lt;code&gt;Laravel&lt;/code&gt;提供现成的&lt;code&gt;withoutOverlapping&lt;/code&gt;方法，官方案例：&lt;code&gt;$schedule-&amp;gt;command(&amp;#39;emails:send&amp;#39;)-&amp;gt;withoutOverlapping();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;方法一中使用哪一种的锁机制，那就看自家自己的喜好了不分好坏，只分性能高低😼，个人使用&lt;code&gt;redis&lt;/code&gt;原子锁，从&lt;code&gt;2.6.12&lt;/code&gt;版本以后，使用锁的方式变得更为简单，如设置一个名为&lt;code&gt;lock&lt;/code&gt;的5秒钟原子锁：&lt;code&gt;SET lock 1 EX 5 NX&lt;/code&gt;，&lt;a href=&quot;http://redisdoc.com/string/set.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SET 更多参数用法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;方法二我的测试结果如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建测试&lt;code&gt;command&lt;/code&gt;文件,命令：&lt;code&gt;php artisan make:command Test&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;代码&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Laravel" scheme="https://dbing.github.io/categories/Laravel/"/>
    
    
  </entry>
  
  <entry>
    <title>每日英语-8</title>
    <link href="https://dbing.github.io/2020/03/08/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD-8/"/>
    <id>https://dbing.github.io/2020/03/08/每日英语-8/</id>
    <published>2020-03-08T13:14:42.000Z</published>
    <updated>2020-03-08T13:52:16.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日句子"><a href="#今日句子" class="headerlink" title="今日句子"></a>今日句子</h2><ol><li><p>“Who is the little boy in the photo?”,”it’s me.”<br>“照片上的小男孩是谁？”, “是我.”</p></li><li><p>Look at the baby’s chubby legs! So cute!<br>看这个宝宝胖嘟嘟的腿，真可爱！</p></li><li><p>This hamburger looks samll but delicious.<br>这个汉堡虽小，但看起来十分美味。</p></li><li><p>This cat is my mom’s pet.<br>这只猫是我妈妈的宠物。</p></li><li><p>The fresh red tomato is a healthy food.<br>红色的番茄是一种健康的食物。</p></li></ol><a id="more"></a><ol start="6"><li><p>She is lying in the sun with bare feet.<br>她光着脚躺在阳光下。</p></li><li><p>There are several fresh potatoes in the field.<br>田里有几个新鲜的土豆。</p></li><li><p>I have four T-shirts.<br>我有四件T恤</p></li><li><p>A basket of fresh fruits is on the wooden table.<br>木桌上放了一篮新鲜水果</p></li><li><p>The horse’s long tail lifted up into the air as it ran.<br>马的尾巴随着其奔跑而甩向空中。</p></li><li><p>She hurt her leg this morning.<br>今天早上她伤到了腿</p></li><li><p>We need to kick every day.<br>每天我们都要踢腿</p></li><li><p>She wears a red sweater.<br>她穿了一件红色的针织套衫</p></li><li><p>Don’t be afraid of my pet snake; it’s very friendly.<br>不用害怕我的宠物蛇，它是很友好的。</p></li><li><p>The three trousers have the same color.<br>这三条裤子颜色都一样。</p></li></ol><h2 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h2><ul><li><p>wooden:[ˈwʊdn]<br>adj. 木制的；僵硬的，呆板的</p></li><li><p>several:[ˈsevrəl]<br>adj. 几个的；各自的<br>pron. 几个；数个</p></li><li><p>field:[fiːld]<br>n. 领域；牧场；旷野；战场；运动场;字段<br>vi. 担任场外队员<br>adj. 扫描场；田赛的；野生的<br>vt. 把暴晒于场上；使上场</p></li><li><p>fresh:[freʃ]<br>adj. 新鲜的；清新的；淡水的；无经验的<br>n. 开始；新生；泛滥<br>adv. 刚刚，才；最新地</p></li><li><p>basket:[ˈbɑːskɪt]<br>n. 篮子；（篮球比赛的）得分；一篮之量；篮筐<br>vt. 装入篮</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;今日句子&quot;&gt;&lt;a href=&quot;#今日句子&quot; class=&quot;headerlink&quot; title=&quot;今日句子&quot;&gt;&lt;/a&gt;今日句子&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;“Who is the little boy in the photo?”,”it’s me.”&lt;br&gt;“照片上的小男孩是谁？”, “是我.”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Look at the baby’s chubby legs! So cute!&lt;br&gt;看这个宝宝胖嘟嘟的腿，真可爱！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This hamburger looks samll but delicious.&lt;br&gt;这个汉堡虽小，但看起来十分美味。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This cat is my mom’s pet.&lt;br&gt;这只猫是我妈妈的宠物。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The fresh red tomato is a healthy food.&lt;br&gt;红色的番茄是一种健康的食物。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="每日英语" scheme="https://dbing.github.io/categories/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="每日英语" scheme="https://dbing.github.io/tags/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>每日英语-7</title>
    <link href="https://dbing.github.io/2020/03/07/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD-7/"/>
    <id>https://dbing.github.io/2020/03/07/每日英语-7/</id>
    <published>2020-03-07T13:25:22.000Z</published>
    <updated>2020-03-07T13:49:51.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日句子"><a href="#今日句子" class="headerlink" title="今日句子"></a>今日句子</h2><ol><li><p>She helped the old man to walk.<br>她帮助老人走路。</p></li><li><p>Your tongue is longer than mine!<br>你的舌头比我的长！</p></li><li><p>Did you get a good grade on your last exam?<br>最后一门考试你取得好成绩了吗？</p></li><li><p>He wrote a summary of the terrible year he had.<br>这是他悲惨的2018年总结</p></li><li><p>Cola is a sweet,brown drink.<br>可乐是种甜味的棕色饮料。</p></li></ol><a id="more"></a><ol start="6"><li><p>We have a lot to learn about the human body.<br>关于人体我们有太多要学。</p></li><li><p>Is this the right place to look for science fiction novels?<br>这是找科幻小说的地方吗？</p></li><li><p>Her beautiful blonde hair is long and curly.<br>她的美丽金发又长又卷</p></li><li><p>“Looking forward to seeing you soon.” She wrote it on the letter.<br>她在信中写到：“我盼望与你尽快相见。”</p></li><li><p>Today is her birthday and she is 20 years of age？<br>今天是她20岁的生日</p></li><li><p>They often dance with music.<br>她们常随音乐起舞。</p></li><li><p>They were happy to buy this house.<br>他们高兴地买下了这座房子。</p></li><li><p>Everyone had a great time at my birthday party.<br>在我的生日聚会上每个人都玩得很开心。</p></li><li><p>He wore a thick coat to keep warm in the winter.<br>冬天他穿了一件厚外套来保暖。</p></li><li><p>The girl is touching her arm.<br>这个女孩正在摸她的手臂</p></li></ol><h2 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h2><p>terrible:[ˈterəbl]<br>adj. 可怕的；很糟的；令人讨厌的<br>adv. 很，非常</p><p>science:[ˈsaɪəns]<br>n. 科学；技术；学科；理科</p><p>fiction:[ˈfɪkʃn]<br>n. 小说；虚构，编造；谎言</p><p>novels:[‘nɔvəlz]<br>n. 小说（novel的复数）</p><p>thick:[θɪk]<br>adj. 厚的，有……厚；浓密的；粘稠的；浑浊的；迟钝的；明显的；粗壮的；（字体）粗体的；（气味）浓烈的；沙哑的；口音重的；思路不清的；大量的；（非正式）交情厚的<br>n. 最激烈处，最密集处，中心处<br>adv. 厚厚地；密集地</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;今日句子&quot;&gt;&lt;a href=&quot;#今日句子&quot; class=&quot;headerlink&quot; title=&quot;今日句子&quot;&gt;&lt;/a&gt;今日句子&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;She helped the old man to walk.&lt;br&gt;她帮助老人走路。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your tongue is longer than mine!&lt;br&gt;你的舌头比我的长！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Did you get a good grade on your last exam?&lt;br&gt;最后一门考试你取得好成绩了吗？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;He wrote a summary of the terrible year he had.&lt;br&gt;这是他悲惨的2018年总结&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cola is a sweet,brown drink.&lt;br&gt;可乐是种甜味的棕色饮料。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="每日英语" scheme="https://dbing.github.io/categories/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="每日英语" scheme="https://dbing.github.io/tags/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>将数组值从字符串转换为int</title>
    <link href="https://dbing.github.io/2020/03/05/%E5%B0%86%E6%95%B0%E7%BB%84%E5%80%BC%E4%BB%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BAint/"/>
    <id>https://dbing.github.io/2020/03/05/将数组值从字符串转换为int/</id>
    <published>2020-03-05T01:25:45.000Z</published>
    <updated>2020-03-05T01:43:37.863Z</updated>
    
    <content type="html"><![CDATA[<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$string = <span class="string">"1,2,3"</span></span><br><span class="line">$ids = explode(<span class="string">','</span>, $string);</span><br><span class="line">var_dump($ids);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  string(<span class="number">1</span>) <span class="string">"1"</span></span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  string(<span class="number">1</span>) <span class="string">"2"</span></span><br><span class="line">  [<span class="number">2</span>]=&gt;</span><br><span class="line">  string(<span class="number">1</span>) <span class="string">"3"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标：</p><p>每个值需要的是<code>int</code>类型，而不是<code>string</code></p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>1.代码一</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$integerIds = array_map(<span class="string">'intval'</span>, explode(<span class="string">','</span>, $string));</span><br></pre></td></tr></table></figure><p>2.代码二</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$integerIds = json_decode(<span class="string">'['</span> . $string . <span class="string">']'</span>, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;样例&quot;&gt;&lt;a href=&quot;#样例&quot; class=&quot;headerlink&quot; title=&quot;样例&quot;&gt;&lt;/a&gt;样例&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
      <category term="PHP" scheme="https://dbing.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://dbing.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>基础篇-怎么理解平均负载</title>
    <link href="https://dbing.github.io/2020/03/05/%E5%9F%BA%E7%A1%80%E7%AF%87-%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3%E5%B9%B3%E5%9D%87%E8%B4%9F%E8%BD%BD/"/>
    <id>https://dbing.github.io/2020/03/05/基础篇-怎么理解平均负载/</id>
    <published>2020-03-05T01:20:12.000Z</published>
    <updated>2020-03-13T05:21:36.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="uptime-查看平均负载"><a href="#uptime-查看平均负载" class="headerlink" title="uptime 查看平均负载"></a>uptime 查看平均负载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ uptime</span><br><span class="line"> 12:37:58 up 67 days, 12:43,  2 users,  load average: 0.00, 0.02, 0.00</span><br></pre></td></tr></table></figure><p>解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">12:37:58            # 当前时间</span><br><span class="line">up 67 days, 12:43   # 系统运行时间</span><br><span class="line">2 users             # 正在登录用户数</span><br></pre></td></tr></table></figure><p>最后三个数字呢，依次则是过去 1 分钟、5 分钟、15 分钟的平均负载(Load Average)</p><blockquote><p>平均负载是指单位时间内，系统处于「可运行状态」和「不可中断状态」的平均进程数，也就是平均活跃进程数</p></blockquote><p>可运行状态的进程：是指正在使用 CPU 或者正在等待 CPU 的进程，也就是我们常用 ps 命令看到的，处于 R 状态(Running 或 Runnable)的进程</p><p>不可中断状态的进程：则是正处于内核态关键流程中的进程，并且这些流程是不可打断的， 比如最常见的是等待硬件设备的 I/O 响应，也就是我们在 ps 命令中看到的 D 状态 (Uninterruptible Sleep，也称为 Disk Sleep)的进程。</p><p>比如，当一个进程向磁盘读写数据时，为了保证数据的一致性，在得到磁盘回复前，它是 不能被其他进程或者中断打断的，这个时候的进程就处于不可中断状态。如果此时的进程 被打断了，就容易出现磁盘数据与进程数据不一致的问题。</p><p>所以，不可中断状态实际上是系统对进程和硬件设备的一种保护机制。</p><p>既然平均的是活跃进程数，那么最理想的，就是每个 CPU 上都刚好运行着一个进程，这样 每个 CPU 都得到了充分利用。</p><p>比如当平均负载为 2 时，意味着什么呢?</p><ul><li>在只有 2 个 CPU 的系统上，意味着所有的 CPU 都刚好被完全占用。</li><li>在 4 个 CPU 的系统上，意味着 CPU 有 50% 的空闲。</li><li>而在只有 1 个 CPU 的系统中，则意味着有一半的进程竞争不到 CPU。</li></ul><h2 id="平均负载为多少时合理"><a href="#平均负载为多少时合理" class="headerlink" title="平均负载为多少时合理"></a>平均负载为多少时合理</h2><p>查看系统有几个 CPU,从<code>/proc/cpuinfo</code>中读取，命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'model name'</span> /proc/cpuinfo | wc -l</span><br></pre></td></tr></table></figure><p>有了 CPU 个数，我们就可以判断出，当平均负载比 CPU 个数还大的时候，系统已经出现 了过载。</p><h2 id="找出负载过大进程"><a href="#找出负载过大进程" class="headerlink" title="找出负载过大进程"></a>找出负载过大进程</h2><p>mpstat 查看 CPU 使用率的变化情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -P ALL 表示监控所有 CPU，后面数字 5 表示间隔 5 秒</span></span><br><span class="line">mpstat -P ALL 5</span><br><span class="line">12:59:39 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line">12:59:44 PM  all   50.76    0.00    0.50    0.00    0.00    0.00    0.00    0.00    0.00   48.74</span><br><span class="line">12:59:44 PM    0    0.81    0.00    1.01    0.00    0.00    0.00    0.00    0.00    0.00   98.17</span><br><span class="line">12:59:44 PM    1  100.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00</span><br></pre></td></tr></table></figure><p>pidstat 来查询是哪个进程导致了 CPU 使用率为 100% 呢</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 间隔 5 秒后输出一组数据</span></span><br><span class="line">pidstat -u 5 1</span><br><span class="line">12:59:02 PM   UID       PID    %usr %system  %guest    %CPU   CPU  Command</span><br><span class="line">12:59:07 PM   110      9706    0.40    0.00    0.00    0.40     0  mongod</span><br><span class="line">12:59:07 PM     0      9750    0.20    0.00    0.00    0.20     1  watch</span><br><span class="line">12:59:07 PM     0      9833  100.00    0.00    0.00  100.00     0  stress</span><br><span class="line">12:59:07 PM     0     10123    0.00    0.20    0.00    0.20     1  pidstat</span><br><span class="line">12:59:07 PM     0     14287    0.60    0.40    0.00    1.00     1  AliYunDun</span><br><span class="line">12:59:07 PM     0     19835    0.20    0.00    0.00    0.20     1  containerd-shim</span><br><span class="line">12:59:07 PM   111     22629    0.00    0.20    0.00    0.20     1  redis-server</span><br><span class="line">12:59:07 PM     0     27102    0.40    0.20    0.00    0.60     1  exe</span><br><span class="line">12:59:07 PM   999     29885    0.20    0.00    0.00    0.20     1  redis-server</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>平均负载提供了一个快速查看系统整体性能的手段，反映了整体的负载情况。</p><p>平均负载过高，有可能是CPU密集进程导致，还有可能是 I/O 更繁忙了。</p><p>可以使用 mpstat、pidstat 等工具，辅助分析负载的来源。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>整理自「Linux 性能优化实战」</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;uptime-查看平均负载&quot;&gt;&lt;a href=&quot;#uptime-查看平均负载&quot; class=&quot;headerlink&quot; title=&quot;uptime 查看平均负载&quot;&gt;&lt;/a&gt;uptime 查看平均负载&lt;/h2&gt;&lt;figure class=&quot;highlight bash
      
    
    </summary>
    
      <category term="Linux" scheme="https://dbing.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://dbing.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>每日英语-6</title>
    <link href="https://dbing.github.io/2020/03/03/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD-6/"/>
    <id>https://dbing.github.io/2020/03/03/每日英语-6/</id>
    <published>2020-03-03T14:30:14.000Z</published>
    <updated>2020-03-03T14:42:01.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日句子"><a href="#今日句子" class="headerlink" title="今日句子"></a>今日句子</h2><ol><li><p>I prefer the cold. snowy mountains over warm places.<br>比起温暖的地方，我更喜欢寒冷的、白雪皑皑的山区。</p></li><li><p>My favourite pet is my dog, Lucy.<br>我喜欢的宠物是我的狗狗，露西。</p></li><li><p>Today is the 15th of August.<br>今天是八月十五号。</p></li><li><p>It’s time for breakfast.<br>是该吃早饭的时间了。</p></li><li><p>There are four seasons in a year.<br>一年有四个季节。</p></li></ol><a id="more"></a><ol start="6"><li>I usually get up around 7 o’clock in the morning.<br>我通常早上7点钟起床。</li></ol><h2 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h2><ul><li><p>perferred:<br>adj. 优先的；选择的</p></li><li><p>over:<br>adv. 倒下；翻转；穿过；完全覆盖；以上；大于；再；结束；改变；完毕；仔细地<br>prep. 在……上面；从……上方；穿越；在……的另一边；在……的远端；从……落下；遍及；多于；在……期间；渡过；由于；关于；利用；通过；声音大于；高于；级别在……之上；优先于；超过<br>n. （板球）一轮投球<br>adj. 倒下的；折起来的；结束的；剩下的<br>v. 越过</p></li><li><p>August:<br>n. 八月</p></li><li><p>usually:<br>adv. 通常，经常</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;今日句子&quot;&gt;&lt;a href=&quot;#今日句子&quot; class=&quot;headerlink&quot; title=&quot;今日句子&quot;&gt;&lt;/a&gt;今日句子&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I prefer the cold. snowy mountains over warm places.&lt;br&gt;比起温暖的地方，我更喜欢寒冷的、白雪皑皑的山区。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My favourite pet is my dog, Lucy.&lt;br&gt;我喜欢的宠物是我的狗狗，露西。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Today is the 15th of August.&lt;br&gt;今天是八月十五号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s time for breakfast.&lt;br&gt;是该吃早饭的时间了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are four seasons in a year.&lt;br&gt;一年有四个季节。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="每日英语" scheme="https://dbing.github.io/categories/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="每日英语" scheme="https://dbing.github.io/tags/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>每日英语-5</title>
    <link href="https://dbing.github.io/2020/03/02/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD-5/"/>
    <id>https://dbing.github.io/2020/03/02/每日英语-5/</id>
    <published>2020-03-02T14:30:20.000Z</published>
    <updated>2020-03-03T15:00:44.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日句子"><a href="#今日句子" class="headerlink" title="今日句子"></a>今日句子</h2><ol><li><p>She can swim like a finsh! Loook at her!<br>看看她，她像鱼一样游泳！</p></li><li><p>Bring your umbrella. It is rainy outside.<br>带上你的雨伞，外面再下雨</p></li><li><p>It’s cloudy today. so you can’t see the sun.<br>今天多云，所以你看不见太阳</p></li><li><p>There snowy mountains are very beautiful.<br>这些白雪皑皑的山，非常漂亮</p></li><li><p>The trees are swaying beacause of the windy weather.<br>树在大风天气中随风舞动。</p></li></ol><a id="more"></a><ol start="6"><li><p>The blue sky means that today is a sunny day.<br>蓝蓝的天空表明今天是个晴天</p></li><li><p>The doy can use an umbrella?<br>这只狗会撑伞？</p></li><li><p>The weather this week has been mostly cloudy.<br>这周天气以多云为主</p></li><li><p>In china, the flying swallows are a sign of spring.<br>在中国，飞燕是春天的讯号</p></li><li><p>My family always take a summer vacation at the beach.<br>我家总会在海边过暑假</p></li><li><p>Leaves turn yellow in the autumn.<br>秋天，叶子都变黄了。</p></li><li><p>I can go skiing in the winter.<br>我可以在冬天滑雪</p></li><li><p>I like eating bread with hot coffe.<br>我喜欢就着热咖啡吃面包</p></li><li><p>We feel warm with the fire.<br>火让我们感到温暖</p></li><li><p>Washing face with cold water is so cool.<br>用冷水洗脸特别凉爽。</p></li></ol><h2 id="陌生词"><a href="#陌生词" class="headerlink" title="陌生词"></a>陌生词</h2><ul><li><p>Bring:[brɪŋ]<br>vt. 带来；促使；引起；使某人处于某种情况或境地</p></li><li><p>swaying:<br>v. 使摇动；支配；偏向一边（sway的ing形式）</p></li><li><p>mostly:[ˈməʊstli]<br>adv. 主要地；通常；多半地</p></li><li><p>swallows:<br>n. 燕子；咽喉；吞咽（swallow 的复数）<br>v. 吞下；做吞咽动作；吞没；用尽；轻信；不流露；默默忍受；吞并（swallow 的第三人称单数）</p></li><li><p>vacation:[veɪˈkeɪʃn; vəˈkeɪʃn]<br>n. 假期；（房屋）搬出<br>vi. 休假，度假</p></li><li><p>beach:[biːtʃ]<br>n. 海滩；湖滨<br>vt. 将…拖上岸<br>vi. 搁浅；定居</p></li><li><p>turn:[tɜːn]<br>vt. 转动，使旋转；转弯；翻过来；兑换<br>vi. 转向；转变；转动<br>n. 转弯；变化；(损害或有益于别人的)行为，举动，举止</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;今日句子&quot;&gt;&lt;a href=&quot;#今日句子&quot; class=&quot;headerlink&quot; title=&quot;今日句子&quot;&gt;&lt;/a&gt;今日句子&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;She can swim like a finsh! Loook at her!&lt;br&gt;看看她，她像鱼一样游泳！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bring your umbrella. It is rainy outside.&lt;br&gt;带上你的雨伞，外面再下雨&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s cloudy today. so you can’t see the sun.&lt;br&gt;今天多云，所以你看不见太阳&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There snowy mountains are very beautiful.&lt;br&gt;这些白雪皑皑的山，非常漂亮&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The trees are swaying beacause of the windy weather.&lt;br&gt;树在大风天气中随风舞动。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="每日英语" scheme="https://dbing.github.io/categories/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="每日英语" scheme="https://dbing.github.io/tags/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>每日英语-4</title>
    <link href="https://dbing.github.io/2020/03/01/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD-4/"/>
    <id>https://dbing.github.io/2020/03/01/每日英语-4/</id>
    <published>2020-03-01T02:56:18.000Z</published>
    <updated>2020-03-01T03:05:33.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日句子"><a href="#今日句子" class="headerlink" title="今日句子"></a>今日句子</h2><ol><li><p>The girl keeps a diary everyday.<br>女孩儿每天都在写日记</p></li><li><p>We can get some gifts in Christmas.<br>我们在圣诞节可以得到礼物。</p></li><li><p>The boy is making a Chrismas greeting card by himself.<br>这个小男孩亲自制作圣诞节贺卡。</p></li><li><p>She felt happy when her boyfriend gave her a persent.<br>男朋友送给她礼物时她感到很开心。</p></li><li><p>The girls felt merry and happy at the party.<br>在派对上这些女孩感到愉快和高兴</p></li><li><p>She is always happy to see her friend.<br>见到自己的朋友，她总是很开心。</p></li></ol><h2 id="词"><a href="#词" class="headerlink" title="词"></a>词</h2><ul><li><p>diary:[ˈdaɪəri]<br>n. 日志，日记；日记簿</p></li><li><p>felt:[felt]<br>n. 毡，毛毡；毡制品<br>v. 把……制成毡；毡合；用毡覆盖<br>v. 感觉，感觉是；感受到；认为；触摸（feel 的过去式和过去分词）</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;今日句子&quot;&gt;&lt;a href=&quot;#今日句子&quot; class=&quot;headerlink&quot; title=&quot;今日句子&quot;&gt;&lt;/a&gt;今日句子&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The girl keeps a diary everyday.&lt;br&gt;女孩儿每天都在写日记&lt;/p&gt;
&lt;/
      
    
    </summary>
    
      <category term="每日英语" scheme="https://dbing.github.io/categories/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="每日英语" scheme="https://dbing.github.io/tags/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>每日英语-3</title>
    <link href="https://dbing.github.io/2020/02/29/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD-3/"/>
    <id>https://dbing.github.io/2020/02/29/每日英语-3/</id>
    <published>2020-02-29T14:17:31.000Z</published>
    <updated>2020-02-29T14:39:08.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日句子"><a href="#今日句子" class="headerlink" title="今日句子"></a>今日句子</h2><ol><li><p>All of them have short hair.<br>他们都留着短发。</p></li><li><p>The handsome man posed for pictures.<br>这位英俊的男子摆好姿势准备照相</p></li><li><p>The man loves his new motorbike！<br>这个男人超爱他的新摩托车！</p></li><li><p>They like their bookshop very much.<br>他们喜欢他们的书店</p></li><li><p>There are so many animals in the zoo!<br>动物园里有好多动物啊！</p></li></ol><a id="more"></a><ol start="6"><li><p>You can buy a lot of things from the supermarke.<br>你可以在超市买到很多东西</p></li><li><p>There are some people relaxing by the lake in the park.<br>有些人再公园的湖边休息</p></li><li><p>The patient was taken to the hospital for treatment.<br>病人被带进医院进行治疗</p></li><li><p>Where do you want to go,child?<br>你要去哪里，孩子？</p></li><li><p>We enjoy talking one the grass under the blue sky.<br>我们很喜欢蓝天下躺在草坪上聊天。</p></li><li><p>People are resting under the big tree.<br>人们在这颗大树下休息。</p></li><li><p>There are colorful flowers in that place.<br>那里有五颜六色的花。</p></li><li><p>The little wooden boat floats on the water.<br>这艘小木船浮在水面上。</p></li><li><p>The beautiful lake lies at the foot of the mountain.<br>那个美丽的湖泊坐落在山脚下。</p></li></ol><h2 id="词"><a href="#词" class="headerlink" title="词"></a>词</h2><ul><li><p>posed：<br>v. 形成（pose的过去分词）；摆姿势；主张；装模作样</p></li><li><p>relaxing：<br>adj. 令人放松的<br>v. 放松，休息（relax 的现在分词）</p></li><li><p>taken：<br>v. 拿，带（take的过去分词）</p></li><li><p>treatment：<br>n. 治疗，疗法；处理；对待</p></li><li><p>patient：<br>adj. 有耐心的，能容忍的<br>n. 病人，患者；受动者，承受者</p></li><li><p>lies：<br>n. 谎言（lie的复数）<br>v. 躺卧（lie的第三人称单数形式）</p></li><li><p>foot：<br>n. 脚；英尺；步调；末尾<br>vi. 步行；跳舞；总计<br>vt. 支付；给……换底</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;今日句子&quot;&gt;&lt;a href=&quot;#今日句子&quot; class=&quot;headerlink&quot; title=&quot;今日句子&quot;&gt;&lt;/a&gt;今日句子&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;All of them have short hair.&lt;br&gt;他们都留着短发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The handsome man posed for pictures.&lt;br&gt;这位英俊的男子摆好姿势准备照相&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The man loves his new motorbike！&lt;br&gt;这个男人超爱他的新摩托车！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They like their bookshop very much.&lt;br&gt;他们喜欢他们的书店&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are so many animals in the zoo!&lt;br&gt;动物园里有好多动物啊！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="每日英语" scheme="https://dbing.github.io/categories/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="每日英语" scheme="https://dbing.github.io/tags/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>Hexo_posts目录归档</title>
    <link href="https://dbing.github.io/2020/02/29/Hexo-posts%E7%9B%AE%E5%BD%95%E5%BD%92%E6%A1%A3/"/>
    <id>https://dbing.github.io/2020/02/29/Hexo-posts目录归档/</id>
    <published>2020-02-29T14:08:18.000Z</published>
    <updated>2020-02-29T14:17:19.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><code>Blog</code>文章写多了，都堆积在<code>source/_posts</code>根目录下，每次创建了一篇新博文，找起来很是花时间，想要实现创建的博文按<code>/年/月</code>目录划分，访问<code>URL</code>地址保持不变即可。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>配置<code>_config.yml</code>文件中<code>new_post_name</code>值为<code>:year/:month/:title.md</code>即可。然后使用<code>hexo new &#39;demo&#39;</code>创建一篇测试文章，就会发现自动归纳到相应<code>/年/月</code>目录下了。</p><p>Q1：针对旧文章怎么办？<br>A1：手动创建对应年、月目录，将其移动到对应目录下即可。</p><p>The end.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Blog&lt;/code&gt;文章写多了，都堆积在&lt;code&gt;source/_posts&lt;/code&gt;根目录下，每次创建
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://dbing.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>每日英语-2</title>
    <link href="https://dbing.github.io/2020/02/28/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD-2/"/>
    <id>https://dbing.github.io/2020/02/28/每日英语-2/</id>
    <published>2020-02-28T13:21:27.000Z</published>
    <updated>2020-02-29T15:04:05.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日句子"><a href="#今日句子" class="headerlink" title="今日句子"></a>今日句子</h2><ol><li><p>Her red skirt mathes well with her red sunglasses.<br>她的红色裙子和红色太阳镜很搭。</p></li><li><p>We have kinds of dresses in our store. Try one on!<br>本店女装款式多样，欢迎选购。</p></li><li><p>This is a pair of jean shorts.<br>这是一条牛仔短裤。</p></li><li><p>This kind of metal looks very hard.<br>这种金属看上去很硬。</p></li><li><p>This father has a daughter and a son.<br>这位父亲有一儿一女。</p></li></ol><a id="more"></a><ol start="6"><li><p>The mother wathes over her baby.<br>这位母亲照看她的宝宝。</p></li><li><p>The brother and sister play together.<br>两兄妹在一起玩。</p></li><li><p>My sister is also my best friend.<br>我的姐姐也是我最好的朋友。</p></li><li><p>My grandmother gave me a candy cane.<br>我祖母给了我一个拐杖糖。</p></li><li><p>My classmates and I can use this computer.<br>我和我的同学可以用这台电脑。</p></li><li><p>My grandmother is such an elegant woman.<br>我的奶奶是多么优雅的女人啊。</p></li><li><p>The girl with brown hair is so cute.<br>这个棕色头发的女孩太可爱了。</p></li><li><p>A man smiles happily.<br>这个男人笑起来很开心。</p></li><li><p>The little boy loves to read.<br>这个小男孩喜欢阅读。</p></li><li><p>I look at myself in the mirror before work.<br>上班前我照了照镜子。</p></li><li><p>I am going to eat this big sandwich.<br>我要吃了这个巨大的三明治。</p></li><li><p>How did you grow so tall?<br>你是怎么长到这么高的？</p></li><li><p>Wow, she’s pretty! Does she have a boyfriend?<br>哇哇，她真漂亮！她有男朋友吗？</p></li><li><p>The sun is slowly rising from the horizon.<br>太阳从地平线缓缓升起。</p></li></ol><h2 id="词"><a href="#词" class="headerlink" title="词"></a>词</h2><ul><li><p>kinds:<br>n. 种类；特征；圣餐的圣体（指面包或葡萄酒）（kind 的复数）</p></li><li><p>jean:<br>n. 牛仔裤；[纺] 斜纹棉布</p></li><li><p>pair:<br>n. 一对，一双，一副<br>vt. 把…组成一对</p></li><li><p>hard:<br>adj. 努力的；硬的；困难的；辛苦的；确实的；严厉的；猛烈的；冷酷无情的<br>adv. 努力地；困难地；辛苦地；接近地；猛烈地；牢固地</p></li><li><p>candy:[ˈkændi]<br>n. 糖果，巧克力；冰糖；（糖果包装的）毒品；中看不中用的东西<br>v. 把……制成蜜饯；用糖煮；使结晶</p></li><li><p>cane:[keɪn]<br>n. 手杖；藤条；细长的茎<br>vt. 以杖击；以藤编制</p></li><li><p>such:[sʌtʃ]<br>adj. 这样的，如此的</p></li><li><p>elegant:[ˈelɪɡənt]<br>adj. 高雅的，优雅的；讲究的；简炼的；简洁的</p></li><li><p>brown:[braʊn]<br>adj. 棕色的，褐色的；太阳晒黑的<br>vi. 变成褐色<br>n. 褐色，棕色<br>vt. 使变成褐色</p></li><li><p>cute:[kjuːt]<br>adj. 可爱的；漂亮的；聪明的，伶俐的</p></li><li><p>mirror:[ˈmɪrə(r)]<br>n. 镜子；真实的写照；榜样<br>vt. 反射；反映</p></li><li><p>rising:[ˈraɪzɪŋ]<br>n. 上升；起床；造反<br>adj. 上升的；上涨的；新兴的<br>adv. 接近<br>v. 上升（rise的ing形式）</p></li><li><p>horizon:[həˈraɪzn]<br>n. [天] 地平线；视野；眼界；范围</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;今日句子&quot;&gt;&lt;a href=&quot;#今日句子&quot; class=&quot;headerlink&quot; title=&quot;今日句子&quot;&gt;&lt;/a&gt;今日句子&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Her red skirt mathes well with her red sunglasses.&lt;br&gt;她的红色裙子和红色太阳镜很搭。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We have kinds of dresses in our store. Try one on!&lt;br&gt;本店女装款式多样，欢迎选购。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is a pair of jean shorts.&lt;br&gt;这是一条牛仔短裤。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This kind of metal looks very hard.&lt;br&gt;这种金属看上去很硬。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This father has a daughter and a son.&lt;br&gt;这位父亲有一儿一女。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="每日英语" scheme="https://dbing.github.io/categories/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="每日英语" scheme="https://dbing.github.io/tags/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>Carbon 使用方法一览表</title>
    <link href="https://dbing.github.io/2020/02/26/Carbon-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E4%B8%80%E8%A7%88%E8%A1%A8/"/>
    <id>https://dbing.github.io/2020/02/26/Carbon-使用方法一览表/</id>
    <published>2020-02-26T12:14:05.000Z</published>
    <updated>2020-02-29T14:18:47.025Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>待编写</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;待编写&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="Laravel" scheme="https://dbing.github.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 下如何设置允许前端跨域请求</title>
    <link href="https://dbing.github.io/2020/02/26/Laravel-%E4%B8%8B%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E5%85%81%E8%AE%B8%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
    <id>https://dbing.github.io/2020/02/26/Laravel-下如何设置允许前端跨域请求/</id>
    <published>2020-02-26T12:12:35.000Z</published>
    <updated>2020-02-29T02:27:38.377Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题场景"><a href="#问题场景" class="headerlink" title="问题场景"></a>问题场景</h2><p>我司今日针对B端管理后台做<code>Dashboard</code>升级，采用新分离式开发方式，<code>Laravel</code>提供 API、<code>Vue</code>做视图，自然也遇到了老生常谈跨域问题。</p><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>出于安全原因，浏览器限制从脚本内发起的跨源HTTP请求。 例如，XMLHttpRequest和Fetch API遵循同源策略。 这意味着使用这些API的Web应用程序只能从加载应用程序的同一个域请求HTTP资源，除非响应报文包含了正确CORS响应头。</p><blockquote><p>CORS：跨域资源共享(CORS) 是一种机制，他使用额外的HTTP头来告诉浏览器，让运行在一个origin(domain)上的WEB应用被准许访问来自不同源服务器上指定的资源。</p></blockquote><p>当一个资源从与该资源本身所在的服务器<em>不同的域</em>、<em>协议或端口</em>请求一个资源时，资源会发起一个跨域 HTTP 请求。</p><p>比如，站点 <a href="http://domain-a.com" target="_blank" rel="noopener">http://domain-a.com</a> 的某 HTML 页面通过 <code>&lt;img&gt;</code> 的 src 请求 <a href="http://domain-b.com/image.jpg。" target="_blank" rel="noopener">http://domain-b.com/image.jpg。</a></p><div style="width:440px;height:306px;"><img src="/2020/02/26/Laravel-下如何设置允许前端跨域请求/CORS_principle.png"></div><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li><p>针对<code>Laravel</code>框架下有现成扩展包可用，如：<a href="https://packagist.org/packages/barryvdh/laravel-cors" target="_blank" rel="noopener">barryvdh/laravel-cors</a>，使用方法自行阅读文档（亲测过）。</p></li><li><p>奈何自个公司<code>Laravel</code>框架版本是<code>5.3</code>，上面方法行不通，升级框架不是目前所要做的事情，弄明白原理后自行编写中间件也可以搞定，一句话总结：即需要在响应Header头<code>Access-Control-Allow-Origin:*</code>设置允许的域，这里的<code>*</code>表示允许所有域。</p></li></ol><p>需要注意的是：如果客户端（浏览器）需要携带身份请求，那么也需要服务端在响应中将Header头<code>Access-Control-Allow-Credentials</code>字段设置为<code>true</code>，完整写法<code>Access-Control-Allow-Credentials: true</code>，重点来了（敲黑板划重点）此时的<code>Access-Control-Allow-Origin</code>就不能再设置为<code>*</code>了，必须指定具体的域，比如：<code>http://foo.example</code>，这个域一般是前端开发者本地的<code>http://localhost:9527</code></p><a id="more"></a><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ol><li><p>创建中间件<code>php artisan make:middleware EnableCrosMiddleware</code></p></li><li><p>核心代码：</p></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handle an incoming request.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  \Illuminate\Http\Request $request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  \Closure $next</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $response = $next($request);</span><br><span class="line">    $origin = $request-&gt;server(<span class="string">'HTTP_ORIGIN'</span>) ? $request-&gt;server(<span class="string">'HTTP_ORIGIN'</span>) : <span class="string">''</span>;</span><br><span class="line">    $allowOrigin = [</span><br><span class="line">        <span class="string">'http://localhost:9527'</span>,</span><br><span class="line">        <span class="string">'http://localhost:9690'</span>,</span><br><span class="line">        <span class="string">'http://10.0.1.38:9527'</span>,</span><br><span class="line">        <span class="string">'http://10.0.1.38:9690'</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (in_array($origin, $allowOrigin)) &#123;</span><br><span class="line">        $response-&gt;header(<span class="string">'Access-Control-Allow-Origin'</span>, $origin);</span><br><span class="line">        $response-&gt;header(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Origin, Content-Type, Cookie, Accept, X-XSRF-TOKEN'</span>);</span><br><span class="line">        $response-&gt;header(<span class="string">'Access-Control-Allow-Methods'</span>, <span class="string">'GET, POST, PATCH, PUT, OPTIONS'</span>);</span><br><span class="line">        $response-&gt;header(<span class="string">'Access-Control-Allow-Credentials'</span>, <span class="string">'true'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>添加到全局路由组，打开<code>app/Http/Kernel.php</code>，在<code>protected $middleware</code>属性中添加上刚刚创建中间件类，我的添加行是<code>\Fujitaro\Http\Middleware\EnableCrosMiddleware::class</code>，（不要照抄咱们的命名空间肯定不同）当然你也可以只添加到<code>api</code>分组下</li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>Q1：跨域错误提示</p><img src="/2020/02/26/Laravel-下如何设置允许前端跨域请求/cors.png"><p>A1：检查服务端响应头Header<code>Access-Control-Allow-Origin</code>的设置,应该是没有成功</p><p>Q2：非跨域错误提示<br><img src="/2020/02/26/Laravel-下如何设置允许前端跨域请求/x-xsrf-token.png"><br>A2：检查服务端<code>Access-Control-Allow-Headers</code>中是否允许<code>x-xsrf-token</code>，设置允许即可。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题场景&quot;&gt;&lt;a href=&quot;#问题场景&quot; class=&quot;headerlink&quot; title=&quot;问题场景&quot;&gt;&lt;/a&gt;问题场景&lt;/h2&gt;&lt;p&gt;我司今日针对B端管理后台做&lt;code&gt;Dashboard&lt;/code&gt;升级，采用新分离式开发方式，&lt;code&gt;Laravel&lt;/code&gt;提供 API、&lt;code&gt;Vue&lt;/code&gt;做视图，自然也遇到了老生常谈跨域问题。&lt;/p&gt;
&lt;h2 id=&quot;问题原因&quot;&gt;&lt;a href=&quot;#问题原因&quot; class=&quot;headerlink&quot; title=&quot;问题原因&quot;&gt;&lt;/a&gt;问题原因&lt;/h2&gt;&lt;p&gt;出于安全原因，浏览器限制从脚本内发起的跨源HTTP请求。 例如，XMLHttpRequest和Fetch API遵循同源策略。 这意味着使用这些API的Web应用程序只能从加载应用程序的同一个域请求HTTP资源，除非响应报文包含了正确CORS响应头。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;CORS：跨域资源共享(CORS) 是一种机制，他使用额外的HTTP头来告诉浏览器，让运行在一个origin(domain)上的WEB应用被准许访问来自不同源服务器上指定的资源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当一个资源从与该资源本身所在的服务器&lt;em&gt;不同的域&lt;/em&gt;、&lt;em&gt;协议或端口&lt;/em&gt;请求一个资源时，资源会发起一个跨域 HTTP 请求。&lt;/p&gt;
&lt;p&gt;比如，站点 &lt;a href=&quot;http://domain-a.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://domain-a.com&lt;/a&gt; 的某 HTML 页面通过 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 的 src 请求 &lt;a href=&quot;http://domain-b.com/image.jpg。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://domain-b.com/image.jpg。&lt;/a&gt;&lt;/p&gt;
&lt;div style=&quot;width:440px;height:306px;&quot;&gt;&lt;img src=&quot;/2020/02/26/Laravel-下如何设置允许前端跨域请求/CORS_principle.png&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;针对&lt;code&gt;Laravel&lt;/code&gt;框架下有现成扩展包可用，如：&lt;a href=&quot;https://packagist.org/packages/barryvdh/laravel-cors&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;barryvdh/laravel-cors&lt;/a&gt;，使用方法自行阅读文档（亲测过）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;奈何自个公司&lt;code&gt;Laravel&lt;/code&gt;框架版本是&lt;code&gt;5.3&lt;/code&gt;，上面方法行不通，升级框架不是目前所要做的事情，弄明白原理后自行编写中间件也可以搞定，一句话总结：即需要在响应Header头&lt;code&gt;Access-Control-Allow-Origin:*&lt;/code&gt;设置允许的域，这里的&lt;code&gt;*&lt;/code&gt;表示允许所有域。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要注意的是：如果客户端（浏览器）需要携带身份请求，那么也需要服务端在响应中将Header头&lt;code&gt;Access-Control-Allow-Credentials&lt;/code&gt;字段设置为&lt;code&gt;true&lt;/code&gt;，完整写法&lt;code&gt;Access-Control-Allow-Credentials: true&lt;/code&gt;，重点来了（敲黑板划重点）此时的&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;就不能再设置为&lt;code&gt;*&lt;/code&gt;了，必须指定具体的域，比如：&lt;code&gt;http://foo.example&lt;/code&gt;，这个域一般是前端开发者本地的&lt;code&gt;http://localhost:9527&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CORS" scheme="https://dbing.github.io/tags/CORS/"/>
    
  </entry>
  
  <entry>
    <title>每日英语-1</title>
    <link href="https://dbing.github.io/2020/02/24/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD-1/"/>
    <id>https://dbing.github.io/2020/02/24/每日英语-1/</id>
    <published>2020-02-24T05:15:46.000Z</published>
    <updated>2020-02-29T14:08:56.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日语句"><a href="#今日语句" class="headerlink" title="今日语句"></a>今日语句</h2><ol><li><p>I’m scard of the bear; don’t let it get near me!<br>我怕熊，别让他靠近我！</p></li><li><p>I bought a red chair.<br>我买了一把红色椅子</p></li><li><p>He always wears a shirt and tie to work.<br>他去工作时总是穿衬衫打领带</p></li><li><p>I drink the water because I’m thirsty.<br>我口渴所以喝水</p></li><li><p>My sister and I water the plants.<br>姐姐和我在给植物浇水</p></li><li><p>Milk is a tasty and healthy drink.<br>牛奶是一种可口又健康的饮品</p></li><li><p>Would you like a cup of tea?<br>你要来杯茶么？</p></li></ol><a id="more"></a><ol start="8"><li><p>I want to drink orange juice!<br>我好想喝橘子汁啊！</p></li><li><p>I want to find a job from the newspaper.<br>我想要从报纸上找一份工作</p></li><li><p>I’m very hungry,so i can eat a lot.<br>我很饿，因此我可以吃很多.</p></li><li><p>Fish have very simple lives.<br>鱼过着简单的生活</p></li><li><p>These chickens look so different.<br>这些鸡长得很不一样</p></li><li><p>I’ll have some eggs for breakfast.<br>我早餐会吃一些鸡蛋</p></li><li><p>I’ll cook rice for dinner.<br>晚餐我做米饭</p></li><li><p>The boy is saying sorry to his girlfriend.<br>男孩在给他女朋友道歉</p></li><li><p>She says,”Sure! It’s OK!”<br>她说：“当然了！没问题！”</p></li><li><p>I like the green doll.<br>我喜欢这个绿色的玩偶</p></li><li><p>My bed is so comfortable.<br>我的床相当舒服</p></li><li><p>The box of books is really heavy.<br>这一箱书可真沉啊</p></li><li><p>She will write down her menu on the blackboard.<br>她会把她的菜单写在这块黑板上</p></li><li><p>The black car looks cool and expensive.<br>那辆黑色的车看起来气派豪华</p></li><li><p>The train is about to travel through the building.<br>列车即将穿楼而过</p></li><li><p>Kick the ball into the net.<br>把球踢进网</p></li><li><p>I like to travel by plane.<br>我喜欢乘坐飞机旅行</p></li><li><p>Who is the girl standing behind the boy?<br>站在那个男孩后面的女孩是谁？</p></li><li><p>Where does the door lead to?<br>这个门通向哪里？</p></li><li><p>There is a ball near the hole.<br>那个球在洞口附近</p></li><li><p>On holidays,fireworks light up the sky.<br>在节日，烟火照亮填空</p></li><li><p>The cat is hiding under the sofa.<br>那只猫躲在沙发下面</p></li><li><p>All of my textbooks are on my desk.<br>我所有的课本都在我的书桌上</p></li><li><p>There is an empty desk right here.<br>这里有一张空桌子</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;今日语句&quot;&gt;&lt;a href=&quot;#今日语句&quot; class=&quot;headerlink&quot; title=&quot;今日语句&quot;&gt;&lt;/a&gt;今日语句&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I’m scard of the bear; don’t let it get near me!&lt;br&gt;我怕熊，别让他靠近我！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I bought a red chair.&lt;br&gt;我买了一把红色椅子&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;He always wears a shirt and tie to work.&lt;br&gt;他去工作时总是穿衬衫打领带&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I drink the water because I’m thirsty.&lt;br&gt;我口渴所以喝水&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My sister and I water the plants.&lt;br&gt;姐姐和我在给植物浇水&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Milk is a tasty and healthy drink.&lt;br&gt;牛奶是一种可口又健康的饮品&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Would you like a cup of tea?&lt;br&gt;你要来杯茶么？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="每日英语" scheme="https://dbing.github.io/categories/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="每日英语" scheme="https://dbing.github.io/tags/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>opencv 背景去除和更换</title>
    <link href="https://dbing.github.io/2020/02/22/opencv-%E8%83%8C%E6%99%AF%E5%8E%BB%E9%99%A4%E5%92%8C%E6%9B%B4%E6%8D%A2/"/>
    <id>https://dbing.github.io/2020/02/22/opencv-背景去除和更换/</id>
    <published>2020-02-22T04:32:15.000Z</published>
    <updated>2020-02-29T01:23:32.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>上一个课题，已经实现手动标注后，已经可以在视频流中追踪到物体，<br>继续的研究，如何做到踢出背景干扰完成自动标注物体，这是目前想去实现的目标。终极目标是将摄像头捕捉到的视频流（单一背景色），剔除背景后自动画上标注框（最小矩形）</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><img src="/2020/02/22/opencv-背景去除和更换/remove-background-example-two.jpg"><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://www.learnopencv.com/applications-of-foreground-background-separation-with-semantic-segmentation/" target="_blank" rel="noopener">文章</a></p><p><a href="https://github.com/spmallick/learnopencv/tree/master/app-seperation-semseg" target="_blank" rel="noopener">代码</a></p><p>相关推荐文章:<br><a href="https://www.learnopencv.com/simple-background-estimation-in-videos-using-opencv-c-python/" target="_blank" rel="noopener">simple-background-estimation-in-videos-using-opencv-c-python</a><br><a href="https://www.learnopencv.com/pytorch-for-beginners-semantic-segmentation-using-torchvision/" target="_blank" rel="noopener">pytorch-for-beginners-semantic-segmentation-using-torchvision</a></p><h2 id="采坑"><a href="#采坑" class="headerlink" title="采坑"></a>采坑</h2><p>Q1: from torchvision import models No module named ‘torchvision’</p><p>A1: 如果出现这个错误，不用怀疑人生、不用质疑自己，认真检查自己开发环境是否安装了<code>torchvision</code>，如果确定安装了也不用慌，检查版本<code>pytorch</code>版本至少<code>1.4.0</code>,<code>torchvision</code>版本<code>0.5.0</code>，我的环境是使用的<code>Anaconda</code>，通过面板安装只能看到<code>1.3.0</code>版本，下面是我的安装命令，指定安装到<code>-n</code>是指定安装到<code>my-opencv</code>环境下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -n my-opencv pytorch=1.4.0 torchvision -c pytorch</span><br></pre></td></tr></table></figure><p>查看版本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">import torchvision</span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line"><span class="built_in">print</span>(torch.__version__)</span><br><span class="line"><span class="comment"># cuda 是否开启</span></span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available())</span><br></pre></td></tr></table></figure><p><a href="https://pytorch.org/get-started/locally/#mac-anaconda" target="_blank" rel="noopener">官方安装文档</a></p><p><a href="https://pytorch.org/get-started/locally/#anaconda" target="_blank" rel="noopener">https://pytorch.org/get-started/locally/#anaconda</a></p><hr><p>Q2: AssertionError: Torch not compiled with CUDA enabled</p><p>A2: Mac没有英伟达显卡，么有办法使用 <code>cuda</code>加速，可以使用<code>Cpu</code>，调整代码便可以继续愉快的玩耍，代码见<a href="https://github.com/spmallick/learnopencv/issues/346" target="_blank" rel="noopener">issue</a></p><p>查看<code>torch</code>是否开启了<code>cuda</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import torch</span><br><span class="line">&gt;&gt;&gt; torch.__version__</span><br><span class="line"><span class="string">'1.4.0'</span></span><br><span class="line">&gt;&gt;&gt; torch.cuda.is_available()</span><br><span class="line">False</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;上一个课题，已经实现手动标注后，已经可以在视频流中追踪到物体，&lt;br&gt;继续的研究，如何做到踢出背景干扰完成自动标注物体，这是目前想去实现的目
      
    
    </summary>
    
      <category term="计算机视觉" scheme="https://dbing.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="opencv" scheme="https://dbing.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>Iterm 下管理 SSH 工具</title>
    <link href="https://dbing.github.io/2020/02/20/Iterm-%E4%B8%8B%E7%AE%A1%E7%90%86-SSH-%E5%B7%A5%E5%85%B7/"/>
    <id>https://dbing.github.io/2020/02/20/Iterm-下管理-SSH-工具/</id>
    <published>2020-02-20T02:52:08.000Z</published>
    <updated>2020-02-20T14:01:27.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>命令行下<code>ssh</code>登录远程服务器，当服务多起来后，如何管理就是以及快速登录就尤为重要，比如：我们有测试服：<code>tiger</code>、生产：<code>prod</code>，<code>prod</code>又不只一台等等，又是通过证书文件远程登录服务器，总不能将这些登录命令记录到“小本本”上，每次用到去<code>copy</code>吧，太不不科技了。</p><h2 id="开源工具"><a href="#开源工具" class="headerlink" title="开源工具"></a>开源工具</h2><p>地址：<a href="https://github.com/islenbo/autossh" target="_blank" rel="noopener">https://github.com/islenbo/autossh</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;命令行下&lt;code&gt;ssh&lt;/code&gt;登录远程服务器，当服务多起来后，如何管理就是以及快速登录就尤为重要，比如：我们有测试服：&lt;code&gt;
      
    
    </summary>
    
    
      <category term="ssh" scheme="https://dbing.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Laravel Query Builder 一个复杂查询</title>
    <link href="https://dbing.github.io/2020/02/19/Laravel-Query-Builder-%E4%B8%80%E4%B8%AA%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2/"/>
    <id>https://dbing.github.io/2020/02/19/Laravel-Query-Builder-一个复杂查询/</id>
    <published>2020-02-19T14:54:57.000Z</published>
    <updated>2020-02-19T14:57:00.407Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>Laravel 框架下，在文章列表中附带上前 10 条评论，如何优雅的处理此种场景。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><a href="https://guojiang.club/cms/detail/3" target="_blank" rel="noopener">https://guojiang.club/cms/detail/3</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;p&gt;Laravel 框架下，在文章列表中附带上前 10 条评论，如何优雅的处理此种场景。&lt;/p&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="Laravel" scheme="https://dbing.github.io/categories/Laravel/"/>
    
    
      <category term="Laravel" scheme="https://dbing.github.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>又一次被这错误坑了</title>
    <link href="https://dbing.github.io/2020/02/19/%E5%8F%88%E4%B8%80%E6%AC%A1%E8%A2%AB%E8%BF%99%E9%94%99%E8%AF%AF%E5%9D%91%E4%BA%86/"/>
    <id>https://dbing.github.io/2020/02/19/又一次被这错误坑了/</id>
    <published>2020-02-19T14:44:03.000Z</published>
    <updated>2020-02-19T15:55:20.576Z</updated>
    
    <content type="html"><![CDATA[<h2 id="错误现场"><a href="#错误现场" class="headerlink" title="错误现场"></a>错误现场</h2><p>页面<code>500</code>没有错误<code>Log</code>，手动修改<code>index.php</code>捕获异常。</p><h2 id="查看Log"><a href="#查看Log" class="headerlink" title="查看Log"></a>查看Log</h2><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;错误现场&quot;&gt;&lt;a href=&quot;#错误现场&quot; class=&quot;headerlink&quot; title=&quot;错误现场&quot;&gt;&lt;/a&gt;错误现场&lt;/h2&gt;&lt;p&gt;页面&lt;code&gt;500&lt;/code&gt;没有错误&lt;code&gt;Log&lt;/code&gt;，手动修改&lt;code&gt;index.php&lt;/co
      
    
    </summary>
    
      <category term="Neox" scheme="https://dbing.github.io/categories/Neox/"/>
    
    
      <category term="Neox" scheme="https://dbing.github.io/tags/Neox/"/>
    
  </entry>
  
  <entry>
    <title>opencv 单目标追踪</title>
    <link href="https://dbing.github.io/2020/02/18/opencv-%E5%8D%95%E7%9B%AE%E6%A0%87%E8%BF%BD%E8%B8%AA/"/>
    <id>https://dbing.github.io/2020/02/18/opencv-单目标追踪/</id>
    <published>2020-02-18T15:07:14.000Z</published>
    <updated>2020-02-22T05:38:30.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>自动去除纯色背景，自动画框（最小外接矩形）然后将素材提交给机器学习。</p><h2 id="已实现"><a href="#已实现" class="headerlink" title="已实现"></a>已实现</h2><p>今日下午利用零碎时间，写出手动画框单目标跟踪，效果GIF图如下：</p><img src="/2020/02/18/opencv-单目标追踪/follow.gif"><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单目标追踪</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个VideoCapture对象</span></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定视频编解码方式为MJPG</span></span><br><span class="line">codec = cv2.VideoWriter_fourcc(*<span class="string">'MJPG'</span>)</span><br><span class="line">fps = <span class="number">20.0</span> <span class="comment"># 指定写入帧率为20</span></span><br><span class="line">frameSize = (<span class="number">380</span>, <span class="number">380</span>) <span class="comment"># 指定窗口大小</span></span><br><span class="line"><span class="comment"># 创建 VideoWriter对象</span></span><br><span class="line"><span class="comment"># out = cv2.VideoWriter('video_record.avi', codec, fps, frameSize)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the tracker type</span></span><br><span class="line">trackerType = <span class="string">"CSRT"</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment"># Create MultiTracker object</span></span><br><span class="line">multiTracker = cv2.MultiTracker_create()</span><br><span class="line"></span><br><span class="line">trackerTypes = [<span class="string">'BOOSTING'</span>, <span class="string">'MIL'</span>, <span class="string">'KCF'</span>,<span class="string">'TLD'</span>, <span class="string">'MEDIANFLOW'</span>, <span class="string">'GOTURN'</span>, <span class="string">'MOSSE'</span>, <span class="string">'CSRT'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createTrackerByName</span><span class="params">(trackerType)</span>:</span></span><br><span class="line">    <span class="comment"># Create a tracker based on tracker name</span></span><br><span class="line">    <span class="keyword">if</span> trackerType == trackerTypes[<span class="number">0</span>]:</span><br><span class="line">        tracker = cv2.TrackerBoosting_create()</span><br><span class="line">    <span class="keyword">elif</span> trackerType == trackerTypes[<span class="number">1</span>]: </span><br><span class="line">        tracker = cv2.TrackerMIL_create()</span><br><span class="line">    <span class="keyword">elif</span> trackerType == trackerTypes[<span class="number">2</span>]:</span><br><span class="line">        tracker = cv2.TrackerKCF_create()</span><br><span class="line">    <span class="keyword">elif</span> trackerType == trackerTypes[<span class="number">3</span>]:</span><br><span class="line">        tracker = cv2.TrackerTLD_create()</span><br><span class="line">    <span class="keyword">elif</span> trackerType == trackerTypes[<span class="number">4</span>]:</span><br><span class="line">        tracker = cv2.TrackerMedianFlow_create()</span><br><span class="line">    <span class="keyword">elif</span> trackerType == trackerTypes[<span class="number">5</span>]:</span><br><span class="line">        tracker = cv2.TrackerGOTURN_create()</span><br><span class="line">    <span class="keyword">elif</span> trackerType == trackerTypes[<span class="number">6</span>]:</span><br><span class="line">        tracker = cv2.TrackerMOSSE_create()</span><br><span class="line">    <span class="keyword">elif</span> trackerType == trackerTypes[<span class="number">7</span>]:</span><br><span class="line">        tracker = cv2.TrackerCSRT_create()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tracker = <span class="keyword">None</span></span><br><span class="line">        print(<span class="string">'Incorrect tracker name'</span>)</span><br><span class="line">        print(<span class="string">'Available trackers are:'</span>)</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> trackerTypes:</span><br><span class="line">        print(t)</span><br><span class="line">    <span class="keyword">return</span> tracker</span><br><span class="line"></span><br><span class="line">colors = []</span><br><span class="line">colors.append((randint(<span class="number">0</span>, <span class="number">255</span>), randint(<span class="number">0</span>, <span class="number">255</span>), randint(<span class="number">0</span>, <span class="number">255</span>)))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"按键Q-结束视频录制"</span>)</span><br><span class="line"><span class="keyword">while</span>(cap.isOpened()):</span><br><span class="line"></span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    <span class="comment"># 如果帧获取正常</span></span><br><span class="line">    <span class="keyword">if</span> ret==<span class="keyword">True</span>:</span><br><span class="line">        <span class="comment"># 镜像反转 flip</span></span><br><span class="line">        <span class="comment"># frame = cv2.flip(frame, -1)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 不断的向视频输出流写入帧图像</span></span><br><span class="line">        <span class="comment"># out.write(frame)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 画框</span></span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == ord(<span class="string">'c'</span>):</span><br><span class="line">            bbox = cv2.selectROI(<span class="string">'MultiTracker'</span>, frame)</span><br><span class="line">            multiTracker.add(createTrackerByName(trackerType), frame, bbox)</span><br><span class="line">            cv2.destroyWindow(<span class="string">'MultiTracker'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 转换为gray灰度图</span></span><br><span class="line">        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 寻找轮廓</span></span><br><span class="line">        bimg, contours, hier = cv2.findContours(gray, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line">        <span class="keyword">for</span> cidx,cnt <span class="keyword">in</span> enumerate(contours):</span><br><span class="line">            (x, y, w, h) = cv2.boundingRect(cnt)</span><br><span class="line">            print(<span class="string">'RECT: x=&#123;&#125;, y=&#123;&#125;, w=&#123;&#125;, h=&#123;&#125;'</span>.format(x, y, w, h))</span><br><span class="line">            <span class="comment"># 原图绘制圆形</span></span><br><span class="line">            cv2.rectangle(gray, pt1=(x, y), pt2=(x+w, y+h),color=(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), thickness=<span class="number">3</span>)</span><br><span class="line">            <span class="comment"># 截取ROI图像</span></span><br><span class="line">            <span class="comment"># cv2.imwrite("./car/my_car_&#123;&#125;.png".format(cidx), gray[y:y+h, x:x+w])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># get updated location of objects in subsequent frames</span></span><br><span class="line">        success, boxes = multiTracker.update(frame)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># draw tracked objects</span></span><br><span class="line">        <span class="keyword">for</span> i, newbox <span class="keyword">in</span> enumerate(boxes):</span><br><span class="line">            p1 = (int(newbox[<span class="number">0</span>]), int(newbox[<span class="number">1</span>]))</span><br><span class="line">            p2 = (int(newbox[<span class="number">0</span>] + newbox[<span class="number">2</span>]), int(newbox[<span class="number">1</span>] + newbox[<span class="number">3</span>]))</span><br><span class="line">            cv2.rectangle(frame, p1, p2, colors[i], <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在窗口中展示画面</span></span><br><span class="line">        cv2.imshow(<span class="string">'frame'</span>,gray)</span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == ord(<span class="string">'q'</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放资源</span></span><br><span class="line">cap.release()</span><br><span class="line"><span class="comment"># out.release()</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.learnopencv.com/multitracker-multiple-object-tracking-using-opencv-c-python/" target="_blank" rel="noopener">https://www.learnopencv.com/multitracker-multiple-object-tracking-using-opencv-c-python/</a></li><li><a href="http://bbs.cvmart.net/articles/71/duo" target="_blank" rel="noopener">http://bbs.cvmart.net/articles/71/duo</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;自动去除纯色背景，自动画框（最小外接矩形）然后将素材提交给机器学习。&lt;/p&gt;
&lt;h2 id=&quot;已实现&quot;&gt;&lt;a href=&quot;#已实现&quot; class=&quot;headerlink&quot; title=&quot;已实现&quot;&gt;&lt;/a&gt;已实现&lt;/h2&gt;&lt;p&gt;今日下午利用零碎时间，写出手动画框单目标跟踪，效果GIF图如下：&lt;/p&gt;
&lt;img src=&quot;/2020/02/18/opencv-单目标追踪/follow.gif&quot;&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;
    
    </summary>
    
      <category term="计算机视觉" scheme="https://dbing.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="opencv" scheme="https://dbing.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>2020年的第一天赴公司上班</title>
    <link href="https://dbing.github.io/2020/02/17/2020%E5%B9%B4%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9%E8%B5%B4%E5%85%AC%E5%8F%B8%E4%B8%8A%E7%8F%AD/"/>
    <id>https://dbing.github.io/2020/02/17/2020年的第一天赴公司上班/</id>
    <published>2020-02-17T15:14:46.000Z</published>
    <updated>2020-02-17T15:40:28.322Z</updated>
    
    <content type="html"><![CDATA[<p>自从疫情以来，已在远程办公两周，在这两周期间，本身就让有良好的自控力我，深深习惯了在家里办公，那叫一个爽呼呼尽管稍微有点（晚睡晚起-_-||），But 我会准时出席<code>9:30</code>的例会，按时吃早饭、中饭、偶尔稍微一点吃晚餐。今天是2020年首次进公司上班，以下是一些途中记录的照片。</p><h2 id="途中"><a href="#途中" class="headerlink" title="途中"></a>途中</h2><a id="more"></a><img src="/2020/02/17/2020年的第一天赴公司上班/1.jpeg"><img src="/2020/02/17/2020年的第一天赴公司上班/2.jpeg"><img src="/2020/02/17/2020年的第一天赴公司上班/3.jpeg"><img src="/2020/02/17/2020年的第一天赴公司上班/4.jpeg"><img src="/2020/02/17/2020年的第一天赴公司上班/5.jpeg"><img src="/2020/02/17/2020年的第一天赴公司上班/6.jpeg"><h2 id="公司"><a href="#公司" class="headerlink" title="公司"></a>公司</h2><img src="/2020/02/17/2020年的第一天赴公司上班/7.jpeg"><img src="/2020/02/17/2020年的第一天赴公司上班/8.jpeg"><h2 id="日本"><a href="#日本" class="headerlink" title="日本"></a>日本</h2><p>此时日本东京的地铁（日本已确诊400+例），位居国外首榜🤦‍♀️</p><img src="/2020/02/17/2020年的第一天赴公司上班/9.jpeg">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从疫情以来，已在远程办公两周，在这两周期间，本身就让有良好的自控力我，深深习惯了在家里办公，那叫一个爽呼呼尽管稍微有点（晚睡晚起-_-||），But 我会准时出席&lt;code&gt;9:30&lt;/code&gt;的例会，按时吃早饭、中饭、偶尔稍微一点吃晚餐。今天是2020年首次进公司上班，以下是一些途中记录的照片。&lt;/p&gt;
&lt;h2 id=&quot;途中&quot;&gt;&lt;a href=&quot;#途中&quot; class=&quot;headerlink&quot; title=&quot;途中&quot;&gt;&lt;/a&gt;途中&lt;/h2&gt;
    
    </summary>
    
      <category term="记事" scheme="https://dbing.github.io/categories/%E8%AE%B0%E4%BA%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac与Linux 使用 scp 文件互相传输</title>
    <link href="https://dbing.github.io/2020/02/14/Mac%E4%B8%8ELinux-%E4%BD%BF%E7%94%A8-scp-%E6%96%87%E4%BB%B6%E4%BA%92%E7%9B%B8%E4%BC%A0%E8%BE%93/"/>
    <id>https://dbing.github.io/2020/02/14/Mac与Linux-使用-scp-文件互相传输/</id>
    <published>2020-02-14T10:22:08.000Z</published>
    <updated>2020-02-14T12:34:29.229Z</updated>
    
    <content type="html"><![CDATA[<h2 id="由远端-Linux-传输到本机-Mac"><a href="#由远端-Linux-传输到本机-Mac" class="headerlink" title="由远端 Linux 传输到本机 Mac"></a>由远端 Linux 传输到本机 Mac</h2><p>命令格式 <code>scp username@remote_ip:remote_folder local_folder</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -i ~/.ssh/company/neox/demo-key.pem root@ip:/usr/share/demo.csv ./</span><br></pre></td></tr></table></figure><h2 id="由到本机-Mac-传输到远端-Linux"><a href="#由到本机-Mac-传输到远端-Linux" class="headerlink" title="由到本机 Mac 传输到远端 Linux"></a>由到本机 Mac 传输到远端 Linux</h2><p>命令格式 <code>scp local_file remote_username@remote_ip:remote_folder</code></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>Q1: permissions are too open</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added <span class="string">'host'</span> (ECDSA) to the list of known hosts.</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">Permissions 0644 <span class="keyword">for</span> <span class="string">'/Users/bing/.ssh/company/neox/prod-neox-aliyun-key.pem'</span> are too open.</span><br><span class="line">It is required that your private key files are NOT accessible by others.</span><br><span class="line">This private key will be ignored.</span><br><span class="line">Load key <span class="string">"/Users/bing/.ssh/company/neox/prod-neox-aliyun-key.pem"</span>: bad permissions</span><br></pre></td></tr></table></figure><p>解决办法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 ~/.ssh/company/neox/prod-neox-aliyun-key.pem</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">chmod 600 ~/.ssh/company/neox/prod-neox-aliyun-key.pem</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;由远端-Linux-传输到本机-Mac&quot;&gt;&lt;a href=&quot;#由远端-Linux-传输到本机-Mac&quot; class=&quot;headerlink&quot; title=&quot;由远端 Linux 传输到本机 Mac&quot;&gt;&lt;/a&gt;由远端 Linux 传输到本机 Mac&lt;/h2&gt;&lt;p&gt;命令
      
    
    </summary>
    
    
      <category term="scp" scheme="https://dbing.github.io/tags/scp/"/>
    
  </entry>
  
  <entry>
    <title>李超致兄弟连全体学员、员工、股东的一封信</title>
    <link href="https://dbing.github.io/2020/02/10/%E6%9D%8E%E8%B6%85%E8%87%B4%E5%85%84%E5%BC%9F%E8%BF%9E%E5%85%A8%E4%BD%93%E5%AD%A6%E5%91%98%E3%80%81%E5%91%98%E5%B7%A5%E3%80%81%E8%82%A1%E4%B8%9C%E7%9A%84%E4%B8%80%E5%B0%81%E4%BF%A1/"/>
    <id>https://dbing.github.io/2020/02/10/李超致兄弟连全体学员、员工、股东的一封信/</id>
    <published>2020-02-10T15:07:38.000Z</published>
    <updated>2020-02-10T15:57:50.243Z</updated>
    
    <content type="html"><![CDATA[<p>平日里我是一个不刷「抖音」、不刷「微博」、不刷「头条」、偶尔刷刷「人民日报」、微信公众号技术文章，每天沉浸于自个的工作和所关注的那个点的领域，感觉自个不像个活在当下21世纪的。</p><p>今天朋友分享过来一篇文章<a href="https://mp.weixin.qq.com/s/Tcew-SDseA7fzW_e4LivMA" target="_blank" rel="noopener">致兄弟连全体学员、员工、股东的一封信</a>，这是这次「新型冠状病毒疫情」期间更有感触的消息了，身边一位北京老朋友从里面学出来的，自己「北京八维研修学院」、「上海弘烨」干了3年教育，也晓得兄弟连在同行中的体量，他没能挺过这冬天还真是出乎意料。</p><p>从这封信中我读出来了两种味道，一味是：因为疫情问题，如他所说恢复时间根据疫情防控工作情况另行通知，让一直亏损的兄弟连无疑是雪上加霜，导致最终没能挺过来。教育行业的利润怎样是行业中有目共睹的，生源决定命脉「入口」，结果系着生源「出口」。我的孙院长曾这么给我说过，把握住这两口也就把握住了学校。想想不无道理。他从零做到了1000多学员的规模用2年的时间。可谓速度之快。<code>PHP</code>的大环境在18、19年就开始出现下滑趋势，19年尤其不怎么好的情况。同样不好的处境还有我一个上海创业开培训的老同事，机构就先不说，说了你也不晓得。</p><p>二味是：有这么一位义无反馈支持自己的妻子，我想这也应该是他成功的原因吧。</p><p>最后道别兄弟连、保重李超。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平日里我是一个不刷「抖音」、不刷「微博」、不刷「头条」、偶尔刷刷「人民日报」、微信公众号技术文章，每天沉浸于自个的工作和所关注的那个点的领域，感觉自个不像个活在当下21世纪的。&lt;/p&gt;
&lt;p&gt;今天朋友分享过来一篇文章&lt;a href=&quot;https://mp.weixin.qq
      
    
    </summary>
    
      <category term="记事" scheme="https://dbing.github.io/categories/%E8%AE%B0%E4%BA%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo docsify 添加 Gitalk</title>
    <link href="https://dbing.github.io/2020/02/09/Hexo-docsify-%E6%B7%BB%E5%8A%A0-Gitalk/"/>
    <id>https://dbing.github.io/2020/02/09/Hexo-docsify-添加-Gitalk/</id>
    <published>2020-02-09T11:48:07.000Z</published>
    <updated>2020-02-09T13:29:52.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h2><p><a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md" target="_blank" rel="noopener">官方地址</a></p><p><a href="https://gitalk.github.io/" target="_blank" rel="noopener">体验地址</a></p><blockquote><p>为 Hexo 的 <code>even</code>主题添加<code>gitalk</code>评论系统</p></blockquote><h2 id="创建-gitalk-文件"><a href="#创建-gitalk-文件" class="headerlink" title="创建 gitalk 文件"></a>创建 gitalk 文件</h2><p>在<code>themes/even/layout/_script/_comments</code>目录下新增<code>gitalk.swig</code>文件，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.comments &amp;&amp; theme.gitalk.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for('js/src') &#125;&#125;/md5.min.js?v=&#123;&#123; theme.version &#125;&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        var gitalk = new Gitalk(&#123;</span></span><br><span class="line"><span class="undefined">          clientID: '&#123;&#123; theme.gitalk.clientID &#125;&#125;',</span></span><br><span class="line"><span class="undefined">          clientSecret: '&#123;&#123; theme.gitalk.clientSecret &#125;&#125;',</span></span><br><span class="line"><span class="undefined">          repo: '&#123;&#123; theme.gitalk.repo &#125;&#125;',</span></span><br><span class="line"><span class="undefined">          owner: '&#123;&#123; theme.gitalk.owner &#125;&#125;',</span></span><br><span class="line"><span class="undefined">          admin: ['&#123;&#123; theme.gitalk.admin &#125;&#125;'],</span></span><br><span class="line"><span class="undefined">          id: md5(location.pathname),</span></span><br><span class="line"><span class="undefined">          distractionFreeMode: '&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;'</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">        gitalk.render('gitalk-container')</span></span><br><span class="line"><span class="undefined">       </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>为了解决「常见问题」中1，这里引用<code>md5.min.js</code>文件，然后将<code>id</code>，通过<code>md5</code>函数加密后再请求<code>github issue</code>API，<code>md5.min.js</code>文件我放在<code>themes/even/source/js/src/md5.min.js</code>目录，当然你也可以引入远程地址，<a href="https://github.com/blueimp/JavaScript-MD5/blob/master/js/md5.min.js" target="_blank" rel="noopener">md5库地址</a></p><h2 id="添加-gitalk-判断逻辑"><a href="#添加-gitalk-判断逻辑" class="headerlink" title="添加 gitalk 判断逻辑"></a>添加 gitalk 判断逻辑</h2><p><code>themes/even/layout/_partial/comments.swig</code>添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% elseif theme.gitalk.enable %&#125;</span><br><span class="line">    &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;  </span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>if elseif endif</code> 语法。</p></blockquote><h2 id="引入-gitalk"><a href="#引入-gitalk" class="headerlink" title="引入 gitalk"></a>引入 gitalk</h2><p>在<code>themes/even/layout/_script/comments.swig</code>文件中引入<code>gitalk.swig</code>文件，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.gitalk.enable %&#125;</span><br><span class="line">  &#123;% include &apos;_comments/gitalk.swig&apos; %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="配置-gitalk"><a href="#配置-gitalk" class="headerlink" title="配置 gitalk"></a>配置 gitalk</h2><p>配置<code>themes/even/_config.yml</code>中关于<code>gitalk</code>的配置，新增代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Gitalk</span><br><span class="line"># more info please open https://github.com/gitalk/gitalk</span><br><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  clientID: xxxxxxx</span><br><span class="line">  clientSecret: yyyyyyyyyyy</span><br><span class="line">  repo: &apos;dbing.github.io&apos;</span><br><span class="line">  owner: &apos;dbing&apos;</span><br><span class="line">  admin: &apos;dbing&apos;</span><br><span class="line">  distractionFreeMode: true</span><br></pre></td></tr></table></figure><p>没有<code>clientID</code>和<code>clientSecret</code>，<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击申请</a>，配置完以上恭喜你，重新生产部署一下你的博客文章命令：<code>hexo g -d</code>，打开文章详情页看看是否多出了评论框 :)</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>Q1.Error: Validation Failed.</p><p>解决方法：<a href="https://github.com/gitalk/gitalk/issues/115#issuecomment-375954482" target="_blank" rel="noopener">https://github.com/gitalk/gitalk/issues/115#issuecomment-375954482</a></p><p>打开<code>Network</code>看请求，多半是因为<code>github issues</code>接口错误，以上方案给出的很详细。</p><p>Q2.Error: Issues are disabled for this repo</p><p>解决方法：<a href="https://github.com/imsun/gitment/issues/125" target="_blank" rel="noopener">https://github.com/imsun/gitment/issues/125</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Gitalk&quot;&gt;&lt;a href=&quot;#Gitalk&quot; class=&quot;headerlink&quot; title=&quot;Gitalk&quot;&gt;&lt;/a&gt;Gitalk&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/gitalk/gitalk/blob/master/
      
    
    </summary>
    
    
      <category term="gittalk" scheme="https://dbing.github.io/tags/gittalk/"/>
    
  </entry>
  
  <entry>
    <title>因PHP内存超出限制导致首页500</title>
    <link href="https://dbing.github.io/2020/02/06/%E5%9B%A0PHP%E5%86%85%E5%AD%98%E8%B6%85%E5%87%BA%E9%99%90%E5%88%B6%E5%AF%BC%E8%87%B4%E9%A6%96%E9%A1%B5500/"/>
    <id>https://dbing.github.io/2020/02/06/因PHP内存超出限制导致首页500/</id>
    <published>2020-02-06T13:32:41.000Z</published>
    <updated>2020-02-09T11:39:31.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现场"><a href="#现场" class="headerlink" title="现场"></a>现场</h2><p>事发后的某一段<code>log</code>日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[2020-02-06 14:09:20] production.ERROR: Symfony\Component\Debug\Exception\FatalErrorException: Allowed memory size of 134217728 bytes exhausted (tried to allocate 1191936 bytes) in /project-path/vendor/jenssegers/mongodb/src/Jenssegers/Mongodb/Query/Builder.php:373</span><br><span class="line">Stack trace:</span><br><span class="line">#0 &#123;main&#125;</span><br></pre></td></tr></table></figure><img src="/2020/02/06/因PHP内存超出限制导致首页500/500.png" width="500"><h2 id="临时解决办法"><a href="#临时解决办法" class="headerlink" title="临时解决办法"></a>临时解决办法</h2><p>放开PHP内存限制，修改<code>php.ini</code>，中<code>memory_limit=-1</code>，然后重启，<code>php-fpm</code> 服务，<code>sudo service php7.1-fpm restart</code></p><p>网站恢复访问后，排查首页代码，定位手改一处过大查询代码（前人遗留）。</p><h2 id="问题代码"><a href="#问题代码" class="headerlink" title="问题代码"></a>问题代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据发布时间倒序获取新闻 首页用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int $limit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNewsAtIndexPage</span><span class="params">($limit = <span class="number">5</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $newsList = [];</span><br><span class="line">    $rawNews = (<span class="keyword">new</span> Filter())-&gt;getEnableDisplay()-&gt;sortByPublishAt()-&gt;getNews();</span><br><span class="line">    <span class="keyword">foreach</span> ($rawNews <span class="keyword">as</span> $news) &#123;</span><br><span class="line">        $newsList[] = [</span><br><span class="line">            <span class="string">'url'</span>   =&gt; <span class="keyword">$this</span>-&gt;getNewsPublishURL($news[<span class="string">'type'</span>], $news[<span class="string">'_id'</span>],<span class="keyword">false</span>),</span><br><span class="line">            <span class="string">'title'</span> =&gt; $news[<span class="string">'title'</span>],</span><br><span class="line">            <span class="string">'cover'</span> =&gt; $news[<span class="string">'cover'</span>],</span><br><span class="line">            <span class="string">'publish_at'</span>=&gt; $news[<span class="string">'publish_at'</span>]</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">if</span>(count($newsList) == $limit) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $newsList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getNews</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;model-&gt;get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化前后结果"><a href="#优化前后结果" class="headerlink" title="优化前后结果"></a>优化前后结果</h2><img src="/2020/02/06/因PHP内存超出限制导致首页500/1.png"><img src="/2020/02/06/因PHP内存超出限制导致首页500/2.png"><img src="/2020/02/06/因PHP内存超出限制导致首页500/code.png" title="code"><h2 id="好文推荐"><a href="#好文推荐" class="headerlink" title="好文推荐"></a>好文推荐</h2><ul><li><a href="https://juejin.im/post/5aa7c5575188255589497de2" target="_blank" rel="noopener">PHP 内存泄漏分析定位</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;现场&quot;&gt;&lt;a href=&quot;#现场&quot; class=&quot;headerlink&quot; title=&quot;现场&quot;&gt;&lt;/a&gt;现场&lt;/h2&gt;&lt;p&gt;事发后的某一段&lt;code&gt;log&lt;/code&gt;日志&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>因更换SSL证书安卓APP和CDN停止服务</title>
    <link href="https://dbing.github.io/2020/02/06/%E5%9B%A0%E6%9B%B4%E6%8D%A2SSL%E8%AF%81%E4%B9%A6%E5%AE%89%E5%8D%93APP%E5%92%8CCDN%E5%81%9C%E6%AD%A2%E6%9C%8D%E5%8A%A1/"/>
    <id>https://dbing.github.io/2020/02/06/因更换SSL证书安卓APP和CDN停止服务/</id>
    <published>2020-02-06T13:30:13.000Z</published>
    <updated>2020-02-06T14:35:22.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现场"><a href="#现场" class="headerlink" title="现场"></a>现场</h2><ol><li>网站样式图片全丢，通过<code>network</code>看到所有<code>css</code>、<code>js</code>、<code>image</code>，都指向到<code>static.shenjumiaosuan.com</code>，响应状态<code>502</code>，我们的静态资源使用的是七牛<code>CDN</code>服务，当日因我们的<code>ssl</code>年证书到期，已经更换为新证书。</li></ol><img src="/2020/02/06/因更换SSL证书安卓APP和CDN停止服务/cdn.png" title="七牛CDN"><img src="/2020/02/06/因更换SSL证书安卓APP和CDN停止服务/502.png" width="502"><ol start="2"><li>安卓开发者反馈，安卓客户端无法打开，所有<code>api</code>均无法正常请求，同时<code>ios</code>确是好的（是不是很惊喜、很意外）。后了解到安卓是需要中间证书。</li></ol><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol><li>静态CDN域<code>static.shenjumiaosuan.com</code>，通过项目<code>.env</code>配置切换到本站<code>www.shenjumiaosuan.com</code></li><li>SSL证书紧急切换为之前旧证书</li><li>重新下载新证书，并拼接上中间证书，重新上传</li></ol><h2 id="证书续期"><a href="#证书续期" class="headerlink" title="证书续期"></a>证书续期</h2><p>因我们的域名是在爱名网，故以下有在爱名网操作步骤：</p><p>1、 缴费续期后通过openssl生成新的CSR。参考文档<a href="https://ssl.22.cn/Helper/Details/347（也可使用相关在线工具https://myssl.com/csr_create.html）。" target="_blank" rel="noopener">https://ssl.22.cn/Helper/Details/347（也可使用相关在线工具https://myssl.com/csr_create.html）。</a></p><p>2、得到private.key和csr.pem后，将csr提交到爱名网，并将文件存档。</p><p>3、域名续期进入审核状态，需要联系客服进行认证。认证流程中需要将对方给到的字符串解进行dns解析（@ TXT记录），等待审核通过后可以通过爱名网下载域名的crt签名。</p><h2 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h2><p>将中间人证书补充到签发的证书中</p><img src="/2020/02/06/因更换SSL证书安卓APP和CDN停止服务/ssl.png"><p>因涉及公司隐私，暂不提供参考图。</p><p>1、查找邮箱链接找到链接，进入后填写邮件标题中的订单号和邮箱进入后，点击request access</p><p>2、通过邮件链接下载证书颁发机构的附加证书</p><p>私钥部分：private.key<br>公钥部分：<br>拼装爱名网下载的crt+中间人crt，格式如下（检查空格回车）：</p><img src="/2020/02/06/因更换SSL证书安卓APP和CDN停止服务/crt.png"><h2 id="上传证书"><a href="#上传证书" class="headerlink" title="上传证书"></a>上传证书</h2><p>阿里云lbs：<br>证书管理 &gt;&gt; 创建证书（上传非阿里云签发证书） &gt;&gt; 替换证书</p><p>七牛云：<br>证书服务 &gt;&gt; 上传自有证书<br>CDN &gt;&gt; 域名管理 &gt;&gt; 配置 &gt;&gt; 更换证书</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>内部 wiki</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;现场&quot;&gt;&lt;a href=&quot;#现场&quot; class=&quot;headerlink&quot; title=&quot;现场&quot;&gt;&lt;/a&gt;现场&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;网站样式图片全丢，通过&lt;code&gt;network&lt;/code&gt;看到所有&lt;code&gt;css&lt;/code&gt;、&lt;code&gt;js&lt;/co
      
    
    </summary>
    
    
      <category term="ssl证书" scheme="https://dbing.github.io/tags/ssl%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Python 入门指南</title>
    <link href="https://dbing.github.io/2020/02/06/Python-%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://dbing.github.io/2020/02/06/Python-入门指南/</id>
    <published>2020-02-06T07:05:20.000Z</published>
    <updated>2020-02-06T07:06:07.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>快速搞定<code>Python</code>语法</p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><p><a href="http://ddrv.cn/docs/pythontutorial3/" target="_blank" rel="noopener">http://ddrv.cn/docs/pythontutorial3/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;快速搞定&lt;code&gt;Python&lt;/code&gt;语法&lt;/p&gt;
&lt;h2 id=&quot;学习资料&quot;&gt;&lt;a href=&quot;#学习资料&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="python" scheme="https://dbing.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>anaconda 和 zsh 不兼容问题</title>
    <link href="https://dbing.github.io/2020/02/06/anaconda-%E5%92%8C-zsh-%E4%B8%8D%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/"/>
    <id>https://dbing.github.io/2020/02/06/anaconda-和-zsh-不兼容问题/</id>
    <published>2020-02-06T04:56:59.000Z</published>
    <updated>2020-02-20T15:10:17.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>错误场景：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ /Users/bing/.anaconda/navigator/a.tool ; <span class="built_in">exit</span>;</span><br><span class="line">/Users/bing/.anaconda/navigator/a.tool: line 1: syntax error near unexpected token `(<span class="string">'</span></span><br><span class="line"><span class="string">/Users/bing/.anaconda/navigator/a.tool: line 1: `bash --init-file &lt;(echo "source activate /Users/bing/opt/anaconda3/envs/my-opencv;")'</span></span><br></pre></td></tr></table></figure><img src="/2020/02/06/anaconda-和-zsh-不兼容问题/error.png"><h2 id="临时解决方法"><a href="#临时解决方法" class="headerlink" title="临时解决方法"></a>临时解决方法</h2><p>切换到<code>bash</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/bash</span><br></pre></td></tr></table></figure><p>通过<code>conda</code>GUI，打开命令行后，再切换到<code>zsh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><h2 id="我使用了这个方法"><a href="#我使用了这个方法" class="headerlink" title="我使用了这个方法"></a>我使用了这个方法</h2><p>This problem is a problem with the zsh environment variable, the solution<br>echo ‘source ~/.bash_profile’ &gt;&gt; ~/.zshrc<br>Append the bash environment variable to zsh</p><p>链接：<a href="https://github.com/ContinuumIO/anaconda-issues/issues/1831#issuecomment-425714638" target="_blank" rel="noopener">https://github.com/ContinuumIO/anaconda-issues/issues/1831#issuecomment-425714638</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://iaside.com/archives/455" target="_blank" rel="noopener">https://iaside.com/archives/455</a></li><li><a href="https://github.com/ContinuumIO/anaconda-issues/issues/1831" target="_blank" rel="noopener">github issue</a></li><li><a href="https://stackoverflow.com/questions/54502718/cant-run-anaconda-in-macos-terminal" target="_blank" rel="noopener">stackoverflow</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;错误场景：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
    
      <category term="anaconda" scheme="https://dbing.github.io/tags/anaconda/"/>
    
  </entry>
  
  <entry>
    <title>opencv 对比度亮度调整</title>
    <link href="https://dbing.github.io/2020/02/06/opencv-%E5%AF%B9%E6%AF%94%E5%BA%A6%E4%BA%AE%E5%BA%A6%E8%B0%83%E6%95%B4/"/>
    <id>https://dbing.github.io/2020/02/06/opencv-对比度亮度调整/</id>
    <published>2020-02-05T16:34:07.000Z</published>
    <updated>2020-02-22T04:33:23.354Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>来源需要对一张图片，弱化背景效果的需求。与其说弱化不如说是把暗度调亮。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>图片对比度和亮度的调整一般通过下面公式计算：g(x,y)=a∗f(x,y)+b</p><p>f(x,y) 代表源图像 x行，y列的像素点的c通道的数值<br>g(x,y) 代表目标图像x行，y列的像素点的c通道的数值<br>a 参数（a&gt;0）表示放大的倍数（一般在0.0~3.0之间）<br>b 参数一般称为偏置，用来调节亮度</p><p>方案一代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  cv2</span><br><span class="line"></span><br><span class="line">img=cv2.imread(<span class="string">'test.jpg'</span>)</span><br><span class="line">cv2.imshow(<span class="string">'original_img'</span>,img)</span><br><span class="line">rows,cols,channels=img.shape</span><br><span class="line">dst=img.copy()</span><br><span class="line"></span><br><span class="line">a=<span class="number">0.5</span></span><br><span class="line">b=<span class="number">80</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(rows):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(cols):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            color=img[i,j][c]*a+b</span><br><span class="line">            <span class="keyword">if</span> color&gt;<span class="number">255</span>:           <span class="comment"># 防止像素值越界（0~255）</span></span><br><span class="line">                dst[i,j][c]=<span class="number">255</span></span><br><span class="line">            <span class="keyword">elif</span> color&lt;<span class="number">0</span>:           <span class="comment"># 防止像素值越界（0~255）</span></span><br><span class="line">                dst[i,j][c]=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">'dst'</span>,dst)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>方案二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contrast_img</span><span class="params">(img1, c, b)</span>:</span>  <span class="comment"># 亮度就是每个像素所有通道都加上b</span></span><br><span class="line">    rows, cols, channels = img1.shape</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新建全零(黑色)图片数组:np.zeros(img1.shape, dtype=uint8)</span></span><br><span class="line">    blank = np.zeros([rows, cols, channels], img1.dtype)</span><br><span class="line">    dst = cv2.addWeighted(img1, c, blank, <span class="number">1</span>-c, b)</span><br><span class="line">    cv2.imshow(<span class="string">'original_img'</span>, img)</span><br><span class="line">    cv2.imshow(<span class="string">"contrast_img"</span>, dst)</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">"./test.png"</span>, cv2.IMREAD_COLOR)</span><br><span class="line">contrast_img(img, <span class="number">1.3</span>, <span class="number">3</span>)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>原文来自 <a href="https://blog.csdn.net/wsp_1138886114/article/details/82624534" target="_blank" rel="noopener">csdn</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;p&gt;来源需要对一张图片，弱化背景效果的需求。与其说弱化不如说是把暗度调亮。&lt;/p&gt;
&lt;h2 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; clas
      
    
    </summary>
    
      <category term="计算机视觉" scheme="https://dbing.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="opencv" scheme="https://dbing.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>opencv 研究</title>
    <link href="https://dbing.github.io/2020/02/04/opencv-%E7%A0%94%E7%A9%B6/"/>
    <id>https://dbing.github.io/2020/02/04/opencv-研究/</id>
    <published>2020-02-04T14:34:32.000Z</published>
    <updated>2020-02-22T04:33:20.741Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>来自于公司<code>OCR</code>业务对图片中金额识别不精准（因分割金额的每个小格子存在竖虚线有时会被利用有道Api有时会误识别成金额1），现调研<code>OpenCV</code>如何处理此问题。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><blockquote><p>OpenCV是一个基于BSD许可（开源）发行的跨平台计算机视觉库，可以运行在Linux、Windows、Android和Mac OS操作系统上。它轻量级而且高效——由一系列 C 函数和少量 C++ 类构成，同时提供了Python、Ruby、MATLAB等语言的接口，实现了图像处理和计算机视觉方面的很多通用算法。</p></blockquote><p>以上是百度百科对<code>OpenCV</code>介绍，用<code>C++</code>去调用很显然不够现实，同时我查到了有开源作者贡献了<code>PHP</code>扩展，<a href="https://phpopencv.org/zh-cn/docs/install.html" target="_blank" rel="noopener">phpopencv</a>，只因这个扩展着实难编译出来（半个下午时间都采到这坑里了），没结果，最后无奈放弃（最后在<code>github</code>仓库看到可以<code>docker</code>安装，-_-||，只能说文档太旧没更新了）。</p><p>方案二：<a href="http://www.1zlab.com/wiki/python-opencv-tutorial/image-statistic-draw-curves/" target="_blank" rel="noopener">python-opencv</a> <code>docker</code>启动一个<code>ubuntu</code>容器，然后容器内安装<code>Anaconda</code>，<a href="https://www.digitalocean.com/community/tutorials/how-to-install-anaconda-on-ubuntu-18-04-quickstart" target="_blank" rel="noopener">参考自</a>，通过<code>conda</code>快速安装<code>opencv</code>，在利用文档说提供的现成<code>python</code>代码，马上<code>run</code>起<code>Demo</code>，爽的一批批，</p><p>用到的<code>conda</code>几个命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda search opencv</span><br><span class="line">conda install opencv=3.3.1</span><br><span class="line">conda env</span><br><span class="line">conda info --envs</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>虽然还没解决自个的问题，用下午1个多小时，已经快速完成数学形态学中（腐蚀、膨胀、开运算、闭运算）<code>Demo</code>实例。</p><p>补充 <code>opencv</code> 学习参考资料：<a href="https://github.com/MachineLP/OpenCV-" target="_blank" rel="noopener">github MachineLP</a></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://pypi.org/project/opencv-python/" target="_blank" rel="noopener">https://pypi.org/project/opencv-python/</a></li><li><a href="https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_tutorials.html#" target="_blank" rel="noopener">https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_tutorials.html#</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;来自于公司&lt;code&gt;OCR&lt;/code&gt;业务对图片中金额识别不精准（因分割金额的每个小格子存在竖虚线有时会被利用有道Api有时会误识别成金
      
    
    </summary>
    
      <category term="计算机视觉" scheme="https://dbing.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
      <category term="opencv" scheme="https://dbing.github.io/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>史记</title>
    <link href="https://dbing.github.io/2020/02/01/%E5%8F%B2%E8%AE%B0/"/>
    <id>https://dbing.github.io/2020/02/01/史记/</id>
    <published>2020-02-01T03:01:16.000Z</published>
    <updated>2020-02-22T10:04:27.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本纪"><a href="#本纪" class="headerlink" title="本纪"></a>本纪</h2><h3 id="五帝本纪"><a href="#五帝本纪" class="headerlink" title="五帝本纪"></a>五帝本纪</h3><p>汉代文学家司马迁创作的第一篇文章，位于《史记》首篇，记载远古传说中被后人尊称为五个部落联盟首领–黄帝、颛顼(zhuān xū)、帝喾（kù）、尧、舜的事迹。</p><h3 id="夏本纪"><a href="#夏本纪" class="headerlink" title="夏本纪"></a>夏本纪</h3><p>《夏本纪》创作于西汉，出自《史记卷二·夏本纪第二》。作品中主要记述了夏朝的历史。夏代年代久远，《夏本纪》中记载的内容是现代人研究夏代历史的重要参考资料。夏本是一个古老的部落，相传是由包括夏在内的十多个部落联合发展而来的，与古代其他部落交错分布于中国境内。到唐尧、虞舜时期，夏族的首领禹因治水有功，取得了帝位，并传给其子启，从而建立了我国历史上第一个奴隶制王朝。</p><h3 id="殷本纪"><a href="#殷本纪" class="headerlink" title="殷本纪"></a>殷本纪</h3><p>《殷本纪》是西汉史学家司马迁创作的一篇文言文，出自《史记卷三·殷本纪第三》。商朝是中国历史上的第二个朝代，从公元前1600年——公元前1046年，前后相传17世31王，延续约600年时间。相传商的始祖契曾帮助禹治水有功而受封于商（今河南商丘），以后就以“商”来称其部落（或部族）。汤灭夏后，就以“商”作为国号。其后裔盘庚迁殷（今河南安阳西北）后，首都没有再变化过，故又以称“殷朝”或“殷商”。</p><h3 id="周本纪"><a href="#周本纪" class="headerlink" title="周本纪"></a>周本纪</h3><p>《周本纪》是西汉史学家司马迁创作的一篇文言文，出自司马迁《史记》卷四、本纪第四。该作品概括地描述了周王朝兴衰的历史，勾画出一个天下朝宗、幅员辽阔的强大奴隶制王国的概貌，以及其间不同阶段不同君王厚民爱民或伤民虐民的不同政治作风，君臣之间协力相助共图大业或相互倾轧各执已见的不同政治气氛。</p><h3 id="秦本纪"><a href="#秦本纪" class="headerlink" title="秦本纪"></a>秦本纪</h3><p>《秦本纪》是西汉史学家司马迁创作的一篇文言文，出自《史记卷五·秦本纪第五》。主要讲述了春秋和战国时期的诸侯国秦国从兴起、发展到称霸天下、秦王嬴政统一全国之前的历史。</p><h3 id="秦始皇本纪"><a href="#秦始皇本纪" class="headerlink" title="秦始皇本纪"></a>秦始皇本纪</h3><p>《秦始皇本纪》出自《史记卷六·秦始皇本纪第六》，作者是司马迁。这篇本纪以编年记事的形式，记载了秦始皇赵政(嬴政)及秦二世赵胡亥一生的主要活动和所发生的重大事件，条理清晰，内容丰富，真实地反映了秦朝建立前后四十年间风云变幻的历史场面。<br>这篇本纪以秦始皇赵政(嬴政)和秦二世赵胡亥的活动为中心，逐年叙写，简中有繁，概括与重笔相间，通篇读来，不仅给人以历史的原貌，还可以使人感到一切都是历史的必然，两代帝王的形象活脱脱地呈现在眼前。</p><h3 id="项羽本纪"><a href="#项羽本纪" class="headerlink" title="项羽本纪"></a>项羽本纪</h3><p>《项羽本纪》是西汉史学家司马迁创作的一篇文言文，收录于《史记》中第七卷，是关于楚霸王项羽的本纪，它记录了秦末项羽光辉壮烈的一生。<br>《项羽本纪》通过叙述秦末农民大起义和楚汉之争的宏阔历史场面，生动而又深刻地描述了项羽一生。项羽既是一个力拔山、气盖世、“近古以来未尝有”的英雄，又是一个性情暴戾、优柔寡断、只知用武不谙机谋的匹夫。司马迁巧妙地把项羽性格中矛盾的各个侧面，有机地统一于这一鸿篇巨著之中，虽然不乏深刻的挞伐，但更多的却是由衷的惋惜和同情。<br>而在《史记》中，“本纪”所记录的大都是皇帝，其中项羽并没有成为皇帝，司马迁把他归入“本纪”则表现了对项羽的尊重。</p><h3 id="高祖本纪"><a href="#高祖本纪" class="headerlink" title="高祖本纪"></a>高祖本纪</h3><p>《高祖本纪》是西汉史学家司马迁创作的一篇文言文，收录于《史记》中。该文记述了汉高祖刘邦从布衣到皇帝的传奇一生。刘邦是汉朝的开国皇帝，庙号为太祖，谥号为高皇帝，所以史称太祖高皇帝、汉高祖或汉高帝。他对汉民族的统一、中国的强大和汉文化的保护和发扬有着决定性的贡献。</p><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><h2 id="书"><a href="#书" class="headerlink" title="书"></a>书</h2><h2 id="世家"><a href="#世家" class="headerlink" title="世家"></a>世家</h2><h2 id="列传"><a href="#列传" class="headerlink" title="列传"></a>列传</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://baike.baidu.com/item/%E5%8F%B2%E8%AE%B0/254522?fr=aladdin" target="_blank" rel="noopener">史记百科</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;本纪&quot;&gt;&lt;a href=&quot;#本纪&quot; class=&quot;headerlink&quot; title=&quot;本纪&quot;&gt;&lt;/a&gt;本纪&lt;/h2&gt;&lt;h3 id=&quot;五帝本纪&quot;&gt;&lt;a href=&quot;#五帝本纪&quot; class=&quot;headerlink&quot; title=&quot;五帝本纪&quot;&gt;&lt;/a&gt;五帝本纪&lt;/h
      
    
    </summary>
    
      <category term="每周阅读" scheme="https://dbing.github.io/categories/%E6%AF%8F%E5%91%A8%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="史记" scheme="https://dbing.github.io/tags/%E5%8F%B2%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Docker 基础命令</title>
    <link href="https://dbing.github.io/2020/01/29/Docker-%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>https://dbing.github.io/2020/01/29/Docker-基础命令/</id>
    <published>2020-01-29T08:26:09.000Z</published>
    <updated>2020-01-30T13:16:11.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录挂载"><a href="#目录挂载" class="headerlink" title="目录挂载"></a>目录挂载</h2><p>应用场景：启动容器，挂载宿主机的目录到容器目录，从而利用容器环境执行宿主机目录中代码。</p><p>可以通过<code>-v</code>参数指定要挂载宿主机的哪个目录，对应到容器内的目录，参考命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v /Users/bing/website/php-opencv:/work  morozovsk/php-opencv bash</span><br></pre></td></tr></table></figure><p>注意事项：</p><ol><li>容器目录不能是相对路径，否则会报错<code>invalid mount path:.....</code></li><li>宿主机目录如果不存在，会自动生成</li><li>修改容器内文件拥有者，会根据容器内文件用户id，对应修改宿主机上目录的拥有者为同一个UID</li></ol><p>如果宿主机为相对目录，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -v aaa:/work  morozovsk/php-opencv bash</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -v aaa:/work  morozovsk/php-opencv bash</span><br></pre></td></tr></table></figure></p><p>通过<code>inspect</code>查看，默认<code>Mounts</code>挂载位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect CONTAINER ID</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;aaa&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/aaa/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;/work&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;z&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure></p><h2 id="退出容器自动销毁"><a href="#退出容器自动销毁" class="headerlink" title="退出容器自动销毁"></a>退出容器自动销毁</h2><p>通过<code>--rm</code>参数完成</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目录挂载&quot;&gt;&lt;a href=&quot;#目录挂载&quot; class=&quot;headerlink&quot; title=&quot;目录挂载&quot;&gt;&lt;/a&gt;目录挂载&lt;/h2&gt;&lt;p&gt;应用场景：启动容器，挂载宿主机的目录到容器目录，从而利用容器环境执行宿主机目录中代码。&lt;/p&gt;
&lt;p&gt;可以通过&lt;code&gt;-
      
    
    </summary>
    
    
      <category term="docker" scheme="https://dbing.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Google cloud 搭建VPN</title>
    <link href="https://dbing.github.io/2020/01/29/Google-cloud-%E6%90%AD%E5%BB%BAVPN/"/>
    <id>https://dbing.github.io/2020/01/29/Google-cloud-搭建VPN/</id>
    <published>2020-01-29T06:08:27.000Z</published>
    <updated>2020-02-19T14:48:12.381Z</updated>
    
    <content type="html"><![CDATA[<p>安装步骤来源网络文章，这里仅用来做Mark记录，具体步骤见参考地址。</p><h2 id="开通Google-Cloud"><a href="#开通Google-Cloud" class="headerlink" title="开通Google Cloud"></a>开通Google Cloud</h2><p>国内已关闭信用卡可申请开通300$体验金渠道。</p><h2 id="创建Compute-Engine"><a href="#创建Compute-Engine" class="headerlink" title="创建Compute Engine"></a>创建Compute Engine</h2><ol><li>区域（台湾）</li><li>机器类型 g1-small 即可</li></ol><h2 id="配置VPC网络"><a href="#配置VPC网络" class="headerlink" title="配置VPC网络"></a>配置VPC网络</h2><ol><li>防火墙规则，【入站】和【出站】所有协议允许</li><li>外部 IP 地址，类型设置为【静态】</li></ol><h2 id="执行安装脚本"><a href="#执行安装脚本" class="headerlink" title="执行安装脚本"></a>执行安装脚本</h2><p>客户端 shadowsocks，选择 shadowsocksR: 输入: 2</p><h2 id="朋友推荐的方法"><a href="#朋友推荐的方法" class="headerlink" title="朋友推荐的方法"></a>朋友推荐的方法</h2><p>用以上方式在谷歌云搞，老是被封，听同事分享了一下他自建的方式，自己一个人很是稳定</p><p>服务买自：<a href="https://www.dogyun.com/" target="_blank" rel="noopener">https://www.dogyun.com/</a> 和 <a href="https://www.gigsgigscloud.com/" target="_blank" rel="noopener">https://www.gigsgigscloud.com/</a></p><p>建议买在日本（cn2 gia）专线（据说），开源程序采用：(v2ray)[<a href="https://github.com/v2ray/v2ray-core]" target="_blank" rel="noopener">https://github.com/v2ray/v2ray-core]</a></p><p>一篇文章：<a href="https://www.zrblog.net/22546.html" target="_blank" rel="noopener">https://www.zrblog.net/22546.html</a></p><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><ul><li><a href="https://vschk.wordpress.com/2019/07/05/%E8%B0%B7%E6%AD%8C%E4%BA%91%EF%BC%88google-cloud%EF%BC%89%E6%90%AD%E5%BB%BAssr%E6%95%99%E7%A8%8B%EF%BC%8C%E5%85%8D%E5%AE%89%E8%A3%9Dbbr/" target="_blank" rel="noopener">https://vschk.wordpress.com/2019/07/05/%E8%B0%B7%E6%AD%8C%E4%BA%91%EF%BC%88google-cloud%EF%BC%89%E6%90%AD%E5%BB%BAssr%E6%95%99%E7%A8%8B%EF%BC%8C%E5%85%8D%E5%AE%89%E8%A3%9Dbbr/</a></li><li><a href="https://www.veryopen.org/?p=3580" target="_blank" rel="noopener">https://www.veryopen.org/?p=3580</a></li><li><a href="https://fengooge.blogspot.com/2019/06/how-to-build-shadowsocks-with-google-cloud-platform.html" target="_blank" rel="noopener">https://fengooge.blogspot.com/2019/06/how-to-build-shadowsocks-with-google-cloud-platform.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装步骤来源网络文章，这里仅用来做Mark记录，具体步骤见参考地址。&lt;/p&gt;
&lt;h2 id=&quot;开通Google-Cloud&quot;&gt;&lt;a href=&quot;#开通Google-Cloud&quot; class=&quot;headerlink&quot; title=&quot;开通Google Cloud&quot;&gt;&lt;/a&gt;开通
      
    
    </summary>
    
    
      <category term="vpn" scheme="https://dbing.github.io/tags/vpn/"/>
    
  </entry>
  
  <entry>
    <title>快速搭建Jenkins</title>
    <link href="https://dbing.github.io/2020/01/21/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAJenkins/"/>
    <id>https://dbing.github.io/2020/01/21/快速搭建Jenkins/</id>
    <published>2020-01-21T10:49:38.000Z</published>
    <updated>2020-01-22T08:18:47.935Z</updated>
    
    <content type="html"><![CDATA[<p>研究 Jenkins 一日，简结下结果</p><ol><li><p>利用 gitlab webhooks 配合 jenkins 完成测试服代码自动集成</p></li><li><p>通过 jenkins 发布指定分支或tag代码到生产服务器</p></li></ol><p>对于<code>jenkins</code>的安装，因为环境不同，网络上也有一大把文章，对此先不做介绍。</p><p>对于不会写<code>Jenkinsfile</code>以及不想花费过多时间就想把<code>jenkins</code>玩转，还是有难度的，研究时间有限也不愿意在这上面投入时间了，玩过了才方知感受。</p><h2 id="采坑"><a href="#采坑" class="headerlink" title="采坑"></a>采坑</h2><ol><li><code>jenkins</code>过滤空目录问题</li></ol><p>Send files or execute commands over SSH after the build runs 过滤空目录问题</p><p>解决方式：-&gt;高级-&gt;Make empty dirs【打钩】此项<br>参考地址：<a href="http://ant.apache.org/manual/dirtasks.html#patterns" target="_blank" rel="noopener">http://ant.apache.org/manual/dirtasks.html#patterns</a></p><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><ul><li><a href="https://juejin.im/post/5dce6b3a5188254eed5b23a2#heading-4" target="_blank" rel="noopener">https://juejin.im/post/5dce6b3a5188254eed5b23a2#heading-4</a> </li><li><a href="https://www.cnblogs.com/saysmy/p/8806975.html" target="_blank" rel="noopener">https://www.cnblogs.com/saysmy/p/8806975.html</a></li><li><a href="https://yq.aliyun.com/articles/485296?spm=a2c4e.11153940.0.0.69de5f54y6etf3" target="_blank" rel="noopener">https://yq.aliyun.com/articles/485296?spm=a2c4e.11153940.0.0.69de5f54y6etf3</a></li><li><a href="https://www.cloudcared.cn/2792.html" target="_blank" rel="noopener">https://www.cloudcared.cn/2792.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;研究 Jenkins 一日，简结下结果&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;利用 gitlab webhooks 配合 jenkins 完成测试服代码自动集成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过 jenkins 发布指定分支或tag代码到生产服务器&lt;/p&gt;
&lt;/li&gt;
&lt;/
      
    
    </summary>
    
    
      <category term="持续交付" scheme="https://dbing.github.io/tags/%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>Nginx proxy_pass upstream resolver</title>
    <link href="https://dbing.github.io/2020/01/20/Nginx-proxy-pass-upstream-resolver/"/>
    <id>https://dbing.github.io/2020/01/20/Nginx-proxy-pass-upstream-resolver/</id>
    <published>2020-01-20T10:15:57.000Z</published>
    <updated>2020-01-22T08:19:44.259Z</updated>
    
    <content type="html"><![CDATA[<p>总结很到位，还未有时间细细品味mark一下</p><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><ul><li><a href="https://www.jianshu.com/p/5caa48664da5" target="_blank" rel="noopener">https://www.jianshu.com/p/5caa48664da5</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;总结很到位，还未有时间细细品味mark一下&lt;/p&gt;
&lt;h2 id=&quot;参考地址&quot;&gt;&lt;a href=&quot;#参考地址&quot; class=&quot;headerlink&quot; title=&quot;参考地址&quot;&gt;&lt;/a&gt;参考地址&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jiansh
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>nohup screen tmux 远程会话保持</title>
    <link href="https://dbing.github.io/2020/01/20/nohup-screen-tmux-%E8%BF%9C%E7%A8%8B%E4%BC%9A%E8%AF%9D%E4%BF%9D%E6%8C%81/"/>
    <id>https://dbing.github.io/2020/01/20/nohup-screen-tmux-远程会话保持/</id>
    <published>2020-01-20T10:10:01.000Z</published>
    <updated>2020-01-20T10:10:01.257Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Docker 搭建 Gitlab 服务</title>
    <link href="https://dbing.github.io/2020/01/15/Docker-%E6%90%AD%E5%BB%BA-Gitlab-%E6%9C%8D%E5%8A%A1/"/>
    <id>https://dbing.github.io/2020/01/15/Docker-搭建-Gitlab-服务/</id>
    <published>2020-01-15T08:56:26.000Z</published>
    <updated>2020-03-15T14:05:54.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>公司使用的<code>bitbucket</code>提供的<code>git</code>远程仓库，为什么选择他历史原因喽，回想第一天克隆一个<code>1G+</code>的<code>repo</code>等待了一天，这个痛苦啊。最近的每次发版都着实的感觉到<code>bitbucket</code>慢的给蜗牛一样（应该是墙的问题每次都得开VPN才能正常玩啥），鉴于此情况下，决定使用自建<code>Gitlab</code>服务，选择华东(上海)地区机房，日本团队的小伙伴测试的速度<code>400M+</code>大小的<code>repo</code>，克隆下来30分钟左右。</p><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p>Ubuntu 安装 Docker，官方文档：<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/ubuntu/</a></p><ol><li><p>更新 apt 包索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装最新版本的 Docker Engine-Community和containerd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>查看安装成功的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@jira:~# docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           19.03.5</span><br><span class="line"> API version:       1.40</span><br><span class="line"> Go version:        go1.12.12</span><br><span class="line"> Git commit:        633a0ea838</span><br><span class="line"> Built:             Wed Nov 13 07:50:12 2019</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      false</span><br><span class="line"> ...</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure></li></ol><h2 id="Docker-下快速部署-Gitlab-服务"><a href="#Docker-下快速部署-Gitlab-服务" class="headerlink" title="Docker 下快速部署 Gitlab 服务"></a>Docker 下快速部署 Gitlab 服务</h2><p>使用开源的<a href="https://github.com/sameersbn/docker-gitlab" target="_blank" rel="noopener">Gitlab</a> <code>docker-compose.yml</code>快速搭建，</p><p>我计划将<code>gitlab</code>服务放在<code>/usr/local/gitlab</code>目录，故创建了此目录</p><ol><li><p>下载<code>docker-compose.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/local/gitlab &amp;&amp; cd /usr/local/gitlab</span><br><span class="line">wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml</span><br></pre></td></tr></table></figure></li><li><p>修改<code>docker-compose.yml</code>配置项，这里仅贴出修改过的配置项</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 时区</span><br><span class="line">- TZ=Asia/Shanghai</span><br><span class="line">- GITLAB_TIMEZONE=PRC</span><br><span class="line"></span><br><span class="line"># 开启SSL</span><br><span class="line">- GITLAB_HTTPS=true</span><br><span class="line"></span><br><span class="line"># Gitlab 域和端口，域名不要带协议如（http://或https://）</span><br><span class="line">- GITLAB_HOST=git.neox-inc.com</span><br><span class="line">- GITLAB_PORT=443</span><br><span class="line">- GITLAB_SSH_PORT=22</span><br></pre></td></tr></table></figure><p>这里我对外暴露的是<code>9180</code>和<code>9122</code>端口，然后在负载均衡器中配置<code>SSL</code>证书，完成对<code>https</code>的访问，如需<code>ssh</code>方式访问，负载均衡器中还需配置<code>22=&gt;9122</code>的转发，负载均衡器配置图见下图。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gitlab:</span><br><span class="line">   restart: always</span><br><span class="line">   image: sameersbn/gitlab:12.5.5</span><br><span class="line">   depends_on:</span><br><span class="line">   - redis</span><br><span class="line">   - postgresql</span><br><span class="line">   ports:</span><br><span class="line">   - &quot;9180:80&quot;</span><br><span class="line">   - &quot;9122:22&quot;</span><br><span class="line">   - &quot;443:443&quot;</span><br><span class="line">   volumes:</span><br><span class="line">   - ./gitlab-data:/home/git/data:Z</span><br></pre></td></tr></table></figure><p>为更日后更方便迁移gitlab服务，<code>redis-data</code>、<code>postgresql-data</code>、<code>gitlab-data</code>volumes，这里我分别配置成相对’./‘目录</p><ol start="3"><li>安装 docker-compose<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install docker-compose</span><br></pre></td></tr></table></figure></li></ol><p>或者通过<code>pip</code>安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install docker-compose==1.8.0</span><br></pre></td></tr></table></figure></p><p>不推荐如下<code>curl</code>方式安装（你要问为什么？下载速度比乌龟爬的都慢「龟速」）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.8.0/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p>4.启动 gitlab 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><ol start="5"><li>访问 gitlab 服务</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip:9180</span><br></pre></td></tr></table></figure><p>如果你是域名直接解析到本地，那么可以通过域名访问。</p><h2 id="特殊场景"><a href="#特殊场景" class="headerlink" title="特殊场景"></a>特殊场景</h2><p>我司<code>ssl</code>证书统一管理在阿里云负载均衡器上，为了日后方便统一更换过期证书，<code>gitlab</code>服务也使用负载均衡器。通过研究阿里云负载均衡器发现,不支持前端协议<code>http</code>转后端协议<code>tcp</code>。</p><p>那么问题来了，<code>docker-compose</code>启的服务全部都是<code>tcp</code>协议，那么如何完成<code>ssl</code>即<code>http</code>前端协议转后端某个端口的<code>http</code>协议呢？</p><p>经过思考，只得借用<code>nginx</code>转发实现，配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">upstream git.neox-inc.com &#123;</span><br><span class="line">        server ip:9180;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">        server_name git.neox-inc.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://git.neox-inc.com;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>均衡器中监听配置图</p><img src="/2020/01/15/Docker-搭建-Gitlab-服务/gitlab.png" class="[class names]" title="[width] [height] [阿里云负载均衡器截图 [均衡器配置]]"><h2 id="批量导入用户"><a href="#批量导入用户" class="headerlink" title="批量导入用户"></a>批量导入用户</h2><p>参考地址：<a href="https://www.jianshu.com/p/83b06525c946" target="_blank" rel="noopener">https://www.jianshu.com/p/83b06525c946</a></p><h2 id="温馨提醒"><a href="#温馨提醒" class="headerlink" title="温馨提醒"></a>温馨提醒</h2><p>为了方便后期迁移<code>Gitlab</code>到别的服务器，强烈建议将数据目录配置<code>gitlab-data</code>数据目录，方便迁移（不远的3个月我就迁移过，甚是方便:-)）</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>docker-compose 卸载方式：</p><ol><li>删除对应的二进制文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>2.<code>pip</code>方式卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall docker-compose</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;p&gt;公司使用的&lt;code&gt;bitbucket&lt;/code&gt;提供的&lt;code&gt;git&lt;/code&gt;远程仓库，为什么选择他历史原因喽，回想第一天克隆
      
    
    </summary>
    
    
      <category term="Gitlab" scheme="https://dbing.github.io/tags/Gitlab/"/>
    
  </entry>
  
  <entry>
    <title>ZSH快捷键</title>
    <link href="https://dbing.github.io/2020/01/14/ZSH%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://dbing.github.io/2020/01/14/ZSH快捷键/</id>
    <published>2020-01-14T06:00:57.000Z</published>
    <updated>2020-01-14T06:07:43.330Z</updated>
    
    <content type="html"><![CDATA[<p>⌃ + u：清空当前行<br>⌃ + a：移动到行首<br>⌃ + e：移动到行尾<br>⌃ + f：向前移动<br>⌃ + b：向后移动<br>⌃ + p：上一条命令<br>⌃ + n：下一条命令<br>⌃ + r：搜索历史命令<br>⌃ + y：召回最近用命令删除的文字<br>⌃ + h：删除光标之前的字符<br>⌃ + d：删除光标所指的字符<br>⌃ + w：删除光标之前的单词<br>⌃ + k：删除从光标到行尾的内容<br>⌃ + t：交换光标和之前的字符</p><p>⌘ + Click：可以打开文件，文件夹和链接<br>⌘ + n：新建窗口<br>⌘ + t：新建标签页<br>⌘ + w：关闭当前页<br>⌘ + 数字 &amp; ⌘ + 方向键：切换标签页<br>⌥⌘ + 数字：切换窗口<br>⌘ + enter：切换全屏<br>⌘ + d：左右分屏<br>⇧⌘ + d：上下分屏<br>⌘ + ;：自动补全历史记录<br>⇧⌘ + h：自动补全剪贴板历史<br>⌥⌘ + e：查找所有来定位某个标签页<br>⌘ + r &amp; ⌃ + l：清屏<br>⌘ + /：显示光标位置<br>⌥⌘ + b：历史回放<br>⌘ + f：查找，然后用 tab 和 ⇧ + tab 可以向右和向左补全，补全之后的内容会被自动复制， 还可以用 ⌥ + enter 将查找结果输入终端<br>选中即复制，鼠标中键粘贴</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;⌃ + u：清空当前行&lt;br&gt;⌃ + a：移动到行首&lt;br&gt;⌃ + e：移动到行尾&lt;br&gt;⌃ + f：向前移动&lt;br&gt;⌃ + b：向后移动&lt;br&gt;⌃ + p：上一条命令&lt;br&gt;⌃ + n：下一条命令&lt;br&gt;⌃ + r：搜索历史命令&lt;br&gt;⌃ + y：召回最近用命令删除的文字
      
    
    </summary>
    
    
      <category term="zsh" scheme="https://dbing.github.io/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>使用 supervisor 监控Laravel queue 消费队列</title>
    <link href="https://dbing.github.io/2020/01/10/%E4%BD%BF%E7%94%A8-supervisor-%E7%9B%91%E6%8E%A7Laravel-queue-%E6%B6%88%E8%B4%B9%E9%98%9F%E5%88%97/"/>
    <id>https://dbing.github.io/2020/01/10/使用-supervisor-监控Laravel-queue-消费队列/</id>
    <published>2020-01-10T08:05:43.000Z</published>
    <updated>2020-04-02T08:09:09.007Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><ul><li>Ubuntu 5.4.0-6ubuntu1~16.04.9</li></ul><h2 id="安装-Supervisor"><a href="#安装-Supervisor" class="headerlink" title="安装 Supervisor"></a>安装 Supervisor</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install supervisor</span><br></pre></td></tr></table></figure><p>安装后可以查看到 supervisor 已经启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ps aux|grep supervisor</span><br><span class="line">root     14314  0.9  0.2  58936 18572 ?        Ss   16:13   0:00 /usr/bin/python /usr/bin/supervisord -n -c /etc/supervisor/supervisord.conf</span><br><span class="line">root     14358  0.0  0.0  14228   908 pts/2    S+   16:13   0:00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn supervisor</span><br></pre></td></tr></table></figure><h2 id="配置-Supervisor"><a href="#配置-Supervisor" class="headerlink" title="配置 Supervisor"></a>配置 Supervisor</h2><p>我的<code>supervisord.conf</code>配置文件，<code>cat /etc/supervisor/supervisord.conf</code>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">; supervisor config file</span><br><span class="line"></span><br><span class="line">[unix_http_server]</span><br><span class="line">file=/var/run/supervisor.sock   ; (the path to the socket file)</span><br><span class="line">chmod=0700                       ; sockef file mode (default 0700)</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)</span><br><span class="line">pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</span><br><span class="line">childlogdir=/var/log/supervisor            ; (&apos;AUTO&apos; child log dir, default $TEMP)</span><br><span class="line"></span><br><span class="line">; the below section must remain in the config file for RPC</span><br><span class="line">; (supervisorctl/web interface) to work, additional interfaces may be</span><br><span class="line">; added by defining them in separate rpcinterface: sections</span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket</span><br><span class="line"></span><br><span class="line">; The [include] section can just contain the &quot;files&quot; setting.  This</span><br><span class="line">; setting can list multiple files (separated by whitespace or</span><br><span class="line">; newlines).  It can also contain wildcards.  The filenames are</span><br><span class="line">; interpreted as relative to this file.  Included files *cannot*</span><br><span class="line">; include files themselves.</span><br><span class="line"></span><br><span class="line">[include]</span><br><span class="line">files = /etc/supervisor/conf.d/*.conf</span><br></pre></td></tr></table></figure><p>这里我以为<code>mooncake-queue-worker.conf</code>为例，命令：<code>vim /etc/supervisor/conf.d/mooncake-queue-worker.conf</code></p><p>配置清单如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[program:mooncake-worker]</span><br><span class="line">process_name=%(program_name)s_%(process_num)02d</span><br><span class="line">command=php /project/artisan queue:work redis --queue=access</span><br><span class="line">autostart=true</span><br><span class="line"></span><br><span class="line">autorestart=true</span><br><span class="line">user=www-data</span><br><span class="line">numprocs=4</span><br><span class="line">redirect_stderr=true</span><br><span class="line">stdout_logfile=/run/log/moonkcake-queue-worker.log</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><code>project</code> 换成自己的项目路径</li><li><code>user=www-data</code> 配置成自己的<code>php</code>进程用户</li><li><code>numprocs</code> 是启动进程数</li></ol><h2 id="启动-Supervisor"><a href="#启动-Supervisor" class="headerlink" title="启动 Supervisor"></a>启动 Supervisor</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo supervisorctl reread</span><br><span class="line">mooncake-worker: available</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo supervisorctl update</span><br><span class="line">mooncake-worker: added process group</span><br></pre></td></tr></table></figure><p>此时再查看一下<code>php</code>进程，可以成功看到4个Queue启动了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ps aux|grep php</span><br><span class="line">www-data  9933  0.0  0.8 466168 68760 ?        S    11:55   0:03 php-fpm: pool www</span><br><span class="line">www-data 14383  0.3  0.8 558056 71696 ?        S    16:15   0:01 php-fpm: pool www</span><br><span class="line">www-data 14508  1.2  0.6 335088 49780 ?        S    16:24   0:00 php /usr/share/nginx/neox-mooncake-sjms/artisan queue:work redis --queue=access</span><br><span class="line">www-data 14509  1.3  0.6 335088 49648 ?        S    16:24   0:00 php /usr/share/nginx/neox-mooncake-sjms/artisan queue:work redis --queue=access</span><br><span class="line">www-data 14510  1.5  0.6 337136 52176 ?        S    16:24   0:00 php /usr/share/nginx/neox-mooncake-sjms/artisan queue:work redis --queue=access</span><br><span class="line">www-data 14511  1.7  0.6 337136 52228 ?        S    16:24   0:00 php /usr/share/nginx/neox-mooncake-sjms/artisan queue:work redis --queue=access</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止某个进程</span></span><br><span class="line">supervisorctl stop program_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动某个进程</span></span><br><span class="line">supervisorctl start program_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启某个进程</span></span><br><span class="line">supervisorctl restart program_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止全部进程</span></span><br><span class="line">supervisorctl stop all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程</span></span><br><span class="line">supervisorctl reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启</span></span><br><span class="line">supervisorctl update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死进程</span></span><br><span class="line"><span class="built_in">kill</span> supervisor-pid(查询得知 ps aux|grep super)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启监听</span></span><br><span class="line">/usr/bin/supervisord -c /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure><h2 id="Centos-中使用-Supervisor"><a href="#Centos-中使用-Supervisor" class="headerlink" title="Centos 中使用 Supervisor"></a>Centos 中使用 Supervisor</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>​<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y supervisor</span><br></pre></td></tr></table></figure></p><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl status：查看所有进程的状态</span><br><span class="line">supervisorctl stop ：停止</span><br><span class="line">supervisorctl start ：启动</span><br><span class="line">supervisorctl restart : 重启</span><br><span class="line">supervisorctl update ：配置文件修改后可以使用该命令加载新的配置</span><br><span class="line">supervisorctl reload: 重新启动配置中的所有程序</span><br></pre></td></tr></table></figure><blockquote><p>Centos 中使用 Supervisor 文档来自孟昭利反馈</p></blockquote><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>Q1. Invalid user name</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo supervisorctl reread                            </span><br><span class="line">ERROR: CANT_REREAD: Invalid user name www <span class="keyword">in</span> section <span class="string">'program:mooncake-worker'</span> (file: <span class="string">'/etc/supervisor/conf.d/mooncake-queue-worker.conf'</span>)</span><br></pre></td></tr></table></figure><p>A1:查看当前<code>PHP</code>进程用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  nginx ps aux|grep php  </span><br><span class="line">www-data  1736  0.0  0.9 540960 79144 ?        S    Jan09   0:30 php-fpm: pool www</span><br><span class="line">www-data  2114  0.0  0.8 537876 73172 ?        S    Jan09   0:30 php-fpm: pool www</span><br></pre></td></tr></table></figure><p>修改<code>mooncake-queue-worker.conf</code>中<code>user</code>项为<code>user=www-data</code>。</p><p>Q2. 启动：sudo supervisorctl reread，报错如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: &lt;class <span class="string">'socket.error'</span>&gt;, [Errno 2] No such file or directory: file: /usr/lib64/python2.7/socket.py line: 224</span><br></pre></td></tr></table></figure><p>A2. 解决办法，输入supervisord</p><p>获取到提示信息：/usr/lib/python2.7/site-packages/supervisor/options.py:461: UserWarning: Supervisord is running as root and it is searching for its configuration file in default locations (including its current working directory); you probably want to specify a “-c” argument specifying an absolute path to a configuration file for improved security.Supervisord is running as root and it is searching 很明显的看到提示信息  需要指定一个“-c”参数来指定配置文件的绝对路径。</p><p>所以使用<code>supervisord -c /etc/supervisor/supervisord.conf</code>来启动</p><p>Q3. 解决unix:///tmp/supervisor.sock no such file 的问题</p><p>A3. 参考地址：<a href="https://blog.csdn.net/qq_28885149/article/details/79364685" target="_blank" rel="noopener">https://blog.csdn.net/qq_28885149/article/details/79364685</a></p><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><ul><li><a href="http://www.supervisord.org/running.html" target="_blank" rel="noopener">supervisord 官网</a></li><li><a href="https://laravel.com/docs/5.7/queues#supervisor-configuration" target="_blank" rel="noopener">Laravel 官方地址</a></li><li><a href="https://ryanmckern.com/2013/01/daemon-ize-your-processes-on-the-cheap-part-two-supervisor/" target="_blank" rel="noopener">ryanmckern.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境介绍&quot;&gt;&lt;a href=&quot;#环境介绍&quot; class=&quot;headerlink&quot; title=&quot;环境介绍&quot;&gt;&lt;/a&gt;环境介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Ubuntu 5.4.0-6ubuntu1~16.04.9&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装-Supe
      
    
    </summary>
    
    
      <category term="supervisor" scheme="https://dbing.github.io/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>使用阿里云 Redis 服务内存用完导致的网站停摆</title>
    <link href="https://dbing.github.io/2020/01/08/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91-Redis-%E6%9C%8D%E5%8A%A1%E5%86%85%E5%AD%98%E7%94%A8%E5%AE%8C%E5%AF%BC%E8%87%B4%E7%9A%84%E7%BD%91%E7%AB%99%E5%81%9C%E6%91%86/"/>
    <id>https://dbing.github.io/2020/01/08/使用阿里云-Redis-服务内存用完导致的网站停摆/</id>
    <published>2020-01-08T12:56:10.000Z</published>
    <updated>2020-01-10T09:18:06.407Z</updated>
    
    <content type="html"><![CDATA[<p>虽然事件过去一周多了，但是记忆还尚尤新，理论上我们都晓得 Redis 是基于内存存储的，一般也是用于存储一些有价值的热数据，而我死中就有傻孩纸把图片这种二进制文件<code>bese64_encode</code>后使用<code>chunk_split</code>函数分成小块，给存进了 <code>redis</code>。以下是情景重放。</p><h2 id="情景描述"><a href="#情景描述" class="headerlink" title="情景描述"></a>情景描述</h2><img src="/2020/01/08/使用阿里云-Redis-服务内存用完导致的网站停摆/redis.png" class="[class names]" title="[width] [height] [title text [alt text]]"><p>再发现使用率是<code>108%</code>时，此时服务是正常的，达到<code>110%</code>时，云Redis服务就拒绝连接了，此时<code>sentry</code>里收到大量错误，收到打开网站500错误页，服务瘫痪。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li><p>云 redis 存储空间</p></li><li><p>释放现有 redis 空间</p></li></ol><p>操作面板无法得知，方案1中耗时问题，果断选择了方案2，一行命令删除指定前缀key，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli -h 主机地址 -p 端口 keys &quot;course-*&quot; |xargs ./redis-cli -h 主机地址 -p 端口 del</span><br><span class="line"></span><br><span class="line"># 具体执行命令</span><br><span class="line">redis-cli -h 主机 -n 2 keys &apos;wechat*&apos; | xargs redis-cli -h 主机 -n 2 del</span><br></pre></td></tr></table></figure><h2 id="问题代码"><a href="#问题代码" class="headerlink" title="问题代码"></a>问题代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取该页面对应的二维码</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> string $scene</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> string WXACodeBase64</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getWXACode</span><span class="params">($scene)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    $sceneMd5 = md5($scene);</span><br><span class="line">    $getWXACodeImgBase64 = Redis::get(<span class="string">'wechat:js:api:WXACodeImg:'</span> . $sceneMd5);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($getWXACodeImgBase64)) &#123;</span><br><span class="line">        $result = [</span><br><span class="line">            <span class="string">'code'</span> =&gt; <span class="number">200</span>,</span><br><span class="line">            <span class="string">'msg'</span> =&gt; <span class="string">'success'</span>,</span><br><span class="line">            <span class="string">'data'</span> =&gt; $getWXACodeImgBase64</span><br><span class="line">        ];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $accessToken = <span class="keyword">$this</span>-&gt;getAccessToken(<span class="keyword">self</span>::GET_WXACODE);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($accessToken)) &#123;</span><br><span class="line">            $param = [</span><br><span class="line">                <span class="string">'scene'</span> =&gt; $scene</span><br><span class="line">            ];</span><br><span class="line">            $apiResult = HttpToolLib::curl(<span class="keyword">self</span>::WXACODE_API_URL . $accessToken, json_encode($param), <span class="keyword">true</span>);</span><br><span class="line">            $resJson = json_decode($apiResult, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>($resJson) &amp;&amp; array_key_exists(<span class="string">'errcode'</span>, $resJson)) &#123;</span><br><span class="line">                $result = [</span><br><span class="line">                    <span class="string">'code'</span> =&gt; $resJson[<span class="string">'errcode'</span>],</span><br><span class="line">                    <span class="string">'msg'</span> =&gt; $resJson[<span class="string">'errmsg'</span>],</span><br><span class="line">                    <span class="string">'data'</span> =&gt; <span class="keyword">null</span></span><br><span class="line">                ];</span><br><span class="line">                \Log::error(<span class="string">'getWXACodeError[code:'</span> . $resJson[<span class="string">'errcode'</span>] . <span class="string">';msg:'</span> . $resJson[<span class="string">'errmsg'</span>] . <span class="string">'.]'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $getWXACodeImgBase64 = chunk_split(base64_encode($apiResult));</span><br><span class="line">                Redis::setnx(<span class="string">'wechat:js:api:WXACodeImg:'</span> . $sceneMd5, $getWXACodeImgBase64);</span><br><span class="line">                $result = [</span><br><span class="line">                    <span class="string">'code'</span> =&gt; <span class="number">200</span>,</span><br><span class="line">                    <span class="string">'msg'</span> =&gt; <span class="string">'success'</span>,</span><br><span class="line">                    <span class="string">'data'</span> =&gt; $getWXACodeImgBase64</span><br><span class="line">                ];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虽然事件过去一周多了，但是记忆还尚尤新，理论上我们都晓得 Redis 是基于内存存储的，一般也是用于存储一些有价值的热数据，而我死中就有傻孩纸把图片这种二进制文件&lt;code&gt;bese64_encode&lt;/code&gt;后使用&lt;code&gt;chunk_split&lt;/code&gt;函数分
      
    
    </summary>
    
    
      <category term="redis" scheme="https://dbing.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 采坑记录</title>
    <link href="https://dbing.github.io/2019/11/27/Laravel-%E9%87%87%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://dbing.github.io/2019/11/27/Laravel-采坑记录/</id>
    <published>2019-11-27T08:05:05.000Z</published>
    <updated>2020-01-10T09:18:57.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Laravel-Middleware-里-Cookie-设置不成功问题"><a href="#Laravel-Middleware-里-Cookie-设置不成功问题" class="headerlink" title="Laravel Middleware 里 Cookie 设置不成功问题"></a>Laravel Middleware 里 Cookie 设置不成功问题</h2><p>我在laravel中间件里写了下面一行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$response = $next($request)-&gt;cookie($clientKey, $client-&gt;id, 100 * 60 * 24 * 365);</span><br><span class="line"></span><br><span class="line">#或者</span><br><span class="line">\Cookie::queue($clientKey, $client-&gt;id, $ttl);</span><br><span class="line"></span><br><span class="line">dump($client-&gt;id);</span><br></pre></td></tr></table></figure></p><p>然后再中间件里，dump 一个变量，导致<code>cookie</code>不能设置上去，事后发现中间件里不能有任何输出，比如：<code>echo</code>,<code>dump</code>,<code>var_dump</code>,<code>print_r</code> 否则都会导致不成功</p><h2 id="Laravel-Jobs-不消费和消费失败问题-DB-是-mongodb"><a href="#Laravel-Jobs-不消费和消费失败问题-DB-是-mongodb" class="headerlink" title="Laravel Jobs 不消费和消费失败问题(DB 是 mongodb)"></a>Laravel Jobs 不消费和消费失败问题(DB 是 mongodb)</h2><p>创建了一个<code>AccessLogJob</code>死活不会执行，终端也不抛异常，经过排查最终发现是，在<code>DB</code>为<code>mongodb</code>库的情况下 <code>SerializesModels</code> 压根不会触发，也就是会导致<code>model</code>实例不会被序列化，临时解决方案注入时手动序列化<code>serialize</code>，使用时反序列化<code>unserialize</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccessLogJob</span> <span class="keyword">implements</span> <span class="title">ShouldQueue</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">InteractsWithQueue</span>, <span class="title">Queueable</span>, <span class="title">SerializesModels</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> AccessLog</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $accessLog;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new job instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(AccessLog $log)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;accessLog = serialize($log);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute the job.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (unserialize(<span class="keyword">$this</span>-&gt;accessLog))-&gt;save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Laravel-Middleware-里-Cookie-设置不成功问题&quot;&gt;&lt;a href=&quot;#Laravel-Middleware-里-Cookie-设置不成功问题&quot; class=&quot;headerlink&quot; title=&quot;Laravel Middleware 里 C
      
    
    </summary>
    
    
      <category term="Laravel" scheme="https://dbing.github.io/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>边锋的一次面试经历</title>
    <link href="https://dbing.github.io/2019/07/31/%E8%BE%B9%E9%94%8B%E7%9A%84%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/"/>
    <id>https://dbing.github.io/2019/07/31/边锋的一次面试经历/</id>
    <published>2019-07-31T11:28:39.000Z</published>
    <updated>2019-07-31T16:39:28.108Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前几天，去边锋网络上海分公司去面试，去了以后，说 PHP 负责人请假了，一个 Golang 后端面的，聊了2个非语言层面的问题，这里梳理总一下。</p></blockquote><h2 id="Q1：编写-API-接口，如果保证幂等性？"><a href="#Q1：编写-API-接口，如果保证幂等性？" class="headerlink" title="Q1：编写 API 接口，如果保证幂等性？"></a>Q1：编写 API 接口，如果保证幂等性？</h2><p>所谓幂等性设计，就是说，一次和多次请求某一个资源应该具有同样的副作用。用数学的语言来 表达就是:f(x) = f(f(x))。</p><p>举几个例子:</p><ul><li>订单创建接口，第一次调用超时了，然后调用方重试了一次。是否会多创建一笔订单?</li></ul><p>因为系统超时，而调用户方重试一下，会给我们的系统带来不一致的副作用。</p><p>为什么会产生这样的问题，就是在我们把系统解耦隔离后，服务间的调用可能会有三个状态，一个是成功(Success)，一个是失败(Failed)，还有一个是超时(Timeout)。前两者都是明确的状态，而超时则是完全不知道是什么状态。</p><p>这种情况下，一般有两种处理方式：</p><ul><li>一种是下游服务提供查询接口，上游再请求超时后查询一下，如果查询到则表示成功，如果查询不到则表示失败。</li><li>另一种是做接口幂等设计，也就是将查询动作放在下游服务，上游只管做重试，请求一次和请求多次结果是一样的。</li></ul><p>对于第一种方式，需要对方提供一个查询接口来做配合。而第二种方式则需要下游的系统提供支持幂等性的交易接口。</p><a id="more"></a><p>要做到幂等性的交易接口，需要有一个唯一的标识，来标志交易是同一笔交易。而这个交易 ID 由谁来分配是一件比较头疼的事。因为这个标识要能做到全局唯一。</p><h3 id="全局-ID"><a href="#全局-ID" class="headerlink" title="全局 ID"></a>全局 ID</h3><p>在全局唯一 ID 的算法中，这里介绍一个 Twitter 的开源项目 Snowflake。它是一个分布式 ID 的生成算法。其核心思想是，产生一个 long 型的 ID，其中:</p><ul><li>41bits 作为毫秒数。大概可以用 69.7 年。</li><li>10bits 作为机器编号(5bits 是数据中心，5bits 的机器 ID)，支持 1024 个实例。</li><li>12bits 作为毫秒内的序列号。一毫秒可以生成 4096 个序号。</li></ul><p>其他的像 Redis 或 MongoDB 的全局 ID 生成都和这个算法大同小异。我在这里就不多说了，提供一个<a href="https://juejin.im/post/5b3a23746fb9a024e15cad79" target="_blank" rel="noopener">掘金链接</a>。 你可以根据实际情况加上业务的编号。</p><h3 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h3><p>对于幂等性的处理流程来说，说白了就是要过滤一下已经收到的交易。要做到这个事，我们需要一个存储来记录收到的交易。</p><p>于是，当收到交易请求的时候，我们就会到这个存储中去查询。如果查找到了，那么就不再做查询了，并把上次做的结果返回。如果没有查到，那么我们就记录下来。</p><img src="/2019/07/31/边锋的一次面试经历/uid@1x.png"><p>但是，上面这个流程是有一个可优化的细节，对于绝大请求应该都不会是重新发过来的，所以让所有请求都去查询一下这个不太合理。</p><p>所以，这里我们收到交易请求后，直接去存储记录这个 ID(相对于数据的 Insert 操作)，如果出现 ID 冲突了的异常，那么我们就知道这个之前已经有人发过来了，所以就不用再做了。</p><h3 id="HTTP-的幂等性"><a href="#HTTP-的幂等性" class="headerlink" title="HTTP 的幂等性"></a>HTTP 的幂等性</h3><ol><li><p>HTTP GET 方法用于获取资源，不应有副作用，所以是幂等的。比如:GET <a href="http://www.bank.com/account/123456，不会改变资源的状态，不论调用一次还是" target="_blank" rel="noopener">http://www.bank.com/account/123456，不会改变资源的状态，不论调用一次还是</a> N 次 都没有副作用。</p></li><li><p>HTTP HEAD 和 GET 本质是一样的，区别在于 HEAD 不含有呈现数据，而仅仅是 HTTP 头信 息，不应用有副作用，也是幂等的。</p></li><li><p>HTTP OPTIONS 主要用于获取当前 URL 所支持的方法，所以也是幂等的。若请求成功，则它 会在 HTTP 头中包含一个名为“Allow”的头，值是所支持的方法，如“GET, POST”。</p></li><li><p>HTTP DELETE 方法用于删除资源，有副作用，但它应该满足幂等性。比如:DELETE <a href="http://www.forum.com/article/4231，调用一次和" target="_blank" rel="noopener">http://www.forum.com/article/4231，调用一次和</a> N 次对系统产生的副作用是相同 的，即删掉 ID 为 4231 的帖子。因此，调用者可以多次调用或刷新页面而不必担心引起错误。</p></li><li><p>HTTP POST 方法用于创建资源，所对应的 URI 并非创建的资源本身，而是去执行创建动作的操 作者，有副作用，不满足幂等性。比如:POST <a href="http://www.forum.com/articles的语义" target="_blank" rel="noopener">http://www.forum.com/articles的语义</a> 是在<a href="http://www.forum.com/articles下创建一篇帖子，HTTP" target="_blank" rel="noopener">http://www.forum.com/articles下创建一篇帖子，HTTP</a> 响应中应包含帖子的创建状态以及帖子的 URI。两次相同的 POST 请求会在服务器端创建两份资源，它们具有不同的 URI;所以，POST 方法不具备幂等性。</p></li><li><p>HTTP PUT 方法用于创建或更新操作，所对应的 URI 是要创建或更新的资源本身，有副作用， 它应该满足幂等性。比如:PUT <a href="http://www.forum/articles/4231的语义是创建或更新" target="_blank" rel="noopener">http://www.forum/articles/4231的语义是创建或更新</a> ID 为 4231 的帖子。对同一 URI 进行多次 PUT 的副作用和一次 PUT 是相同的;因此，PUT 方 法具有幂等性。</p></li></ol><p>所以，对于 POST 的方式，很可能会出现多次提交的问题，对此的一般的幂等性的设计如下：</p><ul><li><p>其一，在表单中需要隐藏一个 token，这个 token 是后端生成的一个唯一的 ID。用于防止用户多次点击了表单提交按钮，而导致后端收到了多次请求，接到请求后首先效验表单 token 是否有效（是否存在服务端），否则判定为非法提交，在后端 PHP 众多框架中，这个步骤一般都是自动完成，比如 Yii、Laravel。</p></li><li><p>还有一种稳妥的做法是，后端成功后向前端返回 302 跳转，把用户的前端页跳转到 GET 请求，把刚刚 POST 的数据给展示出来。如果是 Web 上的最好还把之前的表单设置成过期，这样用户不能通过浏览器后退按钮来重新提交。这个模式又叫做 PRG 模式 (Post/Redirect/Get)。</p></li></ul><p>以上内容参考自，陈皓：《左耳听风》</p><h2 id="Q2：如果保证-DB-与-Cache-数据一致？"><a href="#Q2：如果保证-DB-与-Cache-数据一致？" class="headerlink" title="Q2：如果保证 DB 与 Cache 数据一致？"></a>Q2：如果保证 DB 与 Cache 数据一致？</h2><p>场景：当用户更新自己的信息时，你的程序代码如何写：</p><ol><li>先更新 DB 再更新 Cache，</li><li>先更新 DB 再删除 Cache</li><li>先更新 Cache 再更新 DB</li><li>先删除 Cache 再更新 DB</li></ol><p>这里就此问题，上述 3 个步骤，再我去面试前完全没有细细思考过，事后仔细反思下，大有文章，于是小描一下。</p><p>参考大厂「Facebook」套路：缓存旁路模式（Cache Aside Pattern），大白话就是：先更新数据库，再删缓存。</p><p>对于为什么是缓存删除而不是采用缓存更新，对于实际业务中我们缓存的信息往往不单单是纯粹的表中的一行数据，有可能涉及到计算属性或者关联属性，相比删除缓存，让请求后自建缓存更容易。</p><img src="/2019/07/31/边锋的一次面试经历/Cache-Aside-Design.png"><img src="/2019/07/31/边锋的一次面试经历/Updating-Data-using-the-Cache.png"><p>此方案有两个潜在问题：</p><ol><li>如果发生更新数据库成功，删除缓存失败呢？</li><li>在高并发的场景下，会不会出现数据库与缓存数据不一致的概率呢？</li></ol><p>对于第一种方法问题的解决方案：</p><img src="/2019/07/31/边锋的一次面试经历/retry-cache-db.png"><p>处理流程步骤：</p><ol><li>更新数据库数据</li><li>缓存因为种种问题删除失败</li><li>将需要删除的key发送至消息队列</li><li>消费队列消息，获得需要删除的 key 继续重试删除操作，直到成功</li></ol><p>参考地址：</p><ol><li><a href="https://coolshell.cn/articles/17416.html/comment-page-2#comments" target="_blank" rel="noopener">酷壳</a></li><li><a href="http://ddrv.cn/a/127228" target="_blank" rel="noopener">算法网</a></li><li><a href="https://www.xttblog.com/?p=3598" target="_blank" rel="noopener">业余草</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前几天，去边锋网络上海分公司去面试，去了以后，说 PHP 负责人请假了，一个 Golang 后端面的，聊了2个非语言层面的问题，这里梳理总一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Q1：编写-API-接口，如果保证幂等性？&quot;&gt;&lt;a href=&quot;#Q1：编写-API-接口，如果保证幂等性？&quot; class=&quot;headerlink&quot; title=&quot;Q1：编写 API 接口，如果保证幂等性？&quot;&gt;&lt;/a&gt;Q1：编写 API 接口，如果保证幂等性？&lt;/h2&gt;&lt;p&gt;所谓幂等性设计，就是说，一次和多次请求某一个资源应该具有同样的副作用。用数学的语言来 表达就是:f(x) = f(f(x))。&lt;/p&gt;
&lt;p&gt;举几个例子:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;订单创建接口，第一次调用超时了，然后调用方重试了一次。是否会多创建一笔订单?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为系统超时，而调用户方重试一下，会给我们的系统带来不一致的副作用。&lt;/p&gt;
&lt;p&gt;为什么会产生这样的问题，就是在我们把系统解耦隔离后，服务间的调用可能会有三个状态，一个是成功(Success)，一个是失败(Failed)，还有一个是超时(Timeout)。前两者都是明确的状态，而超时则是完全不知道是什么状态。&lt;/p&gt;
&lt;p&gt;这种情况下，一般有两种处理方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一种是下游服务提供查询接口，上游再请求超时后查询一下，如果查询到则表示成功，如果查询不到则表示失败。&lt;/li&gt;
&lt;li&gt;另一种是做接口幂等设计，也就是将查询动作放在下游服务，上游只管做重试，请求一次和请求多次结果是一样的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于第一种方式，需要对方提供一个查询接口来做配合。而第二种方式则需要下游的系统提供支持幂等性的交易接口。&lt;/p&gt;
    
    </summary>
    
      <category term="面试" scheme="https://dbing.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="边锋网络" scheme="https://dbing.github.io/tags/%E8%BE%B9%E9%94%8B%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Laravel JWT 多用户端验证</title>
    <link href="https://dbing.github.io/2019/06/10/Laravel-JWT-%E5%A4%9A%E7%94%A8%E6%88%B7%E7%AB%AF%E9%AA%8C%E8%AF%81/"/>
    <id>https://dbing.github.io/2019/06/10/Laravel-JWT-多用户端验证/</id>
    <published>2019-06-10T03:29:14.000Z</published>
    <updated>2019-06-19T02:52:54.417Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://learnku.com/articles/28881" target="_blank" rel="noopener">https://learnku.com/articles/28881</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文链接：&lt;a href=&quot;https://learnku.com/articles/28881&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://learnku.com/articles/28881&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="Laravel" scheme="https://dbing.github.io/categories/Laravel/"/>
    
    
      <category term="JWT" scheme="https://dbing.github.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 中的事务</title>
    <link href="https://dbing.github.io/2019/06/05/MySQL-%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/"/>
    <id>https://dbing.github.io/2019/06/05/MySQL-中的事务/</id>
    <published>2019-06-05T10:31:43.000Z</published>
    <updated>2019-06-19T02:52:54.418Z</updated>
    
    <content type="html"><![CDATA[<p>编码中事务的使用，不能跨库，不能夸会话</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编码中事务的使用，不能跨库，不能夸会话&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>初识 Go 语言</title>
    <link href="https://dbing.github.io/2019/06/03/%E5%88%9D%E8%AF%86-Go-%E8%AF%AD%E8%A8%80/"/>
    <id>https://dbing.github.io/2019/06/03/初识-Go-语言/</id>
    <published>2019-06-03T08:57:55.000Z</published>
    <updated>2019-06-19T02:52:54.418Z</updated>
    
    <content type="html"><![CDATA[<p>Go 语言主要特性</p><ul><li>自动垃圾回收 </li><li>更丰富的内置类型 </li><li>函数多返回值 </li><li>错误处理 </li><li>匿名函数和闭包 </li><li>类型和接口 </li><li>并发编程 </li><li>反射 </li><li>语言交互性 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Go 语言主要特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动垃圾回收 &lt;/li&gt;
&lt;li&gt;更丰富的内置类型 &lt;/li&gt;
&lt;li&gt;函数多返回值 &lt;/li&gt;
&lt;li&gt;错误处理 &lt;/li&gt;
&lt;li&gt;匿名函数和闭包 &lt;/li&gt;
&lt;li&gt;类型和接口 &lt;/li&gt;
&lt;li&gt;并发编程 &lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="Go" scheme="https://dbing.github.io/categories/Go/"/>
    
    
      <category term="Go" scheme="https://dbing.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Composer 中国镜像</title>
    <link href="https://dbing.github.io/2019/05/22/Composer-%E4%B8%AD%E5%9B%BD%E9%95%9C%E5%83%8F/"/>
    <id>https://dbing.github.io/2019/05/22/Composer-中国镜像/</id>
    <published>2019-05-22T07:51:57.000Z</published>
    <updated>2019-11-25T14:05:43.754Z</updated>
    
    <content type="html"><![CDATA[<p>Composer 中国镜像-阿里云镜像</p><p>原文地址：<a href="https://developer.aliyun.com/composer" target="_blank" rel="noopener">https://developer.aliyun.com/composer</a></p><p>选项一、全局配置（推荐）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure><p>取消镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g --unset repos.packagist</span><br></pre></td></tr></table></figure></p><p>选项二、项目配置</p><p>仅修改当前工程配置，仅当前工程可使用该镜像地址：：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure></p><p>取消镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config --unset repos.packagist</span><br></pre></td></tr></table></figure></p><p>调试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer -vvv install</span><br></pre></td></tr></table></figure></p><h2 id="Composer-manager"><a href="#Composer-manager" class="headerlink" title="Composer manager"></a>Composer manager</h2><p>鲜有日子，阿里云镜像也会抽风，那么这是镜像管理工具推荐给你，很方便切换到你想要使用的源</p><p>原文地址：<a href="https://github.com/slince/composer-registry-manager" target="_blank" rel="noopener">https://github.com/slince/composer-registry-manager</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Composer 中国镜像-阿里云镜像&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://developer.aliyun.com/composer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.aliyun.c
      
    
    </summary>
    
    
      <category term="Composer" scheme="https://dbing.github.io/tags/Composer/"/>
    
  </entry>
  
  <entry>
    <title>Linxu 压缩与解压常用命令</title>
    <link href="https://dbing.github.io/2019/05/22/Linxu-%E5%8E%8B%E7%BC%A9%E4%B8%8E%E8%A7%A3%E5%8E%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://dbing.github.io/2019/05/22/Linxu-压缩与解压常用命令/</id>
    <published>2019-05-22T05:55:14.000Z</published>
    <updated>2020-03-13T10:15:44.408Z</updated>
    
    <content type="html"><![CDATA[<p>以下均已<code>demo.tar.xz</code>文件为例演示</p><h2 id="tar"><a href="#tar" class="headerlink" title="*.tar"></a>*.tar</h2><p>解压：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf demo.tar</span><br></pre></td></tr></table></figure></p><h2 id="gz"><a href="#gz" class="headerlink" title="*.gz"></a>*.gz</h2><p>解压：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gzip -d demo.gz</span><br><span class="line">gunzip demo.gz</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="tar-gz-amp-tgz"><a href="#tar-gz-amp-tgz" class="headerlink" title=".tar.gz &amp; .tgz"></a><em>.tar.gz &amp; </em>.tgz</h2><p>压缩<code>demo</code>目录为<code>demo.tar.gz</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf demo.tar.gz demo</span><br></pre></td></tr></table></figure><p>解压：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf demo.tar.gz</span><br><span class="line">tar -xzvf demo.tgz</span><br></pre></td></tr></table></figure><h2 id="tar-bz2"><a href="#tar-bz2" class="headerlink" title="*.tar.bz2"></a>*.tar.bz2</h2><p>解压：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xjvf demo.tar.bz2</span><br></pre></td></tr></table></figure></p><h2 id="tar-xz"><a href="#tar-xz" class="headerlink" title="*.tar.xz"></a>*.tar.xz</h2><p>解压方法一：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xz -d demo.tar.xz</span><br><span class="line">tar -xvf demo.tar</span><br></pre></td></tr></table></figure></p><p>解压方法二：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvJf demo.tar.xz</span><br></pre></td></tr></table></figure><h2 id="bz2"><a href="#bz2" class="headerlink" title="*.bz2"></a>*.bz2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bzip2 -d</span><br><span class="line">bunzip2</span><br></pre></td></tr></table></figure><h2 id="tar-Z"><a href="#tar-Z" class="headerlink" title="*.tar.Z"></a>*.tar.Z</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xZvf</span><br></pre></td></tr></table></figure><h2 id="rar"><a href="#rar" class="headerlink" title="*.rar"></a>*.rar</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unrar e demo.rar</span><br></pre></td></tr></table></figure><h2 id="zip"><a href="#zip" class="headerlink" title="*.zip"></a>*.zip</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip demo.zip</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar</span><br><span class="line">-c: 建立压缩档案</span><br><span class="line">-x：解压</span><br><span class="line">-t：查看内容</span><br><span class="line">-r：向压缩归档文件末尾追加文件</span><br><span class="line">-u：更新原压缩包中的文件</span><br></pre></td></tr></table></figure><p>独立参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-z：有gzip属性的</span><br><span class="line">-j：有bz2属性的</span><br><span class="line">-Z：有compress属性的</span><br><span class="line">-v：显示所有过程</span><br><span class="line">-O：将文件解开到标准输出</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下均已&lt;code&gt;demo.tar.xz&lt;/code&gt;文件为例演示&lt;/p&gt;
&lt;h2 id=&quot;tar&quot;&gt;&lt;a href=&quot;#tar&quot; class=&quot;headerlink&quot; title=&quot;*.tar&quot;&gt;&lt;/a&gt;*.tar&lt;/h2&gt;&lt;p&gt;解压：&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tar -xvf demo.tar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;gz&quot;&gt;&lt;a href=&quot;#gz&quot; class=&quot;headerlink&quot; title=&quot;*.gz&quot;&gt;&lt;/a&gt;*.gz&lt;/h2&gt;&lt;p&gt;解压：&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gzip -d demo.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gunzip demo.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://dbing.github.io/categories/Linux/"/>
    
    
      <category term="tar" scheme="https://dbing.github.io/tags/tar/"/>
    
  </entry>
  
  <entry>
    <title>Linux PATH 环境变量配置</title>
    <link href="https://dbing.github.io/2019/05/22/Linux-PATH-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/"/>
    <id>https://dbing.github.io/2019/05/22/Linux-PATH-环境变量配置/</id>
    <published>2019-05-22T04:11:25.000Z</published>
    <updated>2019-05-22T14:24:01.271Z</updated>
    
    <content type="html"><![CDATA[<p>以添加<code>go</code>为例，修改<code>PATH</code>的几种方法</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">pwd</span><br><span class="line">/home/bing</span><br><span class="line">wget https://dl.google.com/go/go1.12.5.linux-amd64.tar.gz</span><br><span class="line">tar -xzvf go1.12.5.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><h2 id="查看-PATH"><a href="#查看-PATH" class="headerlink" title="查看 PATH"></a>查看 PATH</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><p>以<code>:</code>符号分割，每一段都是一个环境变量</p><h2 id="修改-PATH"><a href="#修改-PATH" class="headerlink" title="修改 PATH"></a>修改 PATH</h2><a id="more"></a><h3 id="方法一-export"><a href="#方法一-export" class="headerlink" title="方法一 export"></a>方法一 export</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/home/bing/go/bin:$PATH</span><br></pre></td></tr></table></figure><p>测试：<code>go version</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出`go version go1.12.5 linux/amd64`</span><br></pre></td></tr></table></figure></p><table><thead><tr><th style="text-align:left">生效时间</th><th>有效期</th><th>局限</th></tr></thead><tbody><tr><td style="text-align:left">立即生效</td><td>临时有效，当前会话（当前终端）</td><td>当前用户</td></tr></tbody></table><h3 id="方法二-bashrc"><a href="#方法二-bashrc" class="headerlink" title="方法二 bashrc"></a>方法二 bashrc</h3><p>通过修改<code>.bashrc</code>文件<br><code>vim ~/.bashrc</code> 添加一行<code>export PATH=/home/bing/go/bin:$PATH</code></p><ol><li>新开一个终端窗口才能生效。</li><li>或者执行 <code>source ~/.bashrc</code> 立即生效</li></ol><table><thead><tr><th style="text-align:left">生效时间</th><th>有效期</th><th>局限</th></tr></thead><tbody><tr><td style="text-align:left">新开启终端有效或立即生效</td><td>永久有效</td><td>当前用户</td></tr></tbody></table><h3 id="方式三-profile"><a href="#方式三-profile" class="headerlink" title="方式三 profile"></a>方式三 profile</h3><p>通过修复<code>profile</code>文件<br><code>vim /etc/profile</code>找到<code>PATH</code>的行(有可能没有)，添加<code>export PATH=/home/bing/go/bin:$PATH</code></p><table><thead><tr><th style="text-align:left">生效时间</th><th>有效期</th><th>局限</th></tr></thead><tbody><tr><td style="text-align:left">系统重启</td><td>永久有效</td><td>所有用户</td></tr></tbody></table><h3 id="方法四-environment"><a href="#方法四-environment" class="headerlink" title="方法四 environment"></a>方法四 environment</h3><p>通过修改<code>environment</code>文件<br><code>vim environment</code>在<code>PATH=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games&quot;</code>中追加<code>:/home/bing/go/bin</code></p><table><thead><tr><th style="text-align:left">生效时间</th><th>有效期</th><th>局限</th></tr></thead><tbody><tr><td style="text-align:left">系统重启</td><td>永久有效</td><td>所有用户</td></tr></tbody></table><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>通过创建软连接的方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /home/bing/go/bin/go /usr/local/bin/go</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以添加&lt;code&gt;go&lt;/code&gt;为例，修改&lt;code&gt;PATH&lt;/code&gt;的几种方法&lt;/p&gt;
&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd ~&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pwd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/home/bing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget https://dl.google.com/go/go1.12.5.linux-amd64.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -xzvf go1.12.5.linux-amd64.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;查看-PATH&quot;&gt;&lt;a href=&quot;#查看-PATH&quot; class=&quot;headerlink&quot; title=&quot;查看 PATH&quot;&gt;&lt;/a&gt;查看 PATH&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;echo $PATH&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以&lt;code&gt;:&lt;/code&gt;符号分割，每一段都是一个环境变量&lt;/p&gt;
&lt;h2 id=&quot;修改-PATH&quot;&gt;&lt;a href=&quot;#修改-PATH&quot; class=&quot;headerlink&quot; title=&quot;修改 PATH&quot;&gt;&lt;/a&gt;修改 PATH&lt;/h2&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://dbing.github.io/categories/Linux/"/>
    
    
      <category term="Linux PATH" scheme="https://dbing.github.io/tags/Linux-PATH/"/>
    
  </entry>
  
  <entry>
    <title>酷代码-第一篇</title>
    <link href="https://dbing.github.io/2019/05/21/%E9%85%B7%E4%BB%A3%E7%A0%81-%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <id>https://dbing.github.io/2019/05/21/酷代码-第一篇/</id>
    <published>2019-05-21T02:36:13.000Z</published>
    <updated>2020-03-05T01:26:58.470Z</updated>
    
    <content type="html"><![CDATA[<p>分享一下，工作中遇见值得分享的<code>Code</code>，这些代码往往比较有趣、有意义、或者少见（有意义），在此我统称为：酷代码。</p><h2 id="IP-白名单检测"><a href="#IP-白名单检测" class="headerlink" title="IP 白名单检测"></a>IP 白名单检测</h2><p>场景描述：我司的一个子项目，用来处理全部的支付业务，为了安全，所有的内部请求必须经过 IP 检测（这只是其中一环），分享一下基于我老大（涛哥）思想，利用位运算完成，<code>IP</code>白名单检测方法，以下是核心代码</p><p>定义检测函数<code>checkRemoteAddr()</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证 IP 白名单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $ip   string              待验证IP地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $AllowRemoteIps array     允许的IP白名单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkRemoteAddr</span><span class="params">($ip,$AllowRemoteIps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $ipNum = ip2long($ip);</span><br><span class="line">    <span class="keyword">foreach</span> ($AllowRemoteIps <span class="keyword">as</span> $mask)</span><br><span class="line">    &#123;</span><br><span class="line">        @<span class="keyword">list</span>($maskIp, $maskStep) = explode(<span class="string">"/"</span>, $mask);</span><br><span class="line">        $maskIpNum = ip2long($maskIp);</span><br><span class="line">        $maskStep = !<span class="keyword">isset</span>($maskStep) ? <span class="number">0</span> : <span class="number">32</span> - intval($maskStep);</span><br><span class="line">        <span class="keyword">if</span>( ($ipNum &gt;&gt; $maskStep) === ($maskIpNum &gt;&gt; $maskStep) )  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>调用</p><figure class="highlight php"><figcaption><span>config.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$allowRemoteIp = [</span><br><span class="line">    <span class="string">"58.246.60.40"</span>,         <span class="comment">// 开放指定 IP</span></span><br><span class="line">    <span class="string">"192.168.10.0/24"</span>,      <span class="comment">// 验证前3段</span></span><br><span class="line">    <span class="string">"10.0.1.0/24"</span>,          <span class="comment">// 验证前3段</span></span><br><span class="line">    <span class="string">'172.19.2.2/32'</span>,        <span class="comment">// 验证4段 写法等同于 172.19.2.2</span></span><br><span class="line"><span class="comment">//    '0.0.0.0/0',            // 允许所有 IP</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$r1 = checkRemoteAddr(<span class="string">'58.246.60.40'</span>,$allowRemoteIp);</span><br><span class="line">var_dump($r1);</span><br><span class="line">$r2 = checkRemoteAddr(<span class="string">'58.246.60.41'</span>,$allowRemoteIp);</span><br><span class="line">var_dump($r2);</span><br><span class="line">$r3 = checkRemoteAddr(<span class="string">'10.0.1.120'</span>,$allowRemoteIp);</span><br><span class="line">var_dump($r3);</span><br><span class="line">$r4 = checkRemoteAddr(<span class="string">'10.0.2.120'</span>,$allowRemoteIp);</span><br><span class="line">var_dump($r4);</span><br></pre></td></tr></table></figure><p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bool(true)</span><br><span class="line">bool(false)</span><br><span class="line">bool(true)</span><br><span class="line">bool(false)</span><br></pre></td></tr></table></figure></p><h2 id="一个闭包写法"><a href="#一个闭包写法" class="headerlink" title="一个闭包写法"></a>一个闭包写法</h2><p>定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">    public function test($num)&#123;</span><br><span class="line">        $this-&gt;run(function ($m) use ($num)&#123;</span><br><span class="line">            if ($num == $m) echo &apos;存在 Num &apos;. $num . PHP_EOL;</span><br><span class="line">        &#125;);</span><br><span class="line">        echo &apos;End &apos;. date(&apos;Y/m/d H:i:s&apos;) . PHP_EOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function run(callable $callback)&#123;</span><br><span class="line">        for ($i=0; $i&lt;=5; $i++)&#123;</span><br><span class="line">            // to-do</span><br><span class="line">            $callback($i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$a = new A;</span><br><span class="line">$a-&gt;test(5);</span><br></pre></td></tr></table></figure></p><p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">存在 Num 5</span><br><span class="line">End 2019/05/30 17:48:52</span><br></pre></td></tr></table></figure></p><h2 id="有趣的复数"><a href="#有趣的复数" class="headerlink" title="有趣的复数"></a>有趣的复数</h2><p>近日在<code>Yii2</code>框架中写<code>reset api</code>，发现资源类控制定义后的访问形式必须为复数，这个复数呢，不是简单加个<code>s</code>的方式，而是遵循英语的复数规则，感觉很是有意思，带着好奇找了一下<code>Yii2</code>是怎么实现的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// vendor/yiisoft/yii2/rest/UrlRule.php</span><br><span class="line"></span><br><span class="line">public function init()</span><br><span class="line">&#123;</span><br><span class="line">    $controllers = [];</span><br><span class="line">    foreach ((array) $this-&gt;controller as $urlName =&gt; $controller) &#123;</span><br><span class="line">        if (is_int($urlName)) &#123;</span><br><span class="line">            $urlName = $this-&gt;pluralize ? Inflector::pluralize($controller) : $controller;</span><br><span class="line">        &#125;</span><br><span class="line">        $controllers[$urlName] = $controller;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续查看<code>puluralize()</code>方法，在<code>/vendor/yiisoft/yii2/helpers/BaseInflector.php</code>文件中看到了真面目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * Converts a word to its plural form.</span><br><span class="line">    * Note that this is for English only!</span><br><span class="line">    * For example, &apos;apple&apos; will become &apos;apples&apos;, and &apos;child&apos; will become &apos;children&apos;.</span><br><span class="line">    * @param string $word the word to be pluralized</span><br><span class="line">    * @return string the pluralized word</span><br><span class="line">    */</span><br><span class="line">public static function pluralize($word)</span><br><span class="line">&#123;</span><br><span class="line">    if (isset(static::$specials[$word])) &#123;</span><br><span class="line">        return static::$specials[$word];</span><br><span class="line">    &#125;</span><br><span class="line">    foreach (static::$plurals as $rule =&gt; $replacement) &#123;</span><br><span class="line">        if (preg_match($rule, $word)) &#123;</span><br><span class="line">            return preg_replace($rule, $replacement, $word);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $word;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从方法中可以看出，如果<code>$word</code>存在于静态属性<code>$specials</code>定义，则返回其对应的<code>value</code>，否则从静态数组<code>$plurals</code>中循环匹配复数规则，命中时根据<code>preg_replace</code>函数翻译成复数，这个两个数组的定义比较大，这里仅贴出部分代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> $specials = [</span><br><span class="line">    <span class="string">'atlas'</span> =&gt; <span class="string">'atlases'</span>,</span><br><span class="line">    <span class="string">'beef'</span> =&gt; <span class="string">'beefs'</span>,</span><br><span class="line">    <span class="string">'brother'</span> =&gt; <span class="string">'brothers'</span>,</span><br><span class="line">    <span class="string">'cafe'</span> =&gt; <span class="string">'cafes'</span>,</span><br><span class="line">    <span class="string">'child'</span> =&gt; <span class="string">'children'</span>,</span><br><span class="line">    <span class="string">'cookie'</span> =&gt; <span class="string">'cookies'</span>,</span><br><span class="line">    <span class="string">'corpus'</span> =&gt; <span class="string">'corpuses'</span>,</span><br><span class="line">    <span class="string">'cow'</span> =&gt; <span class="string">'cows'</span>,</span><br><span class="line">    <span class="string">'curve'</span> =&gt; <span class="string">'curves'</span>,</span><br><span class="line">    <span class="string">'foe'</span> =&gt; <span class="string">'foes'</span>,</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> $plurals = [</span><br><span class="line">    <span class="string">'/([nrlm]ese|deer|fish|sheep|measles|ois|pox|media)$/i'</span> =&gt; <span class="string">'\1'</span>,</span><br><span class="line">    <span class="string">'/^(sea[- ]bass)$/i'</span> =&gt; <span class="string">'\1'</span>,</span><br><span class="line">    <span class="string">'/(m)ove$/i'</span> =&gt; <span class="string">'\1oves'</span>,</span><br><span class="line">    <span class="string">'/(f)oot$/i'</span> =&gt; <span class="string">'\1eet'</span>,</span><br><span class="line">    <span class="string">'/(h)uman$/i'</span> =&gt; <span class="string">'\1umans'</span>,</span><br><span class="line">    <span class="string">'/(s)tatus$/i'</span> =&gt; <span class="string">'\1tatuses'</span>,</span><br><span class="line">    <span class="string">'/(s)taff$/i'</span> =&gt; <span class="string">'\1taff'</span>,</span><br><span class="line">    <span class="string">'/(t)ooth$/i'</span> =&gt; <span class="string">'\1eeth'</span>,</span><br><span class="line">    <span class="string">'/(quiz)$/i'</span> =&gt; <span class="string">'\1zes'</span>,</span><br><span class="line">    <span class="string">'/^(ox)$/i'</span> =&gt; <span class="string">'\1\2en'</span>,</span><br><span class="line">    <span class="string">'/([m|l])ouse$/i'</span> =&gt; <span class="string">'\1ice'</span>,</span><br><span class="line">    <span class="string">'/(matr|vert|ind)(ix|ex)$/i'</span> =&gt; <span class="string">'\1ices'</span>,</span><br><span class="line">    <span class="string">'/(x|ch|ss|sh)$/i'</span> =&gt; <span class="string">'\1es'</span>,</span><br><span class="line">    <span class="string">'/([^aeiouy]|qu)y$/i'</span> =&gt; <span class="string">'\1ies'</span>,</span><br><span class="line">    <span class="string">'/(hive)$/i'</span> =&gt; <span class="string">'\1s'</span>,</span><br><span class="line">    <span class="string">'/(?:([^f])fe|([lr])f)$/i'</span> =&gt; <span class="string">'\1\2ves'</span>,</span><br><span class="line">    <span class="string">'/sis$/i'</span> =&gt; <span class="string">'ses'</span>,</span><br><span class="line">    <span class="string">'/([ti])um$/i'</span> =&gt; <span class="string">'\1a'</span>,</span><br><span class="line">    <span class="string">'/(p)erson$/i'</span> =&gt; <span class="string">'\1eople'</span>,</span><br><span class="line">    <span class="string">'/(m)an$/i'</span> =&gt; <span class="string">'\1en'</span>,</span><br><span class="line">    <span class="string">'/(c)hild$/i'</span> =&gt; <span class="string">'\1hildren'</span>,</span><br><span class="line">    <span class="string">'/(buffal|tomat|potat|ech|her|vet)o$/i'</span> =&gt; <span class="string">'\1oes'</span>,</span><br><span class="line">    <span class="string">'/(alumn|bacill|cact|foc|fung|nucle|radi|stimul|syllab|termin|vir)us$/i'</span> =&gt; <span class="string">'\1i'</span>,</span><br><span class="line">    <span class="string">'/us$/i'</span> =&gt; <span class="string">'uses'</span>,</span><br><span class="line">    <span class="string">'/(alias)$/i'</span> =&gt; <span class="string">'\1es'</span>,</span><br><span class="line">    <span class="string">'/(ax|cris|test)is$/i'</span> =&gt; <span class="string">'\1es'</span>,</span><br><span class="line">    <span class="string">'/(currenc)y$/'</span> =&gt; <span class="string">'\1ies'</span>,</span><br><span class="line">    <span class="string">'/s$/'</span> =&gt; <span class="string">'s'</span>,</span><br><span class="line">    <span class="string">'/^$/'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="string">'/$/'</span> =&gt; <span class="string">'s'</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>END :)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享一下，工作中遇见值得分享的&lt;code&gt;Code&lt;/code&gt;，这些代码往往比较有趣、有意义、或者少见（有意义），在此我统称为：酷代码。&lt;/p&gt;
&lt;h2 id=&quot;IP-白名单检测&quot;&gt;&lt;a href=&quot;#IP-白名单检测&quot; class=&quot;headerlink&quot; title=&quot;IP 白名单检测&quot;&gt;&lt;/a&gt;IP 白名单检测&lt;/h2&gt;&lt;p&gt;场景描述：我司的一个子项目，用来处理全部的支付业务，为了安全，所有的内部请求必须经过 IP 检测（这只是其中一环），分享一下基于我老大（涛哥）思想，利用位运算完成，&lt;code&gt;IP&lt;/code&gt;白名单检测方法，以下是核心代码&lt;/p&gt;
&lt;p&gt;定义检测函数&lt;code&gt;checkRemoteAddr()&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 验证 IP 白名单&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; $ip   string              待验证IP地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; $AllowRemoteIps array     允许的IP白名单&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;checkRemoteAddr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($ip,$AllowRemoteIps)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $ipNum = ip2long($ip);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt; ($AllowRemoteIps &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; $mask)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @&lt;span class=&quot;keyword&quot;&gt;list&lt;/span&gt;($maskIp, $maskStep) = explode(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, $mask);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $maskIpNum = ip2long($maskIp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $maskStep = !&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($maskStep) ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt; - intval($maskStep);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( ($ipNum &amp;gt;&amp;gt; $maskStep) === ($maskIpNum &amp;gt;&amp;gt; $maskStep) )  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://dbing.github.io/categories/PHP/"/>
    
    
      <category term="code" scheme="https://dbing.github.io/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Window10 子系统极速搭建LNMP开发环境</title>
    <link href="https://dbing.github.io/2019/05/16/Window10-%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%9E%81%E9%80%9F%E6%90%AD%E5%BB%BALNMP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://dbing.github.io/2019/05/16/Window10-子系统极速搭建LNMP开发环境/</id>
    <published>2019-05-16T10:18:28.000Z</published>
    <updated>2020-02-17T15:13:00.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开启子系统"><a href="#开启子系统" class="headerlink" title="开启子系统"></a>开启子系统</h2><p>window10 开启子系统方法：</p><p>参考地址：<a href="https://jingyan.baidu.com/article/546ae185de58961149f28cac.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/546ae185de58961149f28cac.html</a></p><h2 id="快速安装-LNMP-环境"><a href="#快速安装-LNMP-环境" class="headerlink" title="快速安装 LNMP 环境"></a>快速安装 LNMP 环境</h2><p>Linux 下 <code>CentOS</code> 可以通过<code>yum</code>,<code>Ubuntu</code> 可以通过 <code>apt-get</code>，可以通过这种方式安装<code>LNMP</code>所需要每一个软件，也可以使用<code>LNMP</code>集成包的方法，既然是快速搭建开发环境，这里推荐使用<code>BT</code></p><p>安装手册：<a href="http://www.bt.cn/btcode.html#install" target="_blank" rel="noopener">http://www.bt.cn/btcode.html#install</a></p><h2 id="安装扩展"><a href="#安装扩展" class="headerlink" title="安装扩展"></a>安装扩展</h2><p>方法一：</p><p>通过<code>BT</code>管理面板，进行安装。</p><p>方法二：</p><p>切换<code>PHP</code>可执行目录，<code>cd /www/server/php/71/bin/</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pecl install mongodb</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Build process completed successfully</span><br><span class="line">Installing <span class="string">'/www/server/php/71/lib/php/extensions/no-debug-non-zts-20160303/mongodb.so'</span></span><br><span class="line">install ok: channel:<span class="comment">//pecl.php.net/mongodb-1.5.3</span></span><br><span class="line">Extension mongodb enabled in php.ini</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>Q：Ubuntu apt-get源为国内镜像源的方法<br>A：见以下操作步骤：</p><ol><li><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</code></li><li><code>sudo vim /etc/apt/sources.list</code></li><li>清空原来的列表（命令行模式下，按<code>ggdG</code>），添加以下内容（中科大镜像源）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure></li></ol><p>4.保存后，运行 <code>sudo apt-get update</code></p><p>补：Vim 清空文件内容方法<br>方法一：命令行模式下，按键盘<code>ggdG</code><br>方法二：先在命令模式下输入 G 再输入<code>:1,.d</code></p><hr><p>Q1：访问PHP项目，特别慢或者（Time out）超时。<br>A1：在 Ubuntu WSL的<code>Nginx</code>配置 <code>fastcgi_buffering off;</code> # This must be here for WSL as of 11/28/2018</p><p>具体配置参考如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">        fastcgi_pass unix:/var/run/php/php7.1-fpm.sock;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_buffering off; # This must be here for WSL as of 11/28/2018</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">        fastcgi_param PHP_VALUE &quot;upload_max_filesize = 20M \n post_max_size=21M&quot;;</span><br><span class="line">        include /etc/nginx/fastcgi.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此问题 Issues：<a href="https://github.com/Microsoft/WSL/issues/393#issuecomment-442498519" target="_blank" rel="noopener">https://github.com/Microsoft/WSL/issues/393#issuecomment-442498519</a></p><p>Q2:BT下启动<code>MySQL</code>失败，一下是通过命令行启动提示<code>log</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">meng@SD-20200215YBQD:/$ sudo /etc/init.d/mysqld start</span><br><span class="line">my_print_defaults: [Warning] World-writable config file <span class="string">'/etc/my.cnf'</span> is ignored.</span><br><span class="line">Starting MySQL.my_print_defaults: [Warning] World-writable config file <span class="string">'/etc/my.cnf'</span> is ignored.</span><br><span class="line">my_print_defaults: [Warning] World-writable config file <span class="string">'/etc/my.cnf'</span> is ignored.</span><br><span class="line">Logging to <span class="string">'/www/server/mysql/data/SD-20200215YBQD.err'</span>.</span><br><span class="line">. * The server quit without updating PID file (/www/server/mysql/data/SD-20200215YBQD.pid).</span><br></pre></td></tr></table></figure><p>A2:修改 <code>/etc/my.cnf</code> 文件权限为 <code>644</code>，重启<code>MySQL</code>服务即可，重启命令：<code>/etc/init.d/mysqld start</code></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;开启子系统&quot;&gt;&lt;a href=&quot;#开启子系统&quot; class=&quot;headerlink&quot; title=&quot;开启子系统&quot;&gt;&lt;/a&gt;开启子系统&lt;/h2&gt;&lt;p&gt;window10 开启子系统方法：&lt;/p&gt;
&lt;p&gt;参考地址：&lt;a href=&quot;https://jingyan.bai
      
    
    </summary>
    
      <category term="Linux" scheme="https://dbing.github.io/categories/Linux/"/>
    
    
      <category term="Window10 LNMP 环境搭建" scheme="https://dbing.github.io/tags/Window10-LNMP-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Git 实用指南</title>
    <link href="https://dbing.github.io/2019/04/26/Git-%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://dbing.github.io/2019/04/26/Git-实用指南/</id>
    <published>2019-04-26T14:20:25.000Z</published>
    <updated>2020-03-05T01:39:13.108Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h2><p>Git 官网地址：<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2</a></p><h2 id="最简配置"><a href="#最简配置" class="headerlink" title="最简配置"></a>最简配置</h2><p>config 的三个作用域</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">local</span></span><br><span class="line">git config --global</span><br><span class="line">git config --system</span><br></pre></td></tr></table></figure><p>配置 <code>user.name</code>和<code>user.email</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">'your name'</span></span><br><span class="line">git config --global user.email <span class="string">'your_email@domain.com'</span></span><br></pre></td></tr></table></figure></p><p>显示<code>config</code>配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list --<span class="built_in">local</span></span><br></pre></td></tr></table></figure></p><h2 id="图形界面"><a href="#图形界面" class="headerlink" title="图形界面"></a>图形界面</h2><h2 id="Git-基础命令"><a href="#Git-基础命令" class="headerlink" title="Git 基础命令"></a>Git 基础命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git -u</span><br><span class="line">git mv <span class="built_in">test</span>  demo</span><br></pre></td></tr></table></figure><h2 id="Git-tag"><a href="#Git-tag" class="headerlink" title="Git tag"></a>Git tag</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打标签</span></span><br><span class="line">git tag -a v1.1.0 -m <span class="string">"tagging version 1.1.0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地 Tag</span></span><br><span class="line">git tag -d v1.1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程 Tag</span></span><br><span class="line">git push origin :refs/tags/v1.1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Tag</span></span><br><span class="line">git tag</span><br></pre></td></tr></table></figure><h2 id="Git-log"><a href="#Git-log" class="headerlink" title="Git log"></a>Git log</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">git <span class="built_in">log</span> --onelie</span><br><span class="line">git <span class="built_in">log</span> -n4</span><br><span class="line">git <span class="built_in">log</span> --all --graph</span><br><span class="line">git <span class="built_in">log</span> --all --oneline --graph -n4</span><br><span class="line">git <span class="built_in">log</span> <span class="built_in">help</span> --web <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><p>Q1：想撤回 <code>commit</code> 操作同时保留代码，怎么办？<br>A1：执行命令 <code>git reset --soft HEAD^</code></p><p>解释：<code>HEAD^</code> 意思是上一个版本，也可以写成 <code>HEAD~1</code>，如果想撤销两次<code>commit</code>，命令：<code>HEAD~2</code></p><p>参数：</p><ul><li><code>--soft</code>: 不删除工作空间改动代码，撤销<code>commit</code>，不撤销<code>git add .</code></li><li><code>--mixed</code>: 不删除工作空间改动代码，撤销<code>commit</code>，并且撤销<code>git add .</code>，<code>git reset --mixed HEAD^</code>等同于<code>git reset HEAD^</code></li><li><code>--hard</code>: 删除工作空间改动代码，撤销<code>commit</code>，撤销<code>git add .</code>（恢复到了上一次的commit状态）</li></ul><p>Q2: 只想修改注释；<br>A2: <code>git commit --amend</code>,进入默认vim编辑器,修改保存即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git-安装&quot;&gt;&lt;a href=&quot;#Git-安装&quot; class=&quot;headerlink&quot; title=&quot;Git 安装&quot;&gt;&lt;/a&gt;Git 安装&lt;/h2&gt;&lt;p&gt;Git 官网地址：&lt;a href=&quot;https://git-scm.com/book/zh/v2&quot; targ
      
    
    </summary>
    
    
      <category term="Git" scheme="https://dbing.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>PhpStorm Material 主题配置与字体选择</title>
    <link href="https://dbing.github.io/2019/04/19/PhpStorm-Material-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%AD%97%E4%BD%93%E9%80%89%E6%8B%A9/"/>
    <id>https://dbing.github.io/2019/04/19/PhpStorm-Material-主题配置与字体选择/</id>
    <published>2019-04-19T10:39:45.000Z</published>
    <updated>2020-03-20T10:51:34.407Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>古人云: “工欲善其事必先利其器”，分享一下自己在<code>PhpStorm</code>中的自己喜欢的<code>Material</code>主题以及开发字体。</p></blockquote><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p>预览官网效果，<a href="https://plugins.jetbrains.com/plugin/8006-material-theme-ui" target="_blank" rel="noopener">去预览</a></p><p>我的主题效果<img src="/2019/04/19/PhpStorm-Material-主题配置与字体选择/install-view.png" title="预览效果"></p><a id="more"></a><h2 id="安装-Material"><a href="#安装-Material" class="headerlink" title="安装 Material"></a>安装 Material</h2><p>步骤 File-&gt;Setting-&gt;Plugins-&gt;Marketplace</p><p>已安装后截图<br><img src="/2019/04/19/PhpStorm-Material-主题配置与字体选择/install-material.png" title="安装 Material"></p><h2 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h2><p>步骤 File-&gt;Setting-&gt;Material Theme-&gt;Selected Theme</p><img src="/2019/04/19/PhpStorm-Material-主题配置与字体选择/theme-material.png" title="选择主题"><h2 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h2><p>步骤 File-&gt;Setting-&gt;Editor-&gt;Color Scheme-&gt;Color Scheme Font</p><img src="/2019/04/19/PhpStorm-Material-主题配置与字体选择/theme-material-font.png" title="设置字体"><p>个人喜好字体：<code>Fira Code Medium</code></p><h2 id="个人配置文件"><a href="#个人配置文件" class="headerlink" title="个人配置文件"></a>个人配置文件</h2><a href="/2019/04/19/PhpStorm-Material-主题配置与字体选择/settings.zip" title="[下载我的配置]">[下载我的配置]</a><p>导入步骤 File-&gt;Import Settings</p><h2 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h2><ul><li><a href="https://github.com/equinusocio/material-theme" title="[material-theme github]" target="_blank" rel="noopener">跳转至 material Github</a></li></ul><p>End :-)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;古人云: “工欲善其事必先利其器”，分享一下自己在&lt;code&gt;PhpStorm&lt;/code&gt;中的自己喜欢的&lt;code&gt;Material&lt;/code&gt;主题以及开发字体。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;效果预览&quot;&gt;&lt;a href=&quot;#效果预览&quot; class=&quot;headerlink&quot; title=&quot;效果预览&quot;&gt;&lt;/a&gt;效果预览&lt;/h2&gt;&lt;p&gt;预览官网效果，&lt;a href=&quot;https://plugins.jetbrains.com/plugin/8006-material-theme-ui&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;去预览&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我的主题效果&lt;img src=&quot;/2019/04/19/PhpStorm-Material-主题配置与字体选择/install-view.png&quot; title=&quot;预览效果&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发者工具" scheme="https://dbing.github.io/categories/%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="PhpStorm" scheme="https://dbing.github.io/tags/PhpStorm/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 5.7 的最佳技巧和良好实践</title>
    <link href="https://dbing.github.io/2019/04/01/Laravel-5-7-%E7%9A%84%E6%9C%80%E4%BD%B3%E6%8A%80%E5%B7%A7%E5%92%8C%E8%89%AF%E5%A5%BD%E5%AE%9E%E8%B7%B5/"/>
    <id>https://dbing.github.io/2019/04/01/Laravel-5-7-的最佳技巧和良好实践/</id>
    <published>2019-04-01T13:46:50.000Z</published>
    <updated>2019-04-18T08:45:04.638Z</updated>
    
    <content type="html"><![CDATA[<p>许多PHP开发人员已经知道Laravel编写优雅、可工作和可调试的代码。它还支持很多很多特性，这些特性有时没有列在文档中，或者曾经列在文档中，但是由于各种原因被删除了。</p><p>我在工作中使用<code>Laravel</code>开发产品已经2年了，我一直学习从编写糟糕的代码到优雅的代码，自从第一次使用<code>Laravel</code>编写代码以来，我就一直在从中受益，我将向您展示在使用<code>Laravel</code>编写代码时可能会帮助您的神秘技巧。</p><h2 id="当您需要查询内容时，请使用local-scopes"><a href="#当您需要查询内容时，请使用local-scopes" class="headerlink" title="当您需要查询内容时，请使用local scopes"></a>当您需要查询内容时，请使用<code>local scopes</code></h2><p><code>Laravel</code>有一种很好的方法，可以使用<code>Query Builder</code>为数据库驱动程序编写查询，像这样：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$orders = Order::where(<span class="string">'status'</span>, <span class="string">'delivered'</span>)-&gt;where(<span class="string">'paid'</span>, <span class="keyword">true</span>)-&gt;get();</span><br></pre></td></tr></table></figure></p><p>这段代码看起来很好。这让我放弃了SQL，专注于编写对我来说更容易理解的代码。但是如果我们使用局部作用域（local scopes），这段代码可以写得更好。</p><a id="more"></a><p>局部作用域(local scopes)允许我们创建自己的查询生成器(Query Builder)方法，当我们试图检索数据时，我们可以使用这些方法来进行链接。例如，我们可以使用<code>-&gt;delivered()</code>和<code>-&gt;paid()</code>方法以更简洁的方式替换掉<code>-&gt;where()</code>语句。</p><p>首先，在我们的<code>Order</code>模型，我们应该添加如下方法：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopeDelivered</span><span class="params">($query)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $query-&gt;where(<span class="string">'status'</span>, <span class="string">'delivered'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopePaid</span><span class="params">($query)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $query-&gt;where(<span class="string">'paid'</span>, <span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在使用<code>local scopes</code>时，应该使用<code>scope[Something]</code>为前缀命名方法名。通过这种方式，<code>Laravel</code>将知道这是一个<code>scope</code>修饰的方法，并将在查询生成器（<code>Query Builder</code>）中使用它。确保包含的第一个参数是被<code>Laravel</code>自动注入并且是<code>Query Builder</code>的实例。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$orders = Order::delivered()-&gt;paid()-&gt;get();</span><br></pre></td></tr></table></figure></p><p>对于更多动态的检索，可以使用动态局部作用域（dynamic local scopes）。每个作用域（scope ）允许您提供参数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopeStatus</span><span class="params">($query, string $status)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> $query-&gt;where(<span class="string">'status'</span>, $status);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">$orders = Order::status(<span class="string">'delivered'</span>)-&gt;paid()-&gt;get();</span><br></pre></td></tr></table></figure><p>在后面的文章，您将了解为什么应该对数据库字段使用<code>snake_case</code>，这是第一个原因:<code>Laravel</code>默认使用<code>where[Something]</code>来替换前面的作用域。所以你可以做的是:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Order::whereStatus(<span class="string">'delivered'</span>)-&gt;paid()-&gt;get();</span><br></pre></td></tr></table></figure></p><p><code>Laravel</code>将要从<code>where[Something]</code>中搜索<code>snake_case</code>版本。如果您的数据表中有状态，您可以使用前面的示例。如果你有<code>shipping_status</code>字段，你也可以使用如下方式:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Order::whereShippingStatus(<span class="string">'delivered'</span>)-&gt;paid()-&gt;get();</span><br></pre></td></tr></table></figure></p><p>这是你的选择!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;许多PHP开发人员已经知道Laravel编写优雅、可工作和可调试的代码。它还支持很多很多特性，这些特性有时没有列在文档中，或者曾经列在文档中，但是由于各种原因被删除了。&lt;/p&gt;
&lt;p&gt;我在工作中使用&lt;code&gt;Laravel&lt;/code&gt;开发产品已经2年了，我一直学习从编写糟糕的代码到优雅的代码，自从第一次使用&lt;code&gt;Laravel&lt;/code&gt;编写代码以来，我就一直在从中受益，我将向您展示在使用&lt;code&gt;Laravel&lt;/code&gt;编写代码时可能会帮助您的神秘技巧。&lt;/p&gt;
&lt;h2 id=&quot;当您需要查询内容时，请使用local-scopes&quot;&gt;&lt;a href=&quot;#当您需要查询内容时，请使用local-scopes&quot; class=&quot;headerlink&quot; title=&quot;当您需要查询内容时，请使用local scopes&quot;&gt;&lt;/a&gt;当您需要查询内容时，请使用&lt;code&gt;local scopes&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Laravel&lt;/code&gt;有一种很好的方法，可以使用&lt;code&gt;Query Builder&lt;/code&gt;为数据库驱动程序编写查询，像这样：&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$orders = Order::where(&lt;span class=&quot;string&quot;&gt;&#39;status&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;delivered&#39;&lt;/span&gt;)-&amp;gt;where(&lt;span class=&quot;string&quot;&gt;&#39;paid&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;)-&amp;gt;get();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这段代码看起来很好。这让我放弃了SQL，专注于编写对我来说更容易理解的代码。但是如果我们使用局部作用域（local scopes），这段代码可以写得更好。&lt;/p&gt;
    
    </summary>
    
      <category term="Laravel" scheme="https://dbing.github.io/categories/Laravel/"/>
    
    
      <category term="laravel5.7" scheme="https://dbing.github.io/tags/laravel5-7/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 5.7 安装 Json Web Tokens (tymon/jwt-auth)</title>
    <link href="https://dbing.github.io/2019/03/30/Laravel-5-7-%E5%AE%89%E8%A3%85-Json-Web-Tokens-tymon-jwt-auth/"/>
    <id>https://dbing.github.io/2019/03/30/Laravel-5-7-安装-Json-Web-Tokens-tymon-jwt-auth/</id>
    <published>2019-03-30T02:04:07.000Z</published>
    <updated>2019-07-03T07:52:46.901Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍 Laravel 5.7 框架集成 jwt 操作指南，在官方的 <a href="https://github.com/tymondesigns/jwt-auth/wiki/Installation[external]" title="[wiki]" target="_blank" rel="noopener">wiki</a> 中也有介绍，是使用的<code>0.5.*</code>版本，本文使用的<code>jwt-auth</code>是<code>1.0.0-rc.3</code>版本，切记使用此扩展包的版本不同，集成也会稍有不同，否则你会得到意想不到的问题，根据自己 <code>laravel</code>版本不同使用<code>jwt-auth</code>版本建议如下：</p><table><thead><tr><th style="text-align:left">Laravel version</th><th>jwt-auth version</th></tr></thead><tbody><tr><td style="text-align:left"><code>4.*</code></td><td><code>0.3.*</code> <code>0.4.*</code></td></tr><tr><td style="text-align:left"><code>5.*</code> &amp;&amp; <code>&lt;5.5</code></td><td><code>0.5.*</code></td></tr><tr><td style="text-align:left"><code>5.*</code></td><td><code>1.0.*</code></td></tr></tbody></table><h2 id="安装扩展包-jwt-auth"><a href="#安装扩展包-jwt-auth" class="headerlink" title="安装扩展包 jwt-auth"></a>安装扩展包 jwt-auth</h2><p>将扩展包添加到<code>composer.json</code>，添加如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">“require”: &#123;</span><br><span class="line">    ...</span><br><span class="line">    “tymon/jwt-auth”: “1.0.0-rc.3”</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后通过命令更新<code>Composer</code>命令如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer update</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="设置配置"><a href="#设置配置" class="headerlink" title="设置配置"></a>设置配置</h2><p>创建<code>jwt secret</code>秘钥<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan jwt:secret</span><br></pre></td></tr></table></figure></p><blockquote><p>tip：会在 <code>.env</code> 末尾行追加一行配置记录<code>JWT_SECRET=xxxxxx</code></p></blockquote><p>发布 jwt 配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish --provider=<span class="string">"Tymon\JWTAuth\Providers\LaravelServiceProvider"</span></span><br></pre></td></tr></table></figure></p><blockquote><p>tip：会在项目的<code>config</code>目录中新增一个<code>jwt.php</code>的配置文件</p></blockquote><h2 id="添加到服务提供者"><a href="#添加到服务提供者" class="headerlink" title="添加到服务提供者"></a>添加到服务提供者</h2><p>打开<code>config/app.php</code>并在<code>aliases</code>数组中添加以下行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'JWTAuth'</span> =&gt; Tymon\JWTAuth\Facades\JWTAuth::class,</span><br><span class="line"><span class="string">'JWTFactory'</span> =&gt; Tymon\JWTAuth\Facades\JWTFactory::class,</span><br></pre></td></tr></table></figure></p><h2 id="添加到中间件"><a href="#添加到中间件" class="headerlink" title="添加到中间件"></a>添加到中间件</h2><p>打开<code>app/Http/Kernel.php</code>，然后在<code>$routeMiddleware</code>中添加以下行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'jwt.auth'</span> =&gt; \Tymon\JWTAuth\Http\Middleware\Authenticate::class,</span><br><span class="line"><span class="string">'jwt.refresh'</span> =&gt; \Tymon\JWTAuth\Http\Middleware\RefreshToken::class,</span><br></pre></td></tr></table></figure></p><h2 id="更新用户模型"><a href="#更新用户模型" class="headerlink" title="更新用户模型"></a>更新用户模型</h2><p>打开<code>User.php</code>并为模型实现<code>JWTSubject</code>，代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Tymon</span>\<span class="title">JWTAuth</span>\<span class="title">Contracts</span>\<span class="title">JWTSubject</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span> <span class="keyword">implements</span> <span class="title">JWTSubject</span></span></span><br></pre></td></tr></table></figure></p><p>并在模型中添加2个方法，添加如下代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getJWTIdentifier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getKey();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getJWTCustomClaims</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="更新配置文件-auth-php"><a href="#更新配置文件-auth-php" class="headerlink" title="更新配置文件 auth.php"></a>更新配置文件 auth.php</h2><p>打开<code>config/auth.php</code>并将 <code>guards</code> 中键为<code>api</code>的驱动(driver)改为<code>jwt</code>（默认为：token）代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'guards'</span> =&gt; [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'api'</span> =&gt; [</span><br><span class="line">        <span class="string">'driver'</span> =&gt; <span class="string">'jwt'</span>,</span><br><span class="line">        <span class="string">'provider'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h2 id="登录获取授权-Token"><a href="#登录获取授权-Token" class="headerlink" title="登录获取授权 Token"></a>登录获取授权 Token</h2><p>通过<code>artisan</code>创建<code>AuthController</code>控制器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:controller AuthController</span><br></pre></td></tr></table></figure><p>在控制器中<code>AuthController</code>添加如下登录获取<code>Token</code>的代码，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $credentials = request([<span class="string">'email'</span>, <span class="string">'password'</span>]);</span><br><span class="line">    <span class="keyword">if</span> (!$token = auth(<span class="string">'api'</span>)-&gt;attempt($credentials)) &#123;</span><br><span class="line">        <span class="keyword">return</span> response()-&gt;json([<span class="string">'error'</span> =&gt; <span class="string">'Unauthorized'</span>], <span class="number">401</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response()-&gt;json([</span><br><span class="line">        <span class="string">'token'</span> =&gt; $token,</span><br><span class="line">        <span class="string">'expires'</span> =&gt; auth(<span class="string">'api'</span>)-&gt;factory()-&gt;getTTL() * <span class="number">60</span>,</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建路由"><a href="#创建路由" class="headerlink" title="创建路由"></a>创建路由</h2><p>打开路由文件<code>routes/api.php</code>，添加如下路由代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::post(<span class="string">'login'</span>, <span class="string">'AuthController@login'</span>);</span><br></pre></td></tr></table></figure></p><p>添加一行测试数据<code>email:test@test.com</code>、<code>password:secret</code>，PostMan 测试截图如下：</p><img src="/2019/03/30/Laravel-5-7-安装-Json-Web-Tokens-tymon-jwt-auth/2019-03-30-11.38.png" title="登录授权获取Token"><p>添加<code>jwt.auth</code>中间件，保护你的路由，事例代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::middleware(<span class="string">'jwt.auth'</span>)-&gt;get(<span class="string">'users'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> auth(<span class="string">'api'</span>)-&gt;user();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>添加<code>Authorization: Bearer {token}</code>到请求(header)头，PostMan 测试截图如下：</p><img src="/2019/03/30/Laravel-5-7-安装-Json-Web-Tokens-tymon-jwt-auth/2019-03-30-11.45.png" title="通过Token获取用户信息"><h2 id="如果您想捕获异常"><a href="#如果您想捕获异常" class="headerlink" title="如果您想捕获异常"></a>如果您想捕获异常</h2><p>打开文件<code>app/Exceptions/Handler.php</code>在<code>render</code>方法开头使用如下代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpKernel</span>\<span class="title">Exception</span>\<span class="title">UnauthorizedHttpException</span>;</span><br></pre></td></tr></table></figure></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($exception <span class="keyword">instanceof</span> UnauthorizedHttpException) &#123;</span><br><span class="line">    $preException = $exception-&gt;getPrevious();</span><br><span class="line">    <span class="keyword">if</span> ($preException <span class="keyword">instanceof</span></span><br><span class="line">                  \Tymon\JWTAuth\Exceptions\TokenExpiredException) &#123;</span><br><span class="line">        <span class="keyword">return</span> response()-&gt;json([<span class="string">'error'</span> =&gt; <span class="string">'TOKEN_EXPIRED'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($preException <span class="keyword">instanceof</span></span><br><span class="line">                  \Tymon\JWTAuth\Exceptions\TokenInvalidException) &#123;</span><br><span class="line">        <span class="keyword">return</span> response()-&gt;json([<span class="string">'error'</span> =&gt; <span class="string">'TOKEN_INVALID'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($preException <span class="keyword">instanceof</span></span><br><span class="line">             \Tymon\JWTAuth\Exceptions\TokenBlacklistedException) &#123;</span><br><span class="line">         <span class="keyword">return</span> response()-&gt;json([<span class="string">'error'</span> =&gt; <span class="string">'TOKEN_BLACKLISTED'</span>]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> ($exception-&gt;getMessage() === <span class="string">'Token not provided'</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> response()-&gt;json([<span class="string">'error'</span> =&gt; <span class="string">'Token not provided'</span>]);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://jwt-auth.readthedocs.io/en/develop/laravel-installation/" title="[external] [官方文档]" target="_blank" rel="noopener">官方Wiki</a></li><li><a href="https://github.com/tymondesigns/jwt-auth" title="[external] [github]" target="_blank" rel="noopener">github</a></li></ul><p>End :)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍 Laravel 5.7 框架集成 jwt 操作指南，在官方的 &lt;a href=&quot;https://github.com/tymondesigns/jwt-auth/wiki/Installation[external]&quot; title=&quot;[wiki]&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wiki&lt;/a&gt; 中也有介绍，是使用的&lt;code&gt;0.5.*&lt;/code&gt;版本，本文使用的&lt;code&gt;jwt-auth&lt;/code&gt;是&lt;code&gt;1.0.0-rc.3&lt;/code&gt;版本，切记使用此扩展包的版本不同，集成也会稍有不同，否则你会得到意想不到的问题，根据自己 &lt;code&gt;laravel&lt;/code&gt;版本不同使用&lt;code&gt;jwt-auth&lt;/code&gt;版本建议如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Laravel version&lt;/th&gt;
&lt;th&gt;jwt-auth version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;4.*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0.3.*&lt;/code&gt; &lt;code&gt;0.4.*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;5.*&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;&amp;lt;5.5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0.5.*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;5.*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.0.*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;安装扩展包-jwt-auth&quot;&gt;&lt;a href=&quot;#安装扩展包-jwt-auth&quot; class=&quot;headerlink&quot; title=&quot;安装扩展包 jwt-auth&quot;&gt;&lt;/a&gt;安装扩展包 jwt-auth&lt;/h2&gt;&lt;p&gt;将扩展包添加到&lt;code&gt;composer.json&lt;/code&gt;，添加如下代码&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;“require”: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    “tymon/jwt-auth”: “1.0.0-rc.3”&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后通过命令更新&lt;code&gt;Composer&lt;/code&gt;命令如下&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;composer update&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Laravel" scheme="https://dbing.github.io/categories/Laravel/"/>
    
    
      <category term="laravel5.7 | jwt-auth" scheme="https://dbing.github.io/tags/laravel5-7-jwt-auth/"/>
    
  </entry>
  
  <entry>
    <title>PhpStorm配置Xdebug远程调试</title>
    <link href="https://dbing.github.io/2019/03/19/PhpStorm-%E9%85%8D%E7%BD%AE-Xdebug-%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    <id>https://dbing.github.io/2019/03/19/PhpStorm-配置-Xdebug-远程调试/</id>
    <published>2019-03-19T02:29:54.000Z</published>
    <updated>2020-03-20T10:04:53.575Z</updated>
    
    <content type="html"><![CDATA[<p>调试复杂些的项目代码，<code>Xdebug</code> 是一把利器，本文结合自己的开发环境简讲通过<code>PhpStorm</code>完成<code>Xdebug</code>调试,部分原理图借鉴<code>xxlegend</code>作者</p><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><blockquote class="pullquote [class]"><p>本机：Windows10 + PhpStorm 2018 + Ip 192.168.10.108</p><p>开发机：CentOS 6.10 + PHP 7.1 + Nginx 1.14 + Ip 192.168.10.140</p></blockquote><h3 id="开发方式"><a href="#开发方式" class="headerlink" title="开发方式"></a>开发方式</h3><p>一般情况开发者都是在本地开发，使用的开发环境也是本地自己搭建的，无论是在<code>Win</code>、<code>Mac</code>、<code>Linux</code>三者哪一个平台开发，最终想达到的体验是尽可能和生产环境一致，如果是在<code>Win</code>下开发，带来的代码兼容性问题时长让人难受（如：大小写问题），以至于追求<code>Unix</code>开发是一种潮流，这可能便是<code>Mac</code>之所以时程序员所爱的原因吧，<code>Win</code>下要想到达此效果。</p><ol><li>通过在<code>Window</code>下安装虚拟机，虚拟机中安装<code>Linxu</code>系统；</li><li>使用<code>Windows 10</code>已经支持开启子系统，<code>Ubuntu</code>子系统中安装<code>PHP</code>开发环境；</li><li>使用公司提供的公共开发机，开发机环境和所需服务都是安装好的，通过<code>samba</code>共享目录方式，本机无环境，开发机创建一个自己的虚拟目录；</li></ol><ul><li>方法一：没有配置上<code>SSD</code>，内存没到<code>4G</code> 慎用 </li><li>方法二：<code>Windows 10</code> 开启子系统，在应用市场一键安装<code>Ubuntu</code>，还是很方便的，在子系统中可以直接访问宿主机(本机)目录，使用感很方便。</li><li>方法三：我公司为了开发者方便，搭建了<code>IP</code>为<code>140</code>的开发机，通过<code>samba</code>创建虚拟目录，本地添加网络盘方式打开<code>140</code>自己<code>Home</code>开发目录；</li></ul><a id="more"></a><h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><blockquote><p>开发机（140）项目目录<code>/home/dingbing/zhifu</code><br>本机目录<code>Z:\zhifu</code></p></blockquote><p>本机通过挂载网络盘方式，访问到开发机<code>/home/dingbing/zhifu</code></p><h2 id="Xdebug-原理介绍"><a href="#Xdebug-原理介绍" class="headerlink" title="Xdebug 原理介绍"></a>Xdebug 原理介绍</h2><h3 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h3><img src="/2019/03/19/PhpStorm-配置-Xdebug-远程调试/xdebug_1.png" class="[class names]" title="[width] [height] [title text [alt text]]"><p>客户端（浏览器）发起请求，服务器Apache（或Nginx等），接收请求根据服务端配置规则如果是<code>.php</code>转交<code>PHP</code>，如果携带调试信息<code>?XDEBUG_SESSION_START=10003</code>参数，并且<code>PHP</code>引擎安装且开启了<code>Xdebug</code>，<code>Xdebug</code>把信息转发给<code>IDE</code>，从而完成断点调试。</p><h3 id="通信设置"><a href="#通信设置" class="headerlink" title="通信设置"></a>通信设置</h3><p>使用静态IP/单个开发人员</p><img src="/2019/03/19/PhpStorm-配置-Xdebug-远程调试/dbgp-setup.gif" class="[class names]" title="[width] [height] [title text [alt text]]"><ol><li>服务器的IP是10.0.1.2，端口是HTTP</li><li>IDE在IP 10.0.1.42上，因此xdebug。remote_host被设置为10.0.1.42</li><li>IDE监听端口9000，所以是xdebug。remote_port被设置为9000</li><li>HTTP请求在运行IDE的机器上启动</li><li>Xdebug连接到10.0.1.42:9000</li><li>调试运行，提供HTTP响应</li></ol><h2 id="安装并调试"><a href="#安装并调试" class="headerlink" title="安装并调试"></a>安装并调试</h2><h3 id="安装-Xdebug"><a href="#安装-Xdebug" class="headerlink" title="安装 Xdebug"></a>安装 Xdebug</h3><p>这里平台不一样，安装方式也不一样，<code>Linux</code> 和 <code>Window</code> 平台会稍有不同，PHP 版本不一样，对应安装的<code>Xdebug</code>版本也不一样，安装方式这里暂时不总结了。</p><p><code>Linux</code> 下编译后，将<code>.so</code>文件引入到<code>php.ini</code><br><code>Window</code>下，将对应的<code>xdebug.dll</code>库文件引入到<code>php.ini</code></p><p>官方下载地址 <a href="https://xdebug.org/download.php" target="_blank" rel="noopener">https://xdebug.org/download.php</a><br>安装后我的(CentOS)<code>php.ini</code>配置清单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[XDebug]</span><br><span class="line">xdebug.idekey=PHPSTORM</span><br><span class="line">xdebug.remote_mode=req</span><br><span class="line"></span><br><span class="line">;xdebug.remote_connect_back = 1</span><br><span class="line">;//注意：如果开启此，将忽略下面的 xdebug.remote_host 的参数</span><br><span class="line"></span><br><span class="line">xdebug.remote_host=192.168.10.117</span><br><span class="line">;//注意：客户端的IP&lt;即IDE的机器的ip&gt;</span><br><span class="line"></span><br><span class="line">xdebug.remote_enable=1</span><br><span class="line">xdebug.remote_port=9009</span><br><span class="line">;//注意：客户端的端口&lt;与IDE的Xdebug端口一致，此端口不能被其他程序占用&gt;</span><br><span class="line"></span><br><span class="line">xdebug.remote_handler=dbgp</span><br><span class="line">xdebug.auto_trace = 1</span><br><span class="line">;xdebug.remote_log = /tmp/xdebug.log</span><br><span class="line"></span><br><span class="line">zend_extension=/www/server/php/71/lib/php/extensions/no-debug-non-zts-20160303/xdebug.so</span><br></pre></td></tr></table></figure></p><p>配置项解释：<a href="https://xdebug.org/docs/remote" target="_blank" rel="noopener">https://xdebug.org/docs/remote</a></p><h3 id="配置-Debug"><a href="#配置-Debug" class="headerlink" title="配置 Debug"></a>配置 Debug</h3><p>步骤 File-&gt;Setting-&gt;Languages &amp; Frameworks-&gt;PHP-&gt;Debug</p><p>注意<code>IDE Xdebug port</code>端口要和<code>php.ini</code>配置保持一致。</p><img src="/2019/03/19/PhpStorm-配置-Xdebug-远程调试/xdebug_set_1.png" class="[class names]" title="[width] [height] [title text [alt text]]"><h3 id="配置-Servers"><a href="#配置-Servers" class="headerlink" title="配置 Servers"></a>配置 Servers</h3><p>步骤 File-&gt;Setting-&gt;Languages &amp; Frameworks-&gt;PHP-&gt;Servers</p><img src="/2019/03/19/PhpStorm-配置-Xdebug-远程调试/xdebug_set_2.png" class="[class names]" title="[width] [height] [title text [alt text]]"><h3 id="配置-Debug-Configuer"><a href="#配置-Debug-Configuer" class="headerlink" title="配置 Debug Configuer"></a>配置 Debug Configuer</h3><p>步骤 Run-&gt;Edit Configurations-&gt;Add New Configuration</p><img src="/2019/03/19/PhpStorm-配置-Xdebug-远程调试/xdebug_set_3.png" class="[class names]" title="[width] [height] [title text [alt text]]"><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><ol><li>打断点</li><li>点击右上角小虫子图标，开启调试</li></ol><img src="/2019/03/19/PhpStorm-配置-Xdebug-远程调试/xdebug_set_4.png" class="[class names]" title="[width] [height] [title text [alt text]]"><ol start="3"><li>如果看到如下图，那么恭喜你，已经成功开启了断点调试</li></ol><img src="/2019/03/19/PhpStorm-配置-Xdebug-远程调试/xdebug_set_5.png" class="[class names]" title="[width] [height] [title text [alt text]]"><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>Q：开启<code>Debug</code>后，1分钟后调试自动终止了。<br>A：是因为<code>PHP</code>脚本默认超时时间是 1分钟，设置<code>PHP</code> 超时时间为1小时、或2小时，</p><p>设置方式：</p><ol><li>Nginx、php-fpm 情况，修改 php-fpm.conf 文件<code>request_terminate_timeout = 7200</code> </li><li>apache Module 情况，修改 httpd/conf.d/fcgid.conf 文件 <code>FcgidIOTimeout 7200</code></li></ol><p>END :-)</p><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><ul><li><a href="http://xxlegend.com/2017/05/23/PhpStorm%20Xdebug%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E5%8F%8A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/" target="_blank" rel="noopener">http://xxlegend.com/2017/05/23/PhpStorm%20Xdebug%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E5%8F%8A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;调试复杂些的项目代码，&lt;code&gt;Xdebug&lt;/code&gt; 是一把利器，本文结合自己的开发环境简讲通过&lt;code&gt;PhpStorm&lt;/code&gt;完成&lt;code&gt;Xdebug&lt;/code&gt;调试,部分原理图借鉴&lt;code&gt;xxlegend&lt;/code&gt;作者&lt;/p&gt;
&lt;h2 id=&quot;环境介绍&quot;&gt;&lt;a href=&quot;#环境介绍&quot; class=&quot;headerlink&quot; title=&quot;环境介绍&quot;&gt;&lt;/a&gt;环境介绍&lt;/h2&gt;&lt;blockquote class=&quot;pullquote [class]&quot;&gt;&lt;p&gt;本机：Windows10 + PhpStorm 2018 + Ip 192.168.10.108&lt;/p&gt;
&lt;p&gt;开发机：CentOS 6.10 + PHP 7.1 + Nginx 1.14 + Ip 192.168.10.140&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;开发方式&quot;&gt;&lt;a href=&quot;#开发方式&quot; class=&quot;headerlink&quot; title=&quot;开发方式&quot;&gt;&lt;/a&gt;开发方式&lt;/h3&gt;&lt;p&gt;一般情况开发者都是在本地开发，使用的开发环境也是本地自己搭建的，无论是在&lt;code&gt;Win&lt;/code&gt;、&lt;code&gt;Mac&lt;/code&gt;、&lt;code&gt;Linux&lt;/code&gt;三者哪一个平台开发，最终想达到的体验是尽可能和生产环境一致，如果是在&lt;code&gt;Win&lt;/code&gt;下开发，带来的代码兼容性问题时长让人难受（如：大小写问题），以至于追求&lt;code&gt;Unix&lt;/code&gt;开发是一种潮流，这可能便是&lt;code&gt;Mac&lt;/code&gt;之所以时程序员所爱的原因吧，&lt;code&gt;Win&lt;/code&gt;下要想到达此效果。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过在&lt;code&gt;Window&lt;/code&gt;下安装虚拟机，虚拟机中安装&lt;code&gt;Linxu&lt;/code&gt;系统；&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;Windows 10&lt;/code&gt;已经支持开启子系统，&lt;code&gt;Ubuntu&lt;/code&gt;子系统中安装&lt;code&gt;PHP&lt;/code&gt;开发环境；&lt;/li&gt;
&lt;li&gt;使用公司提供的公共开发机，开发机环境和所需服务都是安装好的，通过&lt;code&gt;samba&lt;/code&gt;共享目录方式，本机无环境，开发机创建一个自己的虚拟目录；&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;方法一：没有配置上&lt;code&gt;SSD&lt;/code&gt;，内存没到&lt;code&gt;4G&lt;/code&gt; 慎用 &lt;/li&gt;
&lt;li&gt;方法二：&lt;code&gt;Windows 10&lt;/code&gt; 开启子系统，在应用市场一键安装&lt;code&gt;Ubuntu&lt;/code&gt;，还是很方便的，在子系统中可以直接访问宿主机(本机)目录，使用感很方便。&lt;/li&gt;
&lt;li&gt;方法三：我公司为了开发者方便，搭建了&lt;code&gt;IP&lt;/code&gt;为&lt;code&gt;140&lt;/code&gt;的开发机，通过&lt;code&gt;samba&lt;/code&gt;创建虚拟目录，本地添加网络盘方式打开&lt;code&gt;140&lt;/code&gt;自己&lt;code&gt;Home&lt;/code&gt;开发目录；&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="开发者工具" scheme="https://dbing.github.io/categories/%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="xdebug" scheme="https://dbing.github.io/tags/xdebug/"/>
    
  </entry>
  
  <entry>
    <title>配置双公钥完成同时对 gitee 和 github 的使用</title>
    <link href="https://dbing.github.io/2018/12/31/%E9%85%8D%E7%BD%AE%E5%8F%8C%E5%85%AC%E9%92%A5%E5%AE%8C%E6%88%90%E5%90%8C%E6%97%B6%E5%AF%B9-gitee-%E5%92%8C-github-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://dbing.github.io/2018/12/31/配置双公钥完成同时对-gitee-和-github-的使用/</id>
    <published>2018-12-31T15:02:16.000Z</published>
    <updated>2019-04-18T08:45:04.642Z</updated>
    
    <content type="html"><![CDATA[<p>问题起因背景是在本机开发时，使用 git 管理项目时，开源项目使用的是 github 托管，企业私有项目使用的是企业版码云管理，之前一直使用 git 的面板工具（mac 平台中的 Sourcetree ），不存在这样的问题，现在想改为命令的习惯使用 git 发现，本机为 gitee 项目生成了公钥，再为 github 生成公钥时，gitee 的公钥就会被覆盖，这就不能愉快的玩耍了。那么如果做到要这两个公钥并存的呢，往下走。</p><h2 id="生成-gitee-公钥"><a href="#生成-gitee-公钥" class="headerlink" title="生成 gitee 公钥"></a>生成 gitee 公钥</h2><p>生成 gitee 用的 SSH-Key<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">'xxxxx@xxx.com'</span> -f ~/.ssh/gitee_id_rsa</span><br></pre></td></tr></table></figure></p><p>tip:「<a href="mailto:xxxxx@xxx.com" target="_blank" rel="noopener">xxxxx@xxx.com</a>」替换为自己 gitee 邮箱</p><p>按照提示完成三次回车，即可生成 ssh key。通过查看 <code>~/.ssh/gitee_id_rsa.pub</code> 文件内容，获取到你的 public key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/gitee_id_rsa.pub</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCwLn0yWMfx6lNOdu58M0JYot......</span><br></pre></td></tr></table></figure><p>复制生成后的 public key，<br>添加为项目公钥：通过仓库主页 「管理」-&gt;「部署公钥管理」-&gt;「添加部署公钥」，如果需要可写权限那么需要添加到个人公钥。<br>添加为个人公钥：<a href="https://gitee.com/profile/sshkeys" target="_blank" rel="noopener">传送门</a></p><a id="more"></a><p>详细步骤可参见：</p><ul><li>gitee 生成/添加SSH公钥 <a href="https://gitee.com/help/articles/4181" target="_blank" rel="noopener">码云帮助中心</a>，</li><li>个人公钥和项目公钥区别可见：<a href="https://gitee.com/help/articles/4191#article-header1" target="_blank" rel="noopener">码云帮助中心</a></li></ul><h2 id="生成-github-公钥"><a href="#生成-github-公钥" class="headerlink" title="生成 github 公钥"></a>生成 github 公钥</h2><p>生成一个github 用的 SSH-Key<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">'xxxxx@xxx.com'</span> -f ~/.ssh/github_id_rsa</span><br></pre></td></tr></table></figure></p><p>tip:「<a href="mailto:xxxxx@xxx.com" target="_blank" rel="noopener">xxxxx@xxx.com</a>」替换为自己 github 邮箱</p><p>github 添加为个人公钥：<a href="https://github.com/settings/keys" target="_blank" rel="noopener">传送门</a></p><h2 id="创建-config-解决公钥冲突"><a href="#创建-config-解决公钥冲突" class="headerlink" title="创建 config 解决公钥冲突"></a>创建 config 解决公钥冲突</h2><p>在 ~/.ssh 目录下新建一个config文件，添加如下内容（其中Host和HostName填写git服务器的域名，IdentityFile指定私钥的路径）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># gitee</span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/gitee_id_rsa</span><br><span class="line"># github</span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/github_id_rsa</span><br></pre></td></tr></table></figure></p><h2 id="测试公钥"><a href="#测试公钥" class="headerlink" title="测试公钥"></a>测试公钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@gitee.com</span><br><span class="line">Hi braem! You<span class="string">'ve successfully authenticated, but GITEE.COM does not provide shell access.</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi dbing! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>如果提示以上信息，恭喜又可以愉快的玩耍了 :)</p>]]></content>
    
    <summary type="html">
    
      通过配置 .ssh/config 文件完成对 gitee、gitlab、github...等多域下分别使用不同公钥的，达到可以在命令行中愉快的玩耍各个 git 远程仓库
    
    </summary>
    
    
      <category term="配置公钥" scheme="https://dbing.github.io/tags/%E9%85%8D%E7%BD%AE%E5%85%AC%E9%92%A5/"/>
    
  </entry>
  
</feed>
